{"ast":null,"code":"\"use strict\";\n\n/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\nvar _slicedToArray = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningKey = void 0;\nvar tslib_1 = require(\"tslib\");\nvar secp256k1 = tslib_1.__importStar(require(\"@noble/secp256k1\"));\nvar index_js_1 = require(\"../utils/index.js\");\nvar hmac_js_1 = require(\"./hmac.js\");\nvar signature_js_1 = require(\"./signature.js\");\n//const N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// Make noble-secp256k1 sync\nsecp256k1.utils.hmacSha256Sync = function (key) {\n  for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    messages[_key - 1] = arguments[_key];\n  }\n  return (0, index_js_1.getBytes)((0, hmac_js_1.computeHmac)(\"sha256\", key, (0, index_js_1.concat)(messages)));\n};\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nvar _privateKey = /*#__PURE__*/new WeakMap();\nvar SigningKey = /*#__PURE__*/function () {\n  /**\n   *  Creates a new **SigningKey** for %%privateKey%%.\n   */\n  function SigningKey(privateKey) {\n    _classCallCheck(this, SigningKey);\n    _classPrivateFieldInitSpec(this, _privateKey, {\n      writable: true,\n      value: void 0\n    });\n    (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n    _classPrivateFieldSet(this, _privateKey, (0, index_js_1.hexlify)(privateKey));\n  }\n  /**\n   *  The private key.\n   */\n  _createClass(SigningKey, [{\n    key: \"privateKey\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _privateKey);\n    }\n    /**\n     *  The uncompressed public key.\n     *\n     * This will always begin with the prefix ``0x04`` and be 132\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n     */\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return SigningKey.computePublicKey(_classPrivateFieldGet(this, _privateKey));\n    }\n    /**\n     *  The compressed public key.\n     *\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n     *  nibbles)\n     */\n  }, {\n    key: \"compressedPublicKey\",\n    get: function get() {\n      return SigningKey.computePublicKey(_classPrivateFieldGet(this, _privateKey), true);\n    }\n    /**\n     *  Return the signature of the signed %%digest%%.\n     */\n  }, {\n    key: \"sign\",\n    value: function sign(digest) {\n      (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\n      var _secp256k1$signSync = secp256k1.signSync((0, index_js_1.getBytesCopy)(digest), (0, index_js_1.getBytesCopy)(_classPrivateFieldGet(this, _privateKey)), {\n          recovered: true,\n          canonical: true\n        }),\n        _secp256k1$signSync2 = _slicedToArray(_secp256k1$signSync, 2),\n        sigDer = _secp256k1$signSync2[0],\n        recid = _secp256k1$signSync2[1];\n      var sig = secp256k1.Signature.fromHex(sigDer);\n      return signature_js_1.Signature.from({\n        r: (0, index_js_1.toBeHex)(\"0x\" + sig.r.toString(16), 32),\n        s: (0, index_js_1.toBeHex)(\"0x\" + sig.s.toString(16), 32),\n        v: recid ? 0x1c : 0x1b\n      });\n    }\n    /**\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\n     *  private key and the %%other%% key.\n     *\n     *  The %%other%% key may be any type of key, a raw public key,\n     *  a compressed/uncompressed pubic key or aprivate key.\n     *\n     *  Best practice is usually to use a cryptographic hash on the\n     *  returned value before using it as a symetric secret.\n     *\n     *  @example:\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\n     *\n     *    // Notice that privA.computeSharedSecret(pubB)...\n     *    sign1.computeSharedSecret(sign2.publicKey)\n     *    //_result:\n     *\n     *    // ...is equal to privB.computeSharedSecret(pubA).\n     *    sign2.computeSharedSecret(sign1.publicKey)\n     *    //_result:\n     */\n  }, {\n    key: \"computeSharedSecret\",\n    value: function computeSharedSecret(other) {\n      var pubKey = SigningKey.computePublicKey(other);\n      return (0, index_js_1.hexlify)(secp256k1.getSharedSecret((0, index_js_1.getBytesCopy)(_classPrivateFieldGet(this, _privateKey)), (0, index_js_1.getBytes)(pubKey)));\n    }\n    /**\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\n     *\n     *  The %%key%% may be any type of key, a raw public key, a\n     *  compressed/uncompressed public key or private key.\n     *\n     *  @example:\n     *    sign = new SigningKey(id(\"some-secret\"));\n     *\n     *    // Compute the uncompressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey)\n     *    //_result:\n     *\n     *    // Compute the compressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey, true)\n     *    //_result:\n     *\n     *    // Compute the uncompressed public key\n     *    SigningKey.computePublicKey(sign.publicKey, false);\n     *    //_result:\n     *\n     *    // Compute the Compressed a public key\n     *    SigningKey.computePublicKey(sign.publicKey, true);\n     *    //_result:\n     */\n  }], [{\n    key: \"computePublicKey\",\n    value: function computePublicKey(key, compressed) {\n      var bytes = (0, index_js_1.getBytes)(key, \"key\");\n      // private key\n      if (bytes.length === 32) {\n        var pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n        return (0, index_js_1.hexlify)(pubKey);\n      }\n      // raw public key; use uncompressed key with 0x04 prefix\n      if (bytes.length === 64) {\n        var pub = new Uint8Array(65);\n        pub[0] = 0x04;\n        pub.set(bytes, 1);\n        bytes = pub;\n      }\n      var point = secp256k1.Point.fromHex(bytes);\n      return (0, index_js_1.hexlify)(point.toRawBytes(compressed));\n    }\n    /**\n     *  Returns the public key for the private key which produced the\n     *  %%signature%% for the given %%digest%%.\n     *\n     *  @example:\n     *    key = new SigningKey(id(\"some-secret\"))\n     *    digest = id(\"hello world\")\n     *    sig = key.sign(digest)\n     *\n     *    // Notice the signer public key...\n     *    key.publicKey\n     *    //_result:\n     *\n     *    // ...is equal to the recovered public key\n     *    SigningKey.recoverPublicKey(digest, sig)\n     *    //_result:\n     *\n     */\n  }, {\n    key: \"recoverPublicKey\",\n    value: function recoverPublicKey(digest, signature) {\n      (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, \"invalid digest length\", \"digest\", digest);\n      var sig = signature_js_1.Signature.from(signature);\n      var der = secp256k1.Signature.fromCompact((0, index_js_1.getBytesCopy)((0, index_js_1.concat)([sig.r, sig.s]))).toDERRawBytes();\n      var pubKey = secp256k1.recoverPublicKey((0, index_js_1.getBytesCopy)(digest), der, sig.yParity);\n      (0, index_js_1.assertArgument)(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n      return (0, index_js_1.hexlify)(pubKey);\n    }\n    /**\n     *  Returns the point resulting from adding the ellipic curve points\n     *  %%p0%% and %%p1%%.\n     *\n     *  This is not a common function most developers should require, but\n     *  can be useful for certain privacy-specific techniques.\n     *\n     *  For example, it is used by [[HDNodeWallet]] to compute child\n     *  addresses from parent public keys and chain codes.\n     */\n  }, {\n    key: \"addPoints\",\n    value: function addPoints(p0, p1, compressed) {\n      var pub0 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p0).substring(2));\n      var pub1 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p1).substring(2));\n      return \"0x\" + pub0.add(pub1).toHex(!!compressed);\n    }\n  }]);\n  return SigningKey;\n}();\nexports.SigningKey = SigningKey;","map":{"version":3,"names":["_slicedToArray","require","default","_classCallCheck","_createClass","_classPrivateFieldInitSpec","_classPrivateFieldGet","_classPrivateFieldSet","secp256k1","tslib_1","__importStar","index_js_1","hmac_js_1","signature_js_1","utils","hmacSha256Sync","key","_len","arguments","length","messages","Array","_key","getBytes","computeHmac","concat","_privateKey","WeakMap","SigningKey","privateKey","writable","value","assertArgument","dataLength","hexlify","get","computePublicKey","sign","digest","_secp256k1$signSync","signSync","getBytesCopy","recovered","canonical","_secp256k1$signSync2","sigDer","recid","sig","Signature","fromHex","from","r","toBeHex","toString","s","v","computeSharedSecret","other","pubKey","getSharedSecret","compressed","bytes","getPublicKey","pub","Uint8Array","set","point","Point","toRawBytes","recoverPublicKey","signature","der","fromCompact","toDERRawBytes","yParity","addPoints","p0","p1","pub0","substring","pub1","add","toHex","exports"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/crypto/signing-key.ts"],"sourcesContent":["/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\n\nimport * as secp256k1 from \"@noble/secp256k1\";\n\nimport {\n    concat, dataLength, getBytes, getBytesCopy, hexlify, toBeHex,\n    assertArgument\n} from \"../utils/index.js\";\n\nimport { computeHmac } from \"./hmac.js\";\nimport { Signature } from \"./signature.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport type { SignatureLike } from \"./index.js\";\n\n\n//const N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n\n// Make noble-secp256k1 sync\nsecp256k1.utils.hmacSha256Sync = function(key: Uint8Array, ...messages: Array<Uint8Array>): Uint8Array {\n    return getBytes(computeHmac(\"sha256\", key, concat(messages)));\n}\n\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nexport class SigningKey {\n    #privateKey: string;\n\n    /**\n     *  Creates a new **SigningKey** for %%privateKey%%.\n     */\n    constructor(privateKey: BytesLike) {\n        assertArgument(dataLength(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n        this.#privateKey = hexlify(privateKey);\n    }\n\n    /**\n     *  The private key.\n     */\n    get privateKey(): string { return this.#privateKey; }\n\n    /**\n     *  The uncompressed public key.\n     *\n     * This will always begin with the prefix ``0x04`` and be 132\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n     */\n    get publicKey(): string { return SigningKey.computePublicKey(this.#privateKey); }\n\n    /**\n     *  The compressed public key.\n     *\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n     *  nibbles)\n     */\n    get compressedPublicKey(): string { return SigningKey.computePublicKey(this.#privateKey, true); }\n\n    /**\n     *  Return the signature of the signed %%digest%%.\n     */\n    sign(digest: BytesLike): Signature {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n\n        const [ sigDer, recid ] = secp256k1.signSync(getBytesCopy(digest), getBytesCopy(this.#privateKey), {\n            recovered: true,\n            canonical: true\n        });\n\n        const sig = secp256k1.Signature.fromHex(sigDer);\n        return Signature.from({\n            r: toBeHex(\"0x\" + sig.r.toString(16), 32),\n            s: toBeHex(\"0x\" + sig.s.toString(16), 32),\n            v: (recid ? 0x1c: 0x1b)\n        });\n    }\n\n    /**\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\n     *  private key and the %%other%% key.\n     *\n     *  The %%other%% key may be any type of key, a raw public key,\n     *  a compressed/uncompressed pubic key or aprivate key.\n     *\n     *  Best practice is usually to use a cryptographic hash on the\n     *  returned value before using it as a symetric secret.\n     *\n     *  @example:\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\n     *\n     *    // Notice that privA.computeSharedSecret(pubB)...\n     *    sign1.computeSharedSecret(sign2.publicKey)\n     *    //_result:\n     *\n     *    // ...is equal to privB.computeSharedSecret(pubA).\n     *    sign2.computeSharedSecret(sign1.publicKey)\n     *    //_result:\n     */\n    computeSharedSecret(other: BytesLike): string {\n        const pubKey = SigningKey.computePublicKey(other);\n        return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey)));\n    }\n\n    /**\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\n     *\n     *  The %%key%% may be any type of key, a raw public key, a\n     *  compressed/uncompressed public key or private key.\n     *\n     *  @example:\n     *    sign = new SigningKey(id(\"some-secret\"));\n     *\n     *    // Compute the uncompressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey)\n     *    //_result:\n     *\n     *    // Compute the compressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey, true)\n     *    //_result:\n     *\n     *    // Compute the uncompressed public key\n     *    SigningKey.computePublicKey(sign.publicKey, false);\n     *    //_result:\n     *\n     *    // Compute the Compressed a public key\n     *    SigningKey.computePublicKey(sign.publicKey, true);\n     *    //_result:\n     */\n    static computePublicKey(key: BytesLike, compressed?: boolean): string {\n        let bytes = getBytes(key, \"key\");\n\n        // private key\n        if (bytes.length === 32) {\n            const pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n            return hexlify(pubKey);\n        }\n\n        // raw public key; use uncompressed key with 0x04 prefix\n        if (bytes.length === 64) {\n            const pub = new Uint8Array(65);\n            pub[0] = 0x04;\n            pub.set(bytes, 1);\n            bytes = pub;\n        }\n\n        const point = secp256k1.Point.fromHex(bytes);\n        return hexlify(point.toRawBytes(compressed));\n    }\n\n    /**\n     *  Returns the public key for the private key which produced the\n     *  %%signature%% for the given %%digest%%.\n     *\n     *  @example:\n     *    key = new SigningKey(id(\"some-secret\"))\n     *    digest = id(\"hello world\")\n     *    sig = key.sign(digest)\n     *\n     *    // Notice the signer public key...\n     *    key.publicKey\n     *    //_result:\n     *\n     *    // ...is equal to the recovered public key\n     *    SigningKey.recoverPublicKey(digest, sig)\n     *    //_result:\n     *\n     */\n    static recoverPublicKey(digest: BytesLike, signature: SignatureLike): string {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n\n        const sig = Signature.from(signature);\n        const der = secp256k1.Signature.fromCompact(getBytesCopy(concat([ sig.r, sig.s ]))).toDERRawBytes();\n\n        const pubKey = secp256k1.recoverPublicKey(getBytesCopy(digest), der, sig.yParity);\n        assertArgument(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n\n        return hexlify(pubKey);\n    }\n\n    /**\n     *  Returns the point resulting from adding the ellipic curve points\n     *  %%p0%% and %%p1%%.\n     *\n     *  This is not a common function most developers should require, but\n     *  can be useful for certain privacy-specific techniques.\n     *\n     *  For example, it is used by [[HDNodeWallet]] to compute child\n     *  addresses from parent public keys and chain codes.\n     */\n    static addPoints(p0: BytesLike, p1: BytesLike, compressed?: boolean): string {\n        const pub0 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p0).substring(2));\n        const pub1 = secp256k1.Point.fromHex(SigningKey.computePublicKey(p1).substring(2));\n        return \"0x\" + pub0.add(pub1).toHex(!!compressed)\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}