{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _assertThisInitialized = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FeeDataNetworkPlugin = exports.EnsPlugin = exports.GasCostPlugin = exports.NetworkPlugin = void 0;\nvar properties_js_1 = require(\"../utils/properties.js\");\nvar index_js_1 = require(\"../utils/index.js\");\nvar EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */\nvar NetworkPlugin = /*#__PURE__*/function () {\n  /**\n   *  Creates a new **NetworkPlugin**.\n   */\n  function NetworkPlugin(name) {\n    _classCallCheck(this, NetworkPlugin);\n    /**\n     *  The name of the plugin.\n     *\n     *  It is recommended to use reverse-domain-notation, which permits\n     *  unique names with a known authority as well as hierarchal entries.\n     */\n    _defineProperty(this, \"name\", void 0);\n    (0, properties_js_1.defineProperties)(this, {\n      name: name\n    });\n  }\n  /**\n   *  Creates a copy of this plugin.\n   */\n  _createClass(NetworkPlugin, [{\n    key: \"clone\",\n    value: function clone() {\n      return new NetworkPlugin(this.name);\n    }\n  }]);\n  return NetworkPlugin;\n}();\nexports.NetworkPlugin = NetworkPlugin;\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */\nvar GasCostPlugin = /*#__PURE__*/function (_NetworkPlugin) {\n  _inherits(GasCostPlugin, _NetworkPlugin);\n  var _super = _createSuper(GasCostPlugin);\n  /**\n   *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n   *  latest block or another GasCostPlugin supercedes that block number,\n   *  with the associated %%costs%%.\n   */\n  function GasCostPlugin(effectiveBlock, costs) {\n    var _this;\n    _classCallCheck(this, GasCostPlugin);\n    if (effectiveBlock == null) {\n      effectiveBlock = 0;\n    }\n    _this = _super.call(this, \"org.ethers.network.plugins.GasCost#\".concat(effectiveBlock || 0));\n    /**\n     *  The block number to treat these values as valid from.\n     *\n     *  This allows a hardfork to have updated values included as well as\n     *  mulutiple hardforks to be supported.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"effectiveBlock\", void 0);\n    /**\n     *  The transactions base fee.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"txBase\", void 0);\n    /**\n     *  The fee for creating a new account.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"txCreate\", void 0);\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"txDataZero\", void 0);\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"txDataNonzero\", void 0);\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"txAccessListStorageKey\", void 0);\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"txAccessListAddress\", void 0);\n    var props = {\n      effectiveBlock: effectiveBlock\n    };\n    function set(name, nullish) {\n      var value = (costs || {})[name];\n      if (value == null) {\n        value = nullish;\n      }\n      (0, index_js_1.assertArgument)(typeof value === \"number\", \"invalud value for \".concat(name), \"costs\", costs);\n      props[name] = value;\n    }\n    set(\"txBase\", 21000);\n    set(\"txCreate\", 32000);\n    set(\"txDataZero\", 4);\n    set(\"txDataNonzero\", 16);\n    set(\"txAccessListStorageKey\", 1900);\n    set(\"txAccessListAddress\", 2400);\n    (0, properties_js_1.defineProperties)(_assertThisInitialized(_this), props);\n    return _this;\n  }\n  _createClass(GasCostPlugin, [{\n    key: \"clone\",\n    value: function clone() {\n      return new GasCostPlugin(this.effectiveBlock, this);\n    }\n  }]);\n  return GasCostPlugin;\n}(NetworkPlugin);\nexports.GasCostPlugin = GasCostPlugin;\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */\nvar EnsPlugin = /*#__PURE__*/function (_NetworkPlugin2) {\n  _inherits(EnsPlugin, _NetworkPlugin2);\n  var _super2 = _createSuper(EnsPlugin);\n  /**\n   *  Creates a new **EnsPlugin** connected to %%address%% on the\n   *  %%targetNetwork%%. The default ENS address and mainnet is used\n   *  if unspecified.\n   */\n  function EnsPlugin(address, targetNetwork) {\n    var _this2;\n    _classCallCheck(this, EnsPlugin);\n    _this2 = _super2.call(this, \"org.ethers.plugins.network.Ens\");\n    /**\n     *  The ENS Registrty Contract address.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"address\", void 0);\n    /**\n     *  The chain ID that the ENS contract lives on.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"targetNetwork\", void 0);\n    (0, properties_js_1.defineProperties)(_assertThisInitialized(_this2), {\n      address: address || EnsAddress,\n      targetNetwork: targetNetwork == null ? 1 : targetNetwork\n    });\n    return _this2;\n  }\n  _createClass(EnsPlugin, [{\n    key: \"clone\",\n    value: function clone() {\n      return new EnsPlugin(this.address, this.targetNetwork);\n    }\n  }]);\n  return EnsPlugin;\n}(NetworkPlugin);\nexports.EnsPlugin = EnsPlugin;\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */\nvar _feeDataFunc = /*#__PURE__*/new WeakMap();\nvar FeeDataNetworkPlugin = /*#__PURE__*/function (_NetworkPlugin3) {\n  _inherits(FeeDataNetworkPlugin, _NetworkPlugin3);\n  var _super3 = _createSuper(FeeDataNetworkPlugin);\n  /**\n   *  Creates a new **FeeDataNetworkPlugin**.\n   */\n  function FeeDataNetworkPlugin(feeDataFunc) {\n    var _this3;\n    _classCallCheck(this, FeeDataNetworkPlugin);\n    _this3 = _super3.call(this, \"org.ethers.plugins.network.FeeData\");\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this3), _feeDataFunc, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(_assertThisInitialized(_this3), _feeDataFunc, feeDataFunc);\n    return _this3;\n  }\n  /**\n   *  Resolves to the fee data.\n   */\n  _createClass(FeeDataNetworkPlugin, [{\n    key: \"feeDataFunc\",\n    get:\n    /**\n     *  The fee data function provided to the constructor.\n     */\n    function get() {\n      return _classPrivateFieldGet(this, _feeDataFunc);\n    }\n  }, {\n    key: \"getFeeData\",\n    value: function () {\n      var _getFeeData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(provider) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _classPrivateFieldGet(this, _feeDataFunc).call(this, provider);\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getFeeData(_x) {\n        return _getFeeData.apply(this, arguments);\n      }\n      return getFeeData;\n    }()\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new FeeDataNetworkPlugin(_classPrivateFieldGet(this, _feeDataFunc));\n    }\n  }]);\n  return FeeDataNetworkPlugin;\n}(NetworkPlugin);\nexports.FeeDataNetworkPlugin = FeeDataNetworkPlugin;\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/","map":{"version":3,"names":["properties_js_1","require","index_js_1","EnsAddress","NetworkPlugin","name","_classCallCheck","_defineProperty","defineProperties","_createClass","key","value","clone","exports","GasCostPlugin","_NetworkPlugin","_inherits","_super","_createSuper","effectiveBlock","costs","_this","call","concat","_assertThisInitialized","props","set","nullish","assertArgument","EnsPlugin","_NetworkPlugin2","_super2","address","targetNetwork","_this2","_feeDataFunc","WeakMap","FeeDataNetworkPlugin","_NetworkPlugin3","_super3","feeDataFunc","_this3","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","get","_classPrivateFieldGet","_getFeeData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","provider","wrap","_callee$","_context","prev","next","abrupt","sent","stop","getFeeData","_x","apply","arguments"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/providers/plugins-network.ts"],"sourcesContent":["import { defineProperties } from \"../utils/properties.js\";\n\nimport { assertArgument } from \"../utils/index.js\";\n\nimport type {\n    FeeData, Provider\n} from \"./provider.js\";\n\n\n\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */\nexport class NetworkPlugin {\n    /**\n     *  The name of the plugin.\n     *\n     *  It is recommended to use reverse-domain-notation, which permits\n     *  unique names with a known authority as well as hierarchal entries.\n     */\n    readonly name!: string;\n\n    /**\n     *  Creates a new **NetworkPlugin**.\n     */\n    constructor(name: string) {\n        defineProperties<NetworkPlugin>(this, { name });\n    }\n\n    /**\n     *  Creates a copy of this plugin.\n     */\n    clone(): NetworkPlugin {\n        return new NetworkPlugin(this.name);\n    }\n\n//    validate(network: Network): NetworkPlugin {\n//        return this;\n//    }\n}\n\n\n/**\n *  The gas cost parameters for a [[GasCostPlugin]].\n */\nexport type GasCostParameters = {\n    /**\n     *  The transactions base fee.\n     */\n    txBase?: number;\n\n    /**\n     *  The fee for creating a new account.\n     */\n    txCreate?: number;\n\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    txDataZero?: number;\n\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    txDataNonzero?: number;\n\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    txAccessListStorageKey?: number;\n\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    txAccessListAddress?: number;\n};\n\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */\nexport class GasCostPlugin extends NetworkPlugin implements GasCostParameters {\n    /**\n     *  The block number to treat these values as valid from.\n     *\n     *  This allows a hardfork to have updated values included as well as\n     *  mulutiple hardforks to be supported.\n     */\n    readonly effectiveBlock!: number;\n\n    /**\n     *  The transactions base fee.\n     */\n    readonly txBase!: number;\n\n    /**\n     *  The fee for creating a new account.\n     */\n    readonly txCreate!: number;\n\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    readonly txDataZero!: number;\n\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    readonly txDataNonzero!: number;\n\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    readonly txAccessListStorageKey!: number;\n\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    readonly txAccessListAddress!: number;\n\n\n    /**\n     *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n     *  latest block or another GasCostPlugin supercedes that block number,\n     *  with the associated %%costs%%.\n     */\n    constructor(effectiveBlock?: number, costs?: GasCostParameters) {\n        if (effectiveBlock == null) { effectiveBlock = 0; }\n        super(`org.ethers.network.plugins.GasCost#${ (effectiveBlock || 0) }`);\n\n        const props: Record<string, number> = { effectiveBlock };\n        function set(name: keyof GasCostParameters, nullish: number): void {\n            let value = (costs || { })[name];\n            if (value == null) { value = nullish; }\n            assertArgument(typeof(value) === \"number\", `invalud value for ${ name }`, \"costs\", costs);\n            props[name] = value;\n        }\n\n        set(\"txBase\", 21000);\n        set(\"txCreate\", 32000);\n        set(\"txDataZero\", 4);\n        set(\"txDataNonzero\", 16);\n        set(\"txAccessListStorageKey\", 1900);\n        set(\"txAccessListAddress\", 2400);\n\n        defineProperties<GasCostPlugin>(this, props);\n    }\n\n    clone(): GasCostPlugin {\n        return new GasCostPlugin(this.effectiveBlock, this);\n    }\n}\n\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */\nexport class EnsPlugin extends NetworkPlugin {\n\n    /**\n     *  The ENS Registrty Contract address.\n     */\n    readonly address!: string;\n\n    /**\n     *  The chain ID that the ENS contract lives on.\n     */\n    readonly targetNetwork!: number;\n\n    /**\n     *  Creates a new **EnsPlugin** connected to %%address%% on the\n     *  %%targetNetwork%%. The default ENS address and mainnet is used\n     *  if unspecified.\n     */\n    constructor(address?: null | string, targetNetwork?: null | number) {\n        super(\"org.ethers.plugins.network.Ens\");\n        defineProperties<EnsPlugin>(this, {\n            address: (address || EnsAddress),\n            targetNetwork: ((targetNetwork == null) ? 1: targetNetwork)\n        });\n    }\n\n    clone(): EnsPlugin {\n        return new EnsPlugin(this.address, this.targetNetwork);\n    }\n}\n\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\n    readonly #feeDataFunc: (provider: Provider) => Promise<FeeData>;\n\n    /**\n     *  The fee data function provided to the constructor.\n     */\n    get feeDataFunc(): (provider: Provider) => Promise<FeeData> {\n        return this.#feeDataFunc;\n    }\n\n    /**\n     *  Creates a new **FeeDataNetworkPlugin**.\n     */\n    constructor(feeDataFunc: (provider: Provider) => Promise<FeeData>) {\n        super(\"org.ethers.plugins.network.FeeData\");\n        this.#feeDataFunc = feeDataFunc;\n    }\n\n    /**\n     *  Resolves to the fee data.\n     */\n    async getFeeData(provider: Provider): Promise<FeeData> {\n        return await this.#feeDataFunc(provider);\n    }\n\n    clone(): FeeDataNetworkPlugin {\n        return new FeeDataNetworkPlugin(this.#feeDataFunc);\n    }\n}\n\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}