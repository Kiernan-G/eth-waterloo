{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _get = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PocketProvider = void 0;\n/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */\nvar index_js_1 = require(\"../utils/index.js\");\nvar community_js_1 = require(\"./community.js\");\nvar network_js_1 = require(\"./network.js\");\nvar provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nvar defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.gateway.pokt.network\";\n    case \"goerli\":\n      return \"eth-goerli.gateway.pokt.network\";\n    case \"matic\":\n      return \"poly-mainnet.gateway.pokt.network\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai-rpc.gateway.pokt.network\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */\nvar PocketProvider = /*#__PURE__*/function (_provider_jsonrpc_js_) {\n  _inherits(PocketProvider, _provider_jsonrpc_js_);\n  var _super = _createSuper(PocketProvider);\n  /**\n   *  Create a new **PocketProvider**.\n   *\n   *  By default connecting to ``mainnet`` with a highly throttled\n   *  API key.\n   */\n  function PocketProvider(_network, applicationId, applicationSecret) {\n    var _this;\n    _classCallCheck(this, PocketProvider);\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    var network = network_js_1.Network.from(_network);\n    if (applicationId == null) {\n      applicationId = defaultApplicationId;\n    }\n    if (applicationSecret == null) {\n      applicationSecret = null;\n    }\n    var options = {\n      staticNetwork: network\n    };\n    var request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n    _this = _super.call(this, request, network, options);\n    /**\n     *  The Application ID for the Pocket connection.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"applicationId\", void 0);\n    /**\n     *  The Application Secret for making authenticated requests\n     *  to the Pocket connection.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"applicationSecret\", void 0);\n    (0, index_js_1.defineProperties)(_assertThisInitialized(_this), {\n      applicationId: applicationId,\n      applicationSecret: applicationSecret\n    });\n    return _this;\n  }\n  _createClass(PocketProvider, [{\n    key: \"_getProvider\",\n    value: function _getProvider(chainId) {\n      try {\n        return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n      } catch (error) {}\n      return _get(_getPrototypeOf(PocketProvider.prototype), \"_getProvider\", this).call(this, chainId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%applicationId%%.\n     */\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.applicationId === defaultApplicationId;\n    }\n  }], [{\n    key: \"getRequest\",\n    value: function getRequest(network, applicationId, applicationSecret) {\n      if (applicationId == null) {\n        applicationId = defaultApplicationId;\n      }\n      var request = new index_js_1.FetchRequest(\"https://\".concat(getHost(network.name), \"/v1/lb/\").concat(applicationId));\n      request.allowGzip = true;\n      if (applicationSecret) {\n        request.setCredentials(\"\", applicationSecret);\n      }\n      if (applicationId === defaultApplicationId) {\n        request.retryFunc = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request, response, attempt) {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  (0, community_js_1.showThrottleMessage)(\"PocketProvider\");\n                  return _context.abrupt(\"return\", true);\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function (_x, _x2, _x3) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n      }\n      return request;\n    }\n  }]);\n  return PocketProvider;\n}(provider_jsonrpc_js_1.JsonRpcProvider);\nexports.PocketProvider = PocketProvider;","map":{"version":3,"names":["index_js_1","require","community_js_1","network_js_1","provider_jsonrpc_js_1","defaultApplicationId","getHost","name","assertArgument","PocketProvider","_provider_jsonrpc_js_","_inherits","_super","_createSuper","_network","applicationId","applicationSecret","_this","_classCallCheck","network","Network","from","options","staticNetwork","request","getRequest","call","_defineProperty","_assertThisInitialized","defineProperties","_createClass","key","value","_getProvider","chainId","error","_get","_getPrototypeOf","prototype","isCommunityResource","FetchRequest","concat","allowGzip","setCredentials","retryFunc","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","attempt","wrap","_callee$","_context","prev","next","showThrottleMessage","abrupt","stop","_x","_x2","_x3","apply","arguments","JsonRpcProvider","exports"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/providers/provider-pocket.ts"],"sourcesContent":["/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"mainnet\":\n            return  \"eth-mainnet.gateway.pokt.network\";\n        case \"goerli\":\n            return \"eth-goerli.gateway.pokt.network\";\n\n        case \"matic\":\n            return \"poly-mainnet.gateway.pokt.network\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai-rpc.gateway.pokt.network\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */\nexport class PocketProvider extends JsonRpcProvider implements CommunityResourcable {\n\n    /**\n     *  The Application ID for the Pocket connection.\n     */\n    readonly applicationId!: string;\n\n    /**\n     *  The Application Secret for making authenticated requests\n     *  to the Pocket connection.\n     */\n    readonly applicationSecret!: null | string;\n\n    /**\n     *  Create a new **PocketProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */\n    constructor(_network?: Networkish, applicationId?: null | string, applicationSecret?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (applicationId == null) { applicationId = defaultApplicationId; }\n        if (applicationSecret == null) { applicationSecret = null; }\n\n        const options = { staticNetwork: network };\n\n        const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n        super(request, network, options);\n\n        defineProperties<PocketProvider>(this, { applicationId, applicationSecret });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%applicationId%%.\n     */\n    static getRequest(network: Network, applicationId?: null | string, applicationSecret?: null | string): FetchRequest {\n        if (applicationId == null) { applicationId = defaultApplicationId; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v1/lb/${ applicationId }`);\n        request.allowGzip = true;\n\n        if (applicationSecret) {\n            request.setCredentials(\"\", applicationSecret);\n        }\n\n        if (applicationId === defaultApplicationId) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"PocketProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}