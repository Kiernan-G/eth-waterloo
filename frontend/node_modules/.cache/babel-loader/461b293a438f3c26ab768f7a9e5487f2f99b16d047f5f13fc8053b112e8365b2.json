{"ast":null,"code":"var _jsxFileName = \"/Users/aryanbindroo/eth-waterloo/frontend/src/components/AssetSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ethers = require(\"ethers\");\nfunction AssetSelector(_ref) {\n  _s();\n  let {\n    account,\n    provider\n  } = _ref;\n  const [assets, setAssets] = useState([]);\n\n  // Fetch the assets once the provider and account are set\n  useEffect(() => {\n    if (provider && account) {\n      const fetchAssets = async () => {\n        // Fetch ETH balance\n        const ethBalance = await provider.getBalance(account);\n        setAssets([{\n          name: 'ETH',\n          balance: ethers.utils.formatEther(ethBalance)\n        }]);\n\n        // TODO: Fetch ERC20 and other token balances here\n      };\n\n      fetchAssets();\n    }\n  }, [provider, account]);\n\n  // Handle the selection of assets\n  const handleAssetSelection = event => {\n    const {\n      name,\n      checked\n    } = event.target;\n    setAssets(assets.map(asset => asset.name === name ? {\n      ...asset,\n      selected: checked\n    } : asset));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Select Assets to Include in the Will\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), assets.map(asset => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: asset.name,\n          checked: asset.selected || false,\n          onChange: handleAssetSelection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), asset.name, \" (\", asset.balance, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)\n    }, asset.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(AssetSelector, \"TkvTObijVMpqXANY4UjdWlfk3qg=\");\n_c = AssetSelector;\nexport default AssetSelector;\nvar _c;\n$RefreshReg$(_c, \"AssetSelector\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ethers","require","AssetSelector","_ref","_s","account","provider","assets","setAssets","fetchAssets","ethBalance","getBalance","name","balance","utils","formatEther","handleAssetSelection","event","checked","target","map","asset","selected","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","_c","$RefreshReg$"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/src/components/AssetSelector.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nconst ethers = require(\"ethers\");\n\nfunction AssetSelector({ account, provider }) {\n  const [assets, setAssets] = useState([]);\n\n  // Fetch the assets once the provider and account are set\n  useEffect(() => {\n    if (provider && account) {\n      const fetchAssets = async () => {\n        // Fetch ETH balance\n        const ethBalance = await provider.getBalance(account);\n        setAssets([{name: 'ETH', balance: ethers.utils.formatEther(ethBalance)}]);\n\n        // TODO: Fetch ERC20 and other token balances here\n      };\n\n      fetchAssets();\n    }\n  }, [provider, account]);\n\n  // Handle the selection of assets\n  const handleAssetSelection = (event) => {\n    const { name, checked } = event.target;\n    setAssets(assets.map(asset =>\n      asset.name === name ? { ...asset, selected: checked } : asset\n    ));\n  };\n\n  return (\n    <div>\n      <h1>Select Assets to Include in the Will</h1>\n      {assets.map(asset => (\n        <div key={asset.name}>\n          <label>\n            <input\n              type=\"checkbox\"\n              name={asset.name}\n              checked={asset.selected || false}\n              onChange={handleAssetSelection}\n            />\n            {asset.name} ({asset.balance})\n          </label>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default AssetSelector;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnD,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,SAASC,aAAaA,CAAAC,IAAA,EAAwB;EAAAC,EAAA;EAAA,IAAvB;IAAEC,OAAO;IAAEC;EAAS,CAAC,GAAAH,IAAA;EAC1C,MAAM,CAACI,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACAD,SAAS,CAAC,MAAM;IACd,IAAIU,QAAQ,IAAID,OAAO,EAAE;MACvB,MAAMI,WAAW,GAAG,MAAAA,CAAA,KAAY;QAC9B;QACA,MAAMC,UAAU,GAAG,MAAMJ,QAAQ,CAACK,UAAU,CAACN,OAAO,CAAC;QACrDG,SAAS,CAAC,CAAC;UAACI,IAAI,EAAE,KAAK;UAAEC,OAAO,EAAEb,MAAM,CAACc,KAAK,CAACC,WAAW,CAACL,UAAU;QAAC,CAAC,CAAC,CAAC;;QAEzE;MACF,CAAC;;MAEDD,WAAW,CAAC,CAAC;IACf;EACF,CAAC,EAAE,CAACH,QAAQ,EAAED,OAAO,CAAC,CAAC;;EAEvB;EACA,MAAMW,oBAAoB,GAAIC,KAAK,IAAK;IACtC,MAAM;MAAEL,IAAI;MAAEM;IAAQ,CAAC,GAAGD,KAAK,CAACE,MAAM;IACtCX,SAAS,CAACD,MAAM,CAACa,GAAG,CAACC,KAAK,IACxBA,KAAK,CAACT,IAAI,KAAKA,IAAI,GAAG;MAAE,GAAGS,KAAK;MAAEC,QAAQ,EAAEJ;IAAQ,CAAC,GAAGG,KAC1D,CAAC,CAAC;EACJ,CAAC;EAED,oBACEtB,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,EAAI;IAAoC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC5CpB,MAAM,CAACa,GAAG,CAACC,KAAK,iBACftB,OAAA;MAAAwB,QAAA,eACExB,OAAA;QAAAwB,QAAA,gBACExB,OAAA;UACE6B,IAAI,EAAC,UAAU;UACfhB,IAAI,EAAES,KAAK,CAACT,IAAK;UACjBM,OAAO,EAAEG,KAAK,CAACC,QAAQ,IAAI,KAAM;UACjCO,QAAQ,EAAEb;QAAqB;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC,EACDN,KAAK,CAACT,IAAI,EAAC,IAAE,EAACS,KAAK,CAACR,OAAO,EAAC,GAC/B;MAAA;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC,GATAN,KAAK,CAACT,IAAI;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUf,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACvB,EAAA,CA5CQF,aAAa;AAAA4B,EAAA,GAAb5B,aAAa;AA8CtB,eAAeA,aAAa;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}