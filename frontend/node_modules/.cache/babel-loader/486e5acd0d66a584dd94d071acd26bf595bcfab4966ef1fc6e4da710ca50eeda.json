{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseWallet = void 0;\nvar index_js_1 = require(\"../address/index.js\");\nvar index_js_2 = require(\"../hash/index.js\");\nvar index_js_3 = require(\"../providers/index.js\");\nvar index_js_4 = require(\"../transaction/index.js\");\nvar index_js_5 = require(\"../utils/index.js\");\n/**\n *  The **BaseWallet** is a stream-lined implementation of a\n *  [[Signer]] that operates with a private key.\n *\n *  It is preferred to use the [[Wallet]] class, as it offers\n *  additional functionality and simplifies loading a variety\n *  of JSON formats, Mnemonic Phrases, etc.\n *\n *  This class may be of use for those attempting to implement\n *  a minimal Signer.\n */\nvar _signingKey = /*#__PURE__*/new WeakMap();\nvar BaseWallet = /*#__PURE__*/function (_index_js_3$AbstractS) {\n  _inherits(BaseWallet, _index_js_3$AbstractS);\n  var _super = _createSuper(BaseWallet);\n  /**\n   *  Creates a new BaseWallet for %%privateKey%%, optionally\n   *  connected to %%provider%%.\n   *\n   *  If %%provider%% is not specified, only offline methods can\n   *  be used.\n   */\n  function BaseWallet(privateKey, provider) {\n    var _this;\n    _classCallCheck(this, BaseWallet);\n    _this = _super.call(this, provider);\n    /**\n     *  The wallet address.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"address\", void 0);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _signingKey, {\n      writable: true,\n      value: void 0\n    });\n    (0, index_js_5.assertArgument)(privateKey && typeof privateKey.sign === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\n    _classPrivateFieldSet(_assertThisInitialized(_this), _signingKey, privateKey);\n    var address = (0, index_js_4.computeAddress)(_this.signingKey.publicKey);\n    (0, index_js_5.defineProperties)(_assertThisInitialized(_this), {\n      address: address\n    });\n    return _this;\n  }\n  // Store private values behind getters to reduce visibility\n  // in console.log\n  /**\n   *  The [[SigningKey]] used for signing payloads.\n   */\n  _createClass(BaseWallet, [{\n    key: \"signingKey\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _signingKey);\n    }\n    /**\n     *  The private key for this wallet.\n     */\n  }, {\n    key: \"privateKey\",\n    get: function get() {\n      return this.signingKey.privateKey;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function () {\n      var _getAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this.address);\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getAddress() {\n        return _getAddress.apply(this, arguments);\n      }\n      return getAddress;\n    }()\n  }, {\n    key: \"connect\",\n    value: function connect(provider) {\n      return new BaseWallet(_classPrivateFieldGet(this, _signingKey), provider);\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tx) {\n        var _yield, to, from, btx;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return (0, index_js_5.resolveProperties)({\n                to: tx.to ? (0, index_js_1.resolveAddress)(tx.to, this.provider) : undefined,\n                from: tx.from ? (0, index_js_1.resolveAddress)(tx.from, this.provider) : undefined\n              });\n            case 2:\n              _yield = _context2.sent;\n              to = _yield.to;\n              from = _yield.from;\n              if (to != null) {\n                tx.to = to;\n              }\n              if (from != null) {\n                tx.from = from;\n              }\n              if (tx.from != null) {\n                (0, index_js_5.assertArgument)((0, index_js_1.getAddress)(tx.from) === this.address, \"transaction from address mismatch\", \"tx.from\", tx.from);\n                delete tx.from;\n              }\n              // Build the transaction\n              btx = index_js_4.Transaction.from(tx);\n              btx.signature = this.signingKey.sign(btx.unsignedHash);\n              return _context2.abrupt(\"return\", btx.serialized);\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function signTransaction(_x) {\n        return _signTransaction.apply(this, arguments);\n      }\n      return signTransaction;\n    }()\n  }, {\n    key: \"signMessage\",\n    value: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(message) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", this.signMessageSync(message));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function signMessage(_x2) {\n        return _signMessage.apply(this, arguments);\n      }\n      return signMessage;\n    }() // @TODO: Add a secialized signTx and signTyped sync that enforces\n    // all parameters are known?\n    /**\n     *  Returns the signature for %%message%% signed with this wallet.\n     */\n  }, {\n    key: \"signMessageSync\",\n    value: function signMessageSync(message) {\n      return this.signingKey.sign((0, index_js_2.hashMessage)(message)).serialized;\n    }\n  }, {\n    key: \"signTypedData\",\n    value: function () {\n      var _signTypedData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(domain, types, value) {\n        var _this2 = this;\n        var populated;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return index_js_2.TypedDataEncoder.resolveNames(domain, types, value, /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(name) {\n                  var address;\n                  return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                    while (1) switch (_context4.prev = _context4.next) {\n                      case 0:\n                        // @TODO: this should use resolveName; addresses don't\n                        //        need a provider\n                        (0, index_js_5.assert)(_this2.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\n                          operation: \"resolveName\",\n                          info: {\n                            name: name\n                          }\n                        });\n                        _context4.next = 3;\n                        return _this2.provider.resolveName(name);\n                      case 3:\n                        address = _context4.sent;\n                        (0, index_js_5.assert)(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\n                          value: name\n                        });\n                        return _context4.abrupt(\"return\", address);\n                      case 6:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }, _callee4);\n                }));\n                return function (_x6) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n            case 2:\n              populated = _context5.sent;\n              return _context5.abrupt(\"return\", this.signingKey.sign(index_js_2.TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized);\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function signTypedData(_x3, _x4, _x5) {\n        return _signTypedData.apply(this, arguments);\n      }\n      return signTypedData;\n    }()\n  }]);\n  return BaseWallet;\n}(index_js_3.AbstractSigner);\nexports.BaseWallet = BaseWallet;","map":{"version":3,"names":["index_js_1","require","index_js_2","index_js_3","index_js_4","index_js_5","_signingKey","WeakMap","BaseWallet","_index_js_3$AbstractS","_inherits","_super","_createSuper","privateKey","provider","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","_classPrivateFieldInitSpec","writable","value","assertArgument","sign","_classPrivateFieldSet","address","computeAddress","signingKey","publicKey","defineProperties","_createClass","key","get","_classPrivateFieldGet","_getAddress","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","stop","getAddress","apply","arguments","connect","_signTransaction","_callee2","tx","_yield","to","from","btx","_callee2$","_context2","resolveProperties","resolveAddress","undefined","sent","Transaction","signature","unsignedHash","serialized","signTransaction","_x","_signMessage","_callee3","message","_callee3$","_context3","signMessageSync","signMessage","_x2","hashMessage","_signTypedData","_callee5","domain","types","_this2","populated","_callee5$","_context5","TypedDataEncoder","resolveNames","_ref","_callee4","name","_callee4$","_context4","assert","operation","info","resolveName","_x6","hash","signTypedData","_x3","_x4","_x5","AbstractSigner","exports"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/wallet/base-wallet.ts"],"sourcesContent":["import { getAddress, resolveAddress } from \"../address/index.js\";\nimport { hashMessage, TypedDataEncoder } from \"../hash/index.js\";\nimport { AbstractSigner } from \"../providers/index.js\";\nimport { computeAddress, Transaction } from \"../transaction/index.js\";\nimport {\n    defineProperties, resolveProperties, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport type { SigningKey } from \"../crypto/index.js\";\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\nimport type { Provider, TransactionRequest } from \"../providers/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\n\n/**\n *  The **BaseWallet** is a stream-lined implementation of a\n *  [[Signer]] that operates with a private key.\n *\n *  It is preferred to use the [[Wallet]] class, as it offers\n *  additional functionality and simplifies loading a variety\n *  of JSON formats, Mnemonic Phrases, etc.\n *\n *  This class may be of use for those attempting to implement\n *  a minimal Signer.\n */\nexport class BaseWallet extends AbstractSigner {\n    /**\n     *  The wallet address.\n     */\n    readonly address!: string;\n\n    readonly #signingKey: SigningKey;\n\n    /**\n     *  Creates a new BaseWallet for %%privateKey%%, optionally\n     *  connected to %%provider%%.\n     *\n     *  If %%provider%% is not specified, only offline methods can\n     *  be used.\n     */\n    constructor(privateKey: SigningKey, provider?: null | Provider) {\n        super(provider);\n\n        assertArgument(privateKey && typeof(privateKey.sign) === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\n\n        this.#signingKey = privateKey;\n\n        const address = computeAddress(this.signingKey.publicKey);\n        defineProperties<BaseWallet>(this, { address });\n    }\n\n    // Store private values behind getters to reduce visibility\n    // in console.log\n\n    /**\n     *  The [[SigningKey]] used for signing payloads.\n     */\n    get signingKey(): SigningKey { return this.#signingKey; }\n\n    /**\n     *  The private key for this wallet.\n     */\n    get privateKey(): string { return this.signingKey.privateKey; }\n\n    async getAddress(): Promise<string> { return this.address; }\n\n    connect(provider: null | Provider): BaseWallet {\n        return new BaseWallet(this.#signingKey, provider);\n    }\n\n    async signTransaction(tx: TransactionRequest): Promise<string> {\n\n        // Replace any Addressable or ENS name with an address\n        const { to, from } = await resolveProperties({\n            to: (tx.to ? resolveAddress(tx.to, this.provider): undefined),\n            from: (tx.from ? resolveAddress(tx.from, this.provider): undefined)\n        });\n\n        if (to != null) { tx.to = to; }\n        if (from != null) { tx.from = from; }\n\n        if (tx.from != null) {\n            assertArgument(getAddress(<string>(tx.from)) === this.address,\n                \"transaction from address mismatch\", \"tx.from\", tx.from);\n            delete tx.from;\n        }\n\n        // Build the transaction\n        const btx = Transaction.from(<TransactionLike<string>>tx);\n        btx.signature = this.signingKey.sign(btx.unsignedHash);\n\n        return btx.serialized;\n    }\n\n    async signMessage(message: string | Uint8Array): Promise<string> {\n        return this.signMessageSync(message);\n    }\n\n    // @TODO: Add a secialized signTx and signTyped sync that enforces\n    // all parameters are known?\n    /**\n     *  Returns the signature for %%message%% signed with this wallet.\n     */\n    signMessageSync(message: string | Uint8Array): string {\n        return this.signingKey.sign(hashMessage(message)).serialized;\n    }\n\n    async signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n\n        // Populate any ENS names\n        const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (name: string) => {\n            // @TODO: this should use resolveName; addresses don't\n            //        need a provider\n\n            assert(this.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"resolveName\",\n                info: { name }\n            });\n\n            const address = await this.provider.resolveName(name);\n            assert(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\n                value: name\n            });\n\n            return address;\n        });\n\n        return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}