{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatTransactionResponse = exports.formatTransactionReceipt = exports.formatReceiptLog = exports.formatBlock = exports.formatLog = exports.formatUint256 = exports.formatHash = exports.formatData = exports.formatBoolean = exports.object = exports.arrayOf = exports.allowNull = void 0;\n/**\n *  @_ignore\n */\nvar index_js_1 = require(\"../address/index.js\");\nvar index_js_2 = require(\"../crypto/index.js\");\nvar index_js_3 = require(\"../transaction/index.js\");\nvar index_js_4 = require(\"../utils/index.js\");\nvar BN_0 = BigInt(0);\nfunction allowNull(format, nullValue) {\n  return function (value) {\n    if (value == null) {\n      return nullValue;\n    }\n    return format(value);\n  };\n}\nexports.allowNull = allowNull;\nfunction arrayOf(format) {\n  return function (array) {\n    if (!Array.isArray(array)) {\n      throw new Error(\"not an array\");\n    }\n    return array.map(function (i) {\n      return format(i);\n    });\n  };\n}\nexports.arrayOf = arrayOf;\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nfunction object(format, altNames) {\n  return function (value) {\n    var result = {};\n    for (var key in format) {\n      var srcKey = key;\n      if (altNames && key in altNames && !(srcKey in value)) {\n        var _iterator = _createForOfIteratorHelper(altNames[key]),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var altKey = _step.value;\n            if (altKey in value) {\n              srcKey = altKey;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      try {\n        var nv = format[key](value[srcKey]);\n        if (nv !== undefined) {\n          result[key] = nv;\n        }\n      } catch (error) {\n        var message = error instanceof Error ? error.message : \"not-an-error\";\n        (0, index_js_4.assert)(false, \"invalid value for value.\".concat(key, \" (\").concat(message, \")\"), \"BAD_DATA\", {\n          value: value\n        });\n      }\n    }\n    return result;\n  };\n}\nexports.object = object;\nfunction formatBoolean(value) {\n  switch (value) {\n    case true:\n    case \"true\":\n      return true;\n    case false:\n    case \"false\":\n      return false;\n  }\n  (0, index_js_4.assertArgument)(false, \"invalid boolean; \".concat(JSON.stringify(value)), \"value\", value);\n}\nexports.formatBoolean = formatBoolean;\nfunction formatData(value) {\n  (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, true), \"invalid data\", \"value\", value);\n  return value;\n}\nexports.formatData = formatData;\nfunction formatHash(value) {\n  (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, 32), \"invalid hash\", \"value\", value);\n  return value;\n}\nexports.formatHash = formatHash;\nfunction formatUint256(value) {\n  if (!(0, index_js_4.isHexString)(value)) {\n    throw new Error(\"invalid uint256\");\n  }\n  return (0, index_js_4.zeroPadValue)(value, 32);\n}\nexports.formatUint256 = formatUint256;\nvar _formatLog = object({\n  address: index_js_1.getAddress,\n  blockHash: formatHash,\n  blockNumber: index_js_4.getNumber,\n  data: formatData,\n  index: index_js_4.getNumber,\n  removed: allowNull(formatBoolean, false),\n  topics: arrayOf(formatHash),\n  transactionHash: formatHash,\n  transactionIndex: index_js_4.getNumber\n}, {\n  index: [\"logIndex\"]\n});\nfunction formatLog(value) {\n  return _formatLog(value);\n}\nexports.formatLog = formatLog;\nvar _formatBlock = object({\n  hash: allowNull(formatHash),\n  parentHash: formatHash,\n  number: index_js_4.getNumber,\n  timestamp: index_js_4.getNumber,\n  nonce: allowNull(formatData),\n  difficulty: index_js_4.getBigInt,\n  gasLimit: index_js_4.getBigInt,\n  gasUsed: index_js_4.getBigInt,\n  miner: allowNull(index_js_1.getAddress),\n  extraData: formatData,\n  baseFeePerGas: allowNull(index_js_4.getBigInt)\n});\nfunction formatBlock(value) {\n  var result = _formatBlock(value);\n  result.transactions = value.transactions.map(function (tx) {\n    if (typeof tx === \"string\") {\n      return tx;\n    }\n    return formatTransactionResponse(tx);\n  });\n  return result;\n}\nexports.formatBlock = formatBlock;\nvar _formatReceiptLog = object({\n  transactionIndex: index_js_4.getNumber,\n  blockNumber: index_js_4.getNumber,\n  transactionHash: formatHash,\n  address: index_js_1.getAddress,\n  topics: arrayOf(formatHash),\n  data: formatData,\n  index: index_js_4.getNumber,\n  blockHash: formatHash\n}, {\n  index: [\"logIndex\"]\n});\nfunction formatReceiptLog(value) {\n  return _formatReceiptLog(value);\n}\nexports.formatReceiptLog = formatReceiptLog;\nvar _formatTransactionReceipt = object({\n  to: allowNull(index_js_1.getAddress, null),\n  from: allowNull(index_js_1.getAddress, null),\n  contractAddress: allowNull(index_js_1.getAddress, null),\n  // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n  index: index_js_4.getNumber,\n  root: allowNull(index_js_4.hexlify),\n  gasUsed: index_js_4.getBigInt,\n  logsBloom: allowNull(formatData),\n  blockHash: formatHash,\n  hash: formatHash,\n  logs: arrayOf(formatReceiptLog),\n  blockNumber: index_js_4.getNumber,\n  //confirmations: allowNull(getNumber, null),\n  cumulativeGasUsed: index_js_4.getBigInt,\n  effectiveGasPrice: allowNull(index_js_4.getBigInt),\n  status: allowNull(index_js_4.getNumber),\n  type: allowNull(index_js_4.getNumber, 0)\n}, {\n  effectiveGasPrice: [\"gasPrice\"],\n  hash: [\"transactionHash\"],\n  index: [\"transactionIndex\"]\n});\nfunction formatTransactionReceipt(value) {\n  return _formatTransactionReceipt(value);\n}\nexports.formatTransactionReceipt = formatTransactionReceipt;\nfunction formatTransactionResponse(value) {\n  // Some clients (TestRPC) do strange things like return 0x0 for the\n  // 0 address; correct this to be a real address\n  if (value.to && (0, index_js_4.getBigInt)(value.to) === BN_0) {\n    value.to = \"0x0000000000000000000000000000000000000000\";\n  }\n  var result = object({\n    hash: formatHash,\n    type: function type(value) {\n      if (value === \"0x\" || value == null) {\n        return 0;\n      }\n      return (0, index_js_4.getNumber)(value);\n    },\n    accessList: allowNull(index_js_3.accessListify, null),\n    blockHash: allowNull(formatHash, null),\n    blockNumber: allowNull(index_js_4.getNumber, null),\n    transactionIndex: allowNull(index_js_4.getNumber, null),\n    //confirmations: allowNull(getNumber, null),\n    from: index_js_1.getAddress,\n    // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n    gasPrice: allowNull(index_js_4.getBigInt),\n    maxPriorityFeePerGas: allowNull(index_js_4.getBigInt),\n    maxFeePerGas: allowNull(index_js_4.getBigInt),\n    gasLimit: index_js_4.getBigInt,\n    to: allowNull(index_js_1.getAddress, null),\n    value: index_js_4.getBigInt,\n    nonce: index_js_4.getNumber,\n    data: formatData,\n    creates: allowNull(index_js_1.getAddress, null),\n    chainId: allowNull(index_js_4.getBigInt, null)\n  }, {\n    data: [\"input\"],\n    gasLimit: [\"gas\"]\n  })(value);\n  // If to and creates are empty, populate the creates from the value\n  if (result.to == null && result.creates == null) {\n    result.creates = (0, index_js_1.getCreateAddress)(result);\n  }\n  // @TODO: Check fee data\n  // Add an access list to supported transaction types\n  if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n    result.accessList = [];\n  }\n  // Compute the signature\n  if (value.signature) {\n    result.signature = index_js_2.Signature.from(value.signature);\n  } else {\n    result.signature = index_js_2.Signature.from(value);\n  }\n  // Some backends omit ChainId on legacy transactions, but we can compute it\n  if (result.chainId == null) {\n    var chainId = result.signature.legacyChainId;\n    if (chainId != null) {\n      result.chainId = chainId;\n    }\n  }\n  // @TODO: check chainID\n  /*\n  if (value.chainId != null) {\n      let chainId = value.chainId;\n       if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n      }\n       result.chainId = chainId;\n   } else {\n      let chainId = value.networkId;\n       // geth-etc returns chainId\n      if (chainId == null && result.v == null) {\n          chainId = value.chainId;\n      }\n       if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n      }\n       if (typeof(chainId) !== \"number\" && result.v != null) {\n          chainId = (result.v - 35) / 2;\n          if (chainId < 0) { chainId = 0; }\n          chainId = parseInt(chainId);\n      }\n       if (typeof(chainId) !== \"number\") { chainId = 0; }\n       result.chainId = chainId;\n  }\n  */\n  // 0x0000... should actually be null\n  if (result.blockHash && (0, index_js_4.getBigInt)(result.blockHash) === BN_0) {\n    result.blockHash = null;\n  }\n  return result;\n}\nexports.formatTransactionResponse = formatTransactionResponse;","map":{"version":3,"names":["index_js_1","require","index_js_2","index_js_3","index_js_4","BN_0","BigInt","allowNull","format","nullValue","value","exports","arrayOf","array","Array","isArray","Error","map","i","object","altNames","result","key","srcKey","_iterator","_createForOfIteratorHelper","_step","s","n","done","altKey","err","e","f","nv","undefined","error","message","assert","concat","formatBoolean","assertArgument","JSON","stringify","formatData","isHexString","formatHash","formatUint256","zeroPadValue","_formatLog","address","getAddress","blockHash","blockNumber","getNumber","data","index","removed","topics","transactionHash","transactionIndex","formatLog","_formatBlock","hash","parentHash","number","timestamp","nonce","difficulty","getBigInt","gasLimit","gasUsed","miner","extraData","baseFeePerGas","formatBlock","transactions","tx","formatTransactionResponse","_formatReceiptLog","formatReceiptLog","_formatTransactionReceipt","to","from","contractAddress","root","hexlify","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","type","formatTransactionReceipt","accessList","accessListify","gasPrice","maxPriorityFeePerGas","maxFeePerGas","creates","chainId","getCreateAddress","signature","Signature","legacyChainId"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/providers/format.ts"],"sourcesContent":["/**\n *  @_ignore\n */\nimport { getAddress, getCreateAddress } from \"../address/index.js\";\nimport { Signature } from \"../crypto/index.js\"\nimport { accessListify } from \"../transaction/index.js\";\nimport {\n    getBigInt, getNumber, hexlify, isHexString, zeroPadValue,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport type {\n    BlockParams, LogParams,\n    TransactionReceiptParams, TransactionResponseParams,\n} from \"./formatting.js\";\n\n\nconst BN_0 = BigInt(0);\n\nexport type FormatFunc = (value: any) => any;\n\nexport function allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n    return (function(value: any) {\n        if (value == null) { return nullValue; }\n        return format(value);\n    });\n}\n\nexport function arrayOf(format: FormatFunc): FormatFunc {\n    return ((array: any) => {\n        if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n        return array.map((i) => format(i));\n    });\n}\n\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nexport function object(format: Record<string, FormatFunc>, altNames?: Record<string, Array<string>>): FormatFunc {\n    return ((value: any) => {\n        const result: any = { };\n        for (const key in format) {\n            let srcKey = key;\n            if (altNames && key in altNames && !(srcKey in value)) {\n                for (const altKey of altNames[key]) {\n                    if (altKey in value) {\n                        srcKey = altKey;\n                        break;\n                    }\n                }\n            }\n\n            try {\n                const nv = format[key](value[srcKey]);\n                if (nv !== undefined) { result[key] = nv; }\n            } catch (error) {\n                const message = (error instanceof Error) ? error.message: \"not-an-error\";\n                assert(false, `invalid value for value.${ key } (${ message })`, \"BAD_DATA\", { value })\n            }\n        }\n        return result;\n    });\n}\n\nexport function formatBoolean(value: any): boolean {\n    switch (value) {\n        case true: case \"true\":\n            return true;\n        case false: case \"false\":\n            return false;\n    }\n    assertArgument(false, `invalid boolean; ${ JSON.stringify(value) }`, \"value\", value);\n}\n\nexport function formatData(value: string): string {\n    assertArgument(isHexString(value, true), \"invalid data\", \"value\", value);\n    return value;\n}\n\nexport function formatHash(value: any): string {\n    assertArgument(isHexString(value, 32), \"invalid hash\", \"value\", value);\n    return value;\n}\n\nexport function formatUint256(value: any): string {\n    if (!isHexString(value)) {\n        throw new Error(\"invalid uint256\");\n    }\n    return zeroPadValue(value, 32);\n}\n\nconst _formatLog = object({\n    address: getAddress,\n    blockHash: formatHash,\n    blockNumber: getNumber,\n    data: formatData,\n    index: getNumber,\n    removed: allowNull(formatBoolean, false),\n    topics: arrayOf(formatHash),\n    transactionHash: formatHash,\n    transactionIndex: getNumber,\n}, {\n    index: [ \"logIndex\" ]\n});\n\nexport function formatLog(value: any): LogParams {\n    return _formatLog(value);\n}\n\nconst _formatBlock = object({\n    hash: allowNull(formatHash),\n    parentHash: formatHash,\n    number: getNumber,\n\n    timestamp: getNumber,\n    nonce: allowNull(formatData),\n    difficulty: getBigInt,\n\n    gasLimit: getBigInt,\n    gasUsed: getBigInt,\n\n    miner: allowNull(getAddress),\n    extraData: formatData,\n\n    baseFeePerGas: allowNull(getBigInt)\n});\n\nexport function formatBlock(value: any): BlockParams {\n    const result = _formatBlock(value);\n    result.transactions = value.transactions.map((tx: string | TransactionResponseParams) => {\n        if (typeof(tx) === \"string\") { return tx; }\n        return formatTransactionResponse(tx);\n    });\n    return result;\n}\n\nconst _formatReceiptLog = object({\n    transactionIndex: getNumber,\n    blockNumber: getNumber,\n    transactionHash: formatHash,\n    address: getAddress,\n    topics: arrayOf(formatHash),\n    data: formatData,\n    index: getNumber,\n    blockHash: formatHash,\n}, {\n    index: [ \"logIndex\" ]\n});\n\nexport function formatReceiptLog(value: any): LogParams {\n    return _formatReceiptLog(value);\n}\n\nconst _formatTransactionReceipt = object({\n    to: allowNull(getAddress, null),\n    from: allowNull(getAddress, null),\n    contractAddress: allowNull(getAddress, null),\n    // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n    index: getNumber,\n    root: allowNull(hexlify),\n    gasUsed: getBigInt,\n    logsBloom: allowNull(formatData),\n    blockHash: formatHash,\n    hash: formatHash,\n    logs: arrayOf(formatReceiptLog),\n    blockNumber: getNumber,\n    //confirmations: allowNull(getNumber, null),\n    cumulativeGasUsed: getBigInt,\n    effectiveGasPrice: allowNull(getBigInt),\n    status: allowNull(getNumber),\n    type: allowNull(getNumber, 0)\n}, {\n    effectiveGasPrice: [ \"gasPrice\" ],\n    hash: [ \"transactionHash\" ],\n    index: [ \"transactionIndex\" ],\n});\n\nexport function formatTransactionReceipt(value: any): TransactionReceiptParams {\n    return _formatTransactionReceipt(value);\n}\n\nexport function formatTransactionResponse(value: any): TransactionResponseParams {\n\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (value.to && getBigInt(value.to) === BN_0) {\n        value.to = \"0x0000000000000000000000000000000000000000\";\n    }\n\n    const result = object({\n        hash: formatHash,\n\n        type: (value: any) => {\n            if (value === \"0x\" || value == null) { return 0; }\n            return getNumber(value);\n        },\n        accessList: allowNull(accessListify, null),\n\n        blockHash: allowNull(formatHash, null),\n        blockNumber: allowNull(getNumber, null),\n        transactionIndex: allowNull(getNumber, null),\n\n        //confirmations: allowNull(getNumber, null),\n\n        from: getAddress,\n\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n        gasPrice: allowNull(getBigInt),\n        maxPriorityFeePerGas: allowNull(getBigInt),\n        maxFeePerGas: allowNull(getBigInt),\n\n        gasLimit: getBigInt,\n        to: allowNull(getAddress, null),\n        value: getBigInt,\n        nonce: getNumber,\n        data: formatData,\n\n        creates: allowNull(getAddress, null),\n\n        chainId: allowNull(getBigInt, null)\n    }, {\n        data: [ \"input\" ],\n        gasLimit: [ \"gas\" ]\n    })(value);\n\n    // If to and creates are empty, populate the creates from the value\n    if (result.to == null && result.creates == null) {\n        result.creates = getCreateAddress(result);\n    }\n\n    // @TODO: Check fee data\n\n    // Add an access list to supported transaction types\n    if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n        result.accessList = [ ];\n    }\n\n    // Compute the signature\n    if (value.signature) {\n        result.signature = Signature.from(value.signature);\n    } else {\n        result.signature = Signature.from(value);\n    }\n\n    // Some backends omit ChainId on legacy transactions, but we can compute it\n    if (result.chainId == null) {\n        const chainId = result.signature.legacyChainId;\n        if (chainId != null) { result.chainId = chainId; }\n    }\n\n\n    // @TODO: check chainID\n    /*\n    if (value.chainId != null) {\n        let chainId = value.chainId;\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        result.chainId = chainId;\n\n    } else {\n        let chainId = value.networkId;\n\n        // geth-etc returns chainId\n        if (chainId == null && result.v == null) {\n            chainId = value.chainId;\n        }\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        if (typeof(chainId) !== \"number\" && result.v != null) {\n            chainId = (result.v - 35) / 2;\n            if (chainId < 0) { chainId = 0; }\n            chainId = parseInt(chainId);\n        }\n\n        if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n        result.chainId = chainId;\n    }\n    */\n\n    // 0x0000... should actually be null\n    if (result.blockHash && getBigInt(result.blockHash) === BN_0) {\n        result.blockHash = null;\n    }\n\n    return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}