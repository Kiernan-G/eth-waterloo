{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _get = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlchemyProvider = void 0;\n/**\n *  About Alchemy\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nvar index_js_1 = require(\"../utils/index.js\");\nvar community_js_1 = require(\"./community.js\");\nvar network_js_1 = require(\"./network.js\");\nvar provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nvar defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.alchemyapi.io\";\n    case \"goerli\":\n      return \"eth-goerli.g.alchemy.com\";\n    case \"sepolia\":\n      return \"eth-sepolia.g.alchemy.com\";\n    case \"arbitrum\":\n      return \"arb-mainnet.g.alchemy.com\";\n    case \"arbitrum-goerli\":\n      return \"arb-goerli.g.alchemy.com\";\n    case \"matic\":\n      return \"polygon-mainnet.g.alchemy.com\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai.g.alchemy.com\";\n    case \"optimism\":\n      return \"opt-mainnet.g.alchemy.com\";\n    case \"optimism-goerli\":\n      return \"opt-goerli.g.alchemy.com\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nvar AlchemyProvider = /*#__PURE__*/function (_provider_jsonrpc_js_) {\n  _inherits(AlchemyProvider, _provider_jsonrpc_js_);\n  var _super = _createSuper(AlchemyProvider);\n  function AlchemyProvider(_network, apiKey) {\n    var _this;\n    _classCallCheck(this, AlchemyProvider);\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    var network = network_js_1.Network.from(_network);\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    var request = AlchemyProvider.getRequest(network, apiKey);\n    _this = _super.call(this, request, network, {\n      staticNetwork: network\n    });\n    _defineProperty(_assertThisInitialized(_this), \"apiKey\", void 0);\n    (0, index_js_1.defineProperties)(_assertThisInitialized(_this), {\n      apiKey: apiKey\n    });\n    return _this;\n  }\n  _createClass(AlchemyProvider, [{\n    key: \"_getProvider\",\n    value: function _getProvider(chainId) {\n      try {\n        return new AlchemyProvider(chainId, this.apiKey);\n      } catch (error) {}\n      return _get(_getPrototypeOf(AlchemyProvider.prototype), \"_getProvider\", this).call(this, chainId);\n    }\n  }, {\n    key: \"_perform\",\n    value: function () {\n      var _perform2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req) {\n        var _yield, trace, tx, data, error;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(req.method === \"getTransactionResult\")) {\n                _context.next = 14;\n                break;\n              }\n              _context.next = 3;\n              return (0, index_js_1.resolveProperties)({\n                trace: this.send(\"trace_transaction\", [req.hash]),\n                tx: this.getTransaction(req.hash)\n              });\n            case 3:\n              _yield = _context.sent;\n              trace = _yield.trace;\n              tx = _yield.tx;\n              if (!(trace == null || tx == null)) {\n                _context.next = 8;\n                break;\n              }\n              return _context.abrupt(\"return\", null);\n            case 8:\n              error = false;\n              try {\n                data = trace[0].result.output;\n                error = trace[0].error === \"Reverted\";\n              } catch (error) {}\n              if (!data) {\n                _context.next = 13;\n                break;\n              }\n              (0, index_js_1.assert)(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n                action: \"getTransactionResult\",\n                data: data,\n                reason: null,\n                transaction: tx,\n                invocation: null,\n                revert: null // @TODO\n              });\n              return _context.abrupt(\"return\", data);\n            case 13:\n              (0, index_js_1.assert)(false, \"could not parse trace result\", \"BAD_DATA\", {\n                value: trace\n              });\n            case 14:\n              _context.next = 16;\n              return _get(_getPrototypeOf(AlchemyProvider.prototype), \"_perform\", this).call(this, req);\n            case 16:\n              return _context.abrupt(\"return\", _context.sent);\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _perform(_x) {\n        return _perform2.apply(this, arguments);\n      }\n      return _perform;\n    }()\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }], [{\n    key: \"getRequest\",\n    value: function getRequest(network, apiKey) {\n      if (apiKey == null) {\n        apiKey = defaultApiKey;\n      }\n      var request = new index_js_1.FetchRequest(\"https://\".concat(getHost(network.name), \"/v2/\").concat(apiKey));\n      request.allowGzip = true;\n      if (apiKey === defaultApiKey) {\n        request.retryFunc = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request, response, attempt) {\n            return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n              while (1) switch (_context2.prev = _context2.next) {\n                case 0:\n                  (0, community_js_1.showThrottleMessage)(\"alchemy\");\n                  return _context2.abrupt(\"return\", true);\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }, _callee2);\n          }));\n          return function (_x2, _x3, _x4) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n      }\n      return request;\n    }\n  }]);\n  return AlchemyProvider;\n}(provider_jsonrpc_js_1.JsonRpcProvider);\nexports.AlchemyProvider = AlchemyProvider;","map":{"version":3,"names":["index_js_1","require","community_js_1","network_js_1","provider_jsonrpc_js_1","defaultApiKey","getHost","name","assertArgument","AlchemyProvider","_provider_jsonrpc_js_","_inherits","_super","_createSuper","_network","apiKey","_this","_classCallCheck","network","Network","from","request","getRequest","call","staticNetwork","_defineProperty","_assertThisInitialized","defineProperties","_createClass","key","value","_getProvider","chainId","error","_get","_getPrototypeOf","prototype","_perform2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","req","_yield","trace","tx","data","wrap","_callee$","_context","prev","next","method","resolveProperties","send","hash","getTransaction","sent","abrupt","result","output","assert","action","reason","transaction","invocation","revert","stop","_perform","_x","apply","arguments","isCommunityResource","FetchRequest","concat","allowGzip","retryFunc","_ref","_callee2","response","attempt","_callee2$","_context2","showThrottleMessage","_x2","_x3","_x4","JsonRpcProvider","exports"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/providers/provider-alchemy.ts"],"sourcesContent":["/**\n *  About Alchemy\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nimport {\n    defineProperties, resolveProperties, assert, assertArgument,\n    FetchRequest\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { AbstractProvider, PerformActionRequest } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"eth-mainnet.alchemyapi.io\";\n        case \"goerli\":\n            return \"eth-goerli.g.alchemy.com\";\n        case \"sepolia\":\n            return \"eth-sepolia.g.alchemy.com\";\n\n        case \"arbitrum\":\n            return \"arb-mainnet.g.alchemy.com\";\n        case \"arbitrum-goerli\":\n            return \"arb-goerli.g.alchemy.com\";\n        case \"matic\":\n            return \"polygon-mainnet.g.alchemy.com\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.g.alchemy.com\";\n        case \"optimism\":\n            return \"opt-mainnet.g.alchemy.com\";\n        case \"optimism-goerli\":\n            return \"opt-goerli.g.alchemy.com\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nexport class AlchemyProvider extends JsonRpcProvider implements CommunityResourcable {\n    readonly apiKey!: string;\n\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = AlchemyProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<AlchemyProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new AlchemyProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    async _perform(req: PerformActionRequest): Promise<any> {\n\n        // https://docs.alchemy.com/reference/trace-transaction\n        if (req.method === \"getTransactionResult\") {\n            const { trace, tx } = await resolveProperties({\n                trace: this.send(\"trace_transaction\", [ req.hash ]),\n                tx: this.getTransaction(req.hash)\n            });\n            if (trace == null || tx == null) { return null; }\n\n            let data: undefined | string;\n            let error = false;\n            try {\n                data = trace[0].result.output;\n                error = (trace[0].error === \"Reverted\");\n            } catch (error) { }\n\n            if (data) {\n                assert(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n                    action: \"getTransactionResult\",\n                    data,\n                    reason: null,\n                    transaction: tx,\n                    invocation: null,\n                    revert: null // @TODO\n                });\n                return data;\n            }\n\n            assert(false, \"could not parse trace result\", \"BAD_DATA\", { value: trace });\n        }\n\n        return await super._perform(req);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n\n    static getRequest(network: Network, apiKey?: string): FetchRequest {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v2/${ apiKey }`);\n        request.allowGzip = true;\n\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"alchemy\");\n                return true;\n            }\n        }\n\n        return request;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;AAKA,IAAAA,UAAA,GAAAC,OAAA;AAKA,IAAAC,cAAA,GAAAD,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,qBAAA,GAAAH,OAAA;AAOA,IAAMI,aAAa,GAAG,kCAAkC;AAExD,SAASC,OAAOA,CAACC,IAAY;EACzB,QAAOA,IAAI;IACP,KAAK,SAAS;MACV,OAAO,2BAA2B;IACtC,KAAK,QAAQ;MACT,OAAO,0BAA0B;IACrC,KAAK,SAAS;MACV,OAAO,2BAA2B;IAEtC,KAAK,UAAU;MACX,OAAO,2BAA2B;IACtC,KAAK,iBAAiB;MAClB,OAAO,0BAA0B;IACrC,KAAK,OAAO;MACR,OAAO,+BAA+B;IAC1C,KAAK,cAAc;MACf,OAAO,8BAA8B;IACzC,KAAK,UAAU;MACX,OAAO,2BAA2B;IACtC,KAAK,iBAAiB;MAClB,OAAO,0BAA0B;;EAGzC,IAAAP,UAAA,CAAAQ,cAAc,EAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAED,IAAI,CAAC;AACjE;AAEA;;;;;;;;;;;AAAA,IAWaE,eAAgB,0BAAAC,qBAAA;EAAAC,SAAA,CAAAF,eAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,eAAA;EAGzB,SAAAA,gBAAYK,QAAqB,EAAEC,MAAsB;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAR,eAAA;IACrD,IAAIK,QAAQ,IAAI,IAAI,EAAE;MAAEA,QAAQ,GAAG,SAAS;;IAC5C,IAAMI,OAAO,GAAGf,YAAA,CAAAgB,OAAO,CAACC,IAAI,CAACN,QAAQ,CAAC;IACtC,IAAIC,MAAM,IAAI,IAAI,EAAE;MAAEA,MAAM,GAAGV,aAAa;;IAE5C,IAAMgB,OAAO,GAAGZ,eAAe,CAACa,UAAU,CAACJ,OAAO,EAAEH,MAAM,CAAC;IAC3DC,KAAA,GAAAJ,MAAA,CAAAW,IAAA,OAAMF,OAAO,EAAEH,OAAO,EAAE;MAAEM,aAAa,EAAEN;IAAO,CAAE;IAAEO,eAAA,CAAAC,sBAAA,CAAAV,KAAA;IAEpD,IAAAhB,UAAA,CAAA2B,gBAAgB,EAAAD,sBAAA,CAAAV,KAAA,GAAwB;MAAED,MAAM,EAANA;IAAM,CAAE,CAAC;IAAC,OAAAC,KAAA;EACxD;EAACY,YAAA,CAAAnB,eAAA;IAAAoB,GAAA;IAAAC,KAAA,EAED,SAAAC,aAAaC,OAAe;MACxB,IAAI;QACA,OAAO,IAAIvB,eAAe,CAACuB,OAAO,EAAE,IAAI,CAACjB,MAAM,CAAC;OACnD,CAAC,OAAOkB,KAAK,EAAE;MAChB,OAAAC,IAAA,CAAAC,eAAA,CAAA1B,eAAA,CAAA2B,SAAA,yBAAAb,IAAA,OAA0BS,OAAO;IACrC;EAAC;IAAAH,GAAA;IAAAC,KAAA;MAAA,IAAAO,SAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QAAeC,GAAyB;QAAA,IAAAC,MAAA,EAAAC,KAAA,EAAAC,EAAA,EAAAC,IAAA,EAAAb,KAAA;QAAA,OAAAM,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAA,MAGhCT,GAAG,CAACU,MAAM,KAAK,sBAAsB;gBAAAH,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OACT,IAAAnD,UAAA,CAAAqD,iBAAiB,EAAC;gBAC1CT,KAAK,EAAE,IAAI,CAACU,IAAI,CAAC,mBAAmB,EAAE,CAAEZ,GAAG,CAACa,IAAI,CAAE,CAAC;gBACnDV,EAAE,EAAE,IAAI,CAACW,cAAc,CAACd,GAAG,CAACa,IAAI;eACnC,CAAC;YAAA;cAAAZ,MAAA,GAAAM,QAAA,CAAAQ,IAAA;cAHMb,KAAK,GAAAD,MAAA,CAALC,KAAK;cAAEC,EAAE,GAAAF,MAAA,CAAFE,EAAE;cAAA,MAIbD,KAAK,IAAI,IAAI,IAAIC,EAAE,IAAI,IAAI;gBAAAI,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAS,MAAA,WAAW,IAAI;YAAA;cAG1CzB,KAAK,GAAG,KAAK;cACjB,IAAI;gBACAa,IAAI,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACe,MAAM,CAACC,MAAM;gBAC7B3B,KAAK,GAAIW,KAAK,CAAC,CAAC,CAAC,CAACX,KAAK,KAAK,UAAW;eAC1C,CAAC,OAAOA,KAAK,EAAE;cAAG,KAEfa,IAAI;gBAAAG,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACJ,IAAAnD,UAAA,CAAA6D,MAAM,EAAC,CAAC5B,KAAK,EAAE,iDAAiD,EAAE,gBAAgB,EAAE;gBAChF6B,MAAM,EAAE,sBAAsB;gBAC9BhB,IAAI,EAAJA,IAAI;gBACJiB,MAAM,EAAE,IAAI;gBACZC,WAAW,EAAEnB,EAAE;gBACfoB,UAAU,EAAE,IAAI;gBAChBC,MAAM,EAAE,IAAI,CAAC;eAChB,CAAC;cAAC,OAAAjB,QAAA,CAAAS,MAAA,WACIZ,IAAI;YAAA;cAGf,IAAA9C,UAAA,CAAA6D,MAAM,EAAC,KAAK,EAAE,8BAA8B,EAAE,UAAU,EAAE;gBAAE/B,KAAK,EAAEc;cAAK,CAAE,CAAC;YAAC;cAAAK,QAAA,CAAAE,IAAA;cAAA,OAAAjB,IAAA,CAAAC,eAAA,CAAA1B,eAAA,CAAA2B,SAAA,qBAAAb,IAAA,OAGpDmB,GAAG;YAAA;cAAA,OAAAO,QAAA,CAAAS,MAAA,WAAAT,QAAA,CAAAQ,IAAA;YAAA;YAAA;cAAA,OAAAR,QAAA,CAAAkB,IAAA;UAAA;QAAA,GAAA1B,OAAA;MAAA,CAClC;MAAA,SAAA2B,SAAAC,EAAA;QAAA,OAAAhC,SAAA,CAAAiC,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAH,QAAA;IAAA;EAAA;IAAAvC,GAAA;IAAAC,KAAA,EAED,SAAA0C,oBAAA,EAAmB;MACf,OAAQ,IAAI,CAACzD,MAAM,KAAKV,aAAa;IACzC;EAAC;IAAAwB,GAAA;IAAAC,KAAA,EAED,SAAAR,WAAkBJ,OAAgB,EAAEH,MAAe;MAC/C,IAAIA,MAAM,IAAI,IAAI,EAAE;QAAEA,MAAM,GAAGV,aAAa;;MAE5C,IAAMgB,OAAO,GAAG,IAAIrB,UAAA,CAAAyE,YAAY,YAAAC,MAAA,CAAcpE,OAAO,CAACY,OAAO,CAACX,IAAI,CAAE,UAAAmE,MAAA,CAAQ3D,MAAO,CAAE,CAAC;MACtFM,OAAO,CAACsD,SAAS,GAAG,IAAI;MAExB,IAAI5D,MAAM,KAAKV,aAAa,EAAE;QAC1BgB,OAAO,CAACuD,SAAS;UAAA,IAAAC,IAAA,GAAAvC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAsC,SAAOzD,OAAO,EAAE0D,QAAQ,EAAEC,OAAO;YAAA,OAAAzC,mBAAA,GAAAQ,IAAA,UAAAkC,UAAAC,SAAA;cAAA,kBAAAA,SAAA,CAAAhC,IAAA,GAAAgC,SAAA,CAAA/B,IAAA;gBAAA;kBACjD,IAAAjD,cAAA,CAAAiF,mBAAmB,EAAC,SAAS,CAAC;kBAAC,OAAAD,SAAA,CAAAxB,MAAA,WACxB,IAAI;gBAAA;gBAAA;kBAAA,OAAAwB,SAAA,CAAAf,IAAA;cAAA;YAAA,GAAAW,QAAA;UAAA,CACd;UAAA,iBAAAM,GAAA,EAAAC,GAAA,EAAAC,GAAA;YAAA,OAAAT,IAAA,CAAAP,KAAA,OAAAC,SAAA;UAAA;QAAA;;MAGL,OAAOlD,OAAO;IAClB;EAAC;EAAA,OAAAZ,eAAA;AAAA,EA1EgCL,qBAAA,CAAAmF,eAAe;AAApDC,OAAA,CAAA/E,eAAA,GAAAA,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}