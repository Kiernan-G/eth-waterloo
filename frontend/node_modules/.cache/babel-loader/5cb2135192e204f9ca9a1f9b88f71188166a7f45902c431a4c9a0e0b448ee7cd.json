{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _get = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnkrProvider = void 0;\n/**\n *  [[link-ankr]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\n */\nvar index_js_1 = require(\"../utils/index.js\");\nvar community_js_1 = require(\"./community.js\");\nvar network_js_1 = require(\"./network.js\");\nvar provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nvar defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"rpc.ankr.com/eth\";\n    case \"goerli\":\n      return \"rpc.ankr.com/eth_goerli\";\n    case \"matic\":\n      return \"rpc.ankr.com/polygon\";\n    case \"arbitrum\":\n      return \"rpc.ankr.com/arbitrum\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AnkrProvider** connects to the [[link-ankr]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-ankr-signup).\n */\nvar AnkrProvider = /*#__PURE__*/function (_provider_jsonrpc_js_) {\n  _inherits(AnkrProvider, _provider_jsonrpc_js_);\n  var _super = _createSuper(AnkrProvider);\n  /**\n   *  Create a new **AnkrProvider**.\n   *\n   *  By default connecting to ``mainnet`` with a highly throttled\n   *  API key.\n   */\n  function AnkrProvider(_network, apiKey) {\n    var _this;\n    _classCallCheck(this, AnkrProvider);\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    var network = network_js_1.Network.from(_network);\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    // Ankr does not support filterId, so we force polling\n    var options = {\n      polling: true,\n      staticNetwork: network\n    };\n    var request = AnkrProvider.getRequest(network, apiKey);\n    _this = _super.call(this, request, network, options);\n    /**\n     *  The API key for the Ankr connection.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"apiKey\", void 0);\n    (0, index_js_1.defineProperties)(_assertThisInitialized(_this), {\n      apiKey: apiKey\n    });\n    return _this;\n  }\n  _createClass(AnkrProvider, [{\n    key: \"_getProvider\",\n    value: function _getProvider(chainId) {\n      try {\n        return new AnkrProvider(chainId, this.apiKey);\n      } catch (error) {}\n      return _get(_getPrototypeOf(AnkrProvider.prototype), \"_getProvider\", this).call(this, chainId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%apiKey%%.\n     */\n  }, {\n    key: \"getRpcError\",\n    value: function getRpcError(payload, error) {\n      if (payload.method === \"eth_sendRawTransaction\") {\n        if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n          error.error.message = \"replacement transaction underpriced\";\n        }\n      }\n      return _get(_getPrototypeOf(AnkrProvider.prototype), \"getRpcError\", this).call(this, payload, error);\n    }\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }], [{\n    key: \"getRequest\",\n    value: function getRequest(network, apiKey) {\n      if (apiKey == null) {\n        apiKey = defaultApiKey;\n      }\n      var request = new index_js_1.FetchRequest(\"https://\".concat(getHost(network.name), \"/\").concat(apiKey));\n      request.allowGzip = true;\n      if (apiKey === defaultApiKey) {\n        request.retryFunc = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request, response, attempt) {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  (0, community_js_1.showThrottleMessage)(\"AnkrProvider\");\n                  return _context.abrupt(\"return\", true);\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function (_x, _x2, _x3) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n      }\n      return request;\n    }\n  }]);\n  return AnkrProvider;\n}(provider_jsonrpc_js_1.JsonRpcProvider);\nexports.AnkrProvider = AnkrProvider;","map":{"version":3,"names":["index_js_1","require","community_js_1","network_js_1","provider_jsonrpc_js_1","defaultApiKey","getHost","name","assertArgument","AnkrProvider","_provider_jsonrpc_js_","_inherits","_super","_createSuper","_network","apiKey","_this","_classCallCheck","network","Network","from","options","polling","staticNetwork","request","getRequest","call","_defineProperty","_assertThisInitialized","defineProperties","_createClass","key","value","_getProvider","chainId","error","_get","_getPrototypeOf","prototype","getRpcError","payload","method","message","isCommunityResource","FetchRequest","concat","allowGzip","retryFunc","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","attempt","wrap","_callee$","_context","prev","next","showThrottleMessage","abrupt","stop","_x","_x2","_x3","apply","arguments","JsonRpcProvider","exports"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/providers/provider-ankr.ts"],"sourcesContent":["/**\n *  [[link-ankr]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\n */\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\nimport type { JsonRpcError, JsonRpcPayload } from \"./provider-jsonrpc.js\";\n\n\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"mainnet\":\n            return \"rpc.ankr.com/eth\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli\";\n        case \"matic\":\n            return \"rpc.ankr.com/polygon\";\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n\n/**\n *  The **AnkrProvider** connects to the [[link-ankr]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-ankr-signup).\n */\nexport class AnkrProvider extends JsonRpcProvider implements CommunityResourcable {\n\n    /**\n     *  The API key for the Ankr connection.\n     */\n    readonly apiKey!: string;\n\n    /**\n     *  Create a new **AnkrProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        // Ankr does not support filterId, so we force polling\n        const options = { polling: true, staticNetwork: network };\n\n        const request = AnkrProvider.getRequest(network, apiKey);\n        super(request, network, options);\n\n        defineProperties<AnkrProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new AnkrProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%apiKey%%.\n     */\n    static getRequest(network: Network, apiKey?: null | string): FetchRequest {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/${ apiKey }`);\n        request.allowGzip = true;\n\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"AnkrProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n\n    getRpcError(payload: JsonRpcPayload, error: JsonRpcError): Error {\n        if (payload.method === \"eth_sendRawTransaction\") {\n            if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n                error.error.message = \"replacement transaction underpriced\";\n            }\n        }\n\n        return super.getRpcError(payload, error);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}