{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _assertThisInitialized = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classPrivateMethodInitSpec = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateMethodGet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateMethodGet.js\").default;\nvar _regeneratorRuntime = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _asyncToGenerator = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VoidSigner = exports.AbstractSigner = void 0;\n/**\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\n *  are sufficent for most developers, but this is provided to\n *  fascilitate more complex Signers.\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */\nvar index_js_1 = require(\"../address/index.js\");\nvar index_js_2 = require(\"../transaction/index.js\");\nvar index_js_3 = require(\"../utils/index.js\");\nvar provider_js_1 = require(\"./provider.js\");\nfunction checkProvider(signer, operation) {\n  if (signer.provider) {\n    return signer.provider;\n  }\n  (0, index_js_3.assert)(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", {\n    operation: operation\n  });\n}\nfunction populate(_x, _x2) {\n  return _populate.apply(this, arguments);\n}\n/**\n *  An **AbstractSigner** includes most of teh functionality required\n *  to get a [[Signer]] working as expected, but requires a few\n *  Signer-specific methods be overridden.\n *\n */\nfunction _populate() {\n  _populate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(signer, tx) {\n    var pop, from;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          pop = (0, provider_js_1.copyRequest)(tx);\n          if (pop.to != null) {\n            pop.to = (0, index_js_1.resolveAddress)(pop.to, signer);\n          }\n          if (pop.from != null) {\n            from = pop.from;\n            pop.from = Promise.all([signer.getAddress(), (0, index_js_1.resolveAddress)(from, signer)]).then(function (_ref) {\n              var _ref2 = _slicedToArray(_ref, 2),\n                address = _ref2[0],\n                from = _ref2[1];\n              (0, index_js_3.assertArgument)(address.toLowerCase() === from.toLowerCase(), \"transaction from mismatch\", \"tx.from\", from);\n              return address;\n            });\n          } else {\n            pop.from = signer.getAddress();\n          }\n          _context12.next = 5;\n          return (0, index_js_3.resolveProperties)(pop);\n        case 5:\n          return _context12.abrupt(\"return\", _context12.sent);\n        case 6:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12);\n  }));\n  return _populate.apply(this, arguments);\n}\nvar AbstractSigner = /*#__PURE__*/function () {\n  /**\n   *  Creates a new Signer connected to %%provider%%.\n   */\n  function AbstractSigner(provider) {\n    _classCallCheck(this, AbstractSigner);\n    /**\n     *  The provider this signer is connected to.\n     */\n    _defineProperty(this, \"provider\", void 0);\n    (0, index_js_3.defineProperties)(this, {\n      provider: provider || null\n    });\n  }\n  _createClass(AbstractSigner, [{\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(blockTag) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = checkProvider(this, \"getTransactionCount\");\n              _context.next = 3;\n              return this.getAddress();\n            case 3:\n              _context.t1 = _context.sent;\n              _context.t2 = blockTag;\n              return _context.abrupt(\"return\", _context.t0.getTransactionCount.call(_context.t0, _context.t1, _context.t2));\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getNonce(_x3) {\n        return _getNonce.apply(this, arguments);\n      }\n      return getNonce;\n    }()\n  }, {\n    key: \"populateCall\",\n    value: function () {\n      var _populateCall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tx) {\n        var pop;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return populate(this, tx);\n            case 2:\n              pop = _context2.sent;\n              return _context2.abrupt(\"return\", pop);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function populateCall(_x4) {\n        return _populateCall.apply(this, arguments);\n      }\n      return populateCall;\n    }()\n  }, {\n    key: \"populateTransaction\",\n    value: function () {\n      var _populateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tx) {\n        var provider, pop, network, chainId, hasEip1559, feeData, _feeData, gasPrice;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              provider = checkProvider(this, \"populateTransaction\");\n              _context3.next = 3;\n              return populate(this, tx);\n            case 3:\n              pop = _context3.sent;\n              if (!(pop.nonce == null)) {\n                _context3.next = 8;\n                break;\n              }\n              _context3.next = 7;\n              return this.getNonce(\"pending\");\n            case 7:\n              pop.nonce = _context3.sent;\n            case 8:\n              if (!(pop.gasLimit == null)) {\n                _context3.next = 12;\n                break;\n              }\n              _context3.next = 11;\n              return this.estimateGas(pop);\n            case 11:\n              pop.gasLimit = _context3.sent;\n            case 12:\n              _context3.next = 14;\n              return this.provider.getNetwork();\n            case 14:\n              network = _context3.sent;\n              if (pop.chainId != null) {\n                chainId = (0, index_js_3.getBigInt)(pop.chainId);\n                (0, index_js_3.assertArgument)(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n              } else {\n                pop.chainId = network.chainId;\n              }\n              // Do not allow mixing pre-eip-1559 and eip-1559 properties\n              hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;\n              if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n                (0, index_js_3.assertArgument)(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n              } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n                (0, index_js_3.assertArgument)(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n              }\n              if (!((pop.type === 2 || pop.type == null) && pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {\n                _context3.next = 22;\n                break;\n              }\n              // Fully-formed EIP-1559 transaction (skip getFeeData)\n              pop.type = 2;\n              _context3.next = 34;\n              break;\n            case 22:\n              if (!(pop.type === 0 || pop.type === 1)) {\n                _context3.next = 30;\n                break;\n              }\n              _context3.next = 25;\n              return provider.getFeeData();\n            case 25:\n              feeData = _context3.sent;\n              (0, index_js_3.assert)(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getGasPrice\"\n              });\n              // Populate missing gasPrice\n              if (pop.gasPrice == null) {\n                pop.gasPrice = feeData.gasPrice;\n              }\n              _context3.next = 34;\n              break;\n            case 30:\n              _context3.next = 32;\n              return provider.getFeeData();\n            case 32:\n              _feeData = _context3.sent;\n              if (pop.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n                if (_feeData.maxFeePerGas != null && _feeData.maxPriorityFeePerGas != null) {\n                  // The network supports EIP-1559!\n                  // Upgrade transaction from null to eip-1559\n                  pop.type = 2;\n                  if (pop.gasPrice != null) {\n                    // Using legacy gasPrice property on an eip-1559 network,\n                    // so use gasPrice as both fee properties\n                    gasPrice = pop.gasPrice;\n                    delete pop.gasPrice;\n                    pop.maxFeePerGas = gasPrice;\n                    pop.maxPriorityFeePerGas = gasPrice;\n                  } else {\n                    // Populate missing fee data\n                    if (pop.maxFeePerGas == null) {\n                      pop.maxFeePerGas = _feeData.maxFeePerGas;\n                    }\n                    if (pop.maxPriorityFeePerGas == null) {\n                      pop.maxPriorityFeePerGas = _feeData.maxPriorityFeePerGas;\n                    }\n                  }\n                } else if (_feeData.gasPrice != null) {\n                  // Network doesn't support EIP-1559...\n                  // ...but they are trying to use EIP-1559 properties\n                  (0, index_js_3.assert)(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"populateTransaction\"\n                  });\n                  // Populate missing fee data\n                  if (pop.gasPrice == null) {\n                    pop.gasPrice = _feeData.gasPrice;\n                  }\n                  // Explicitly set untyped transaction to legacy\n                  // @TODO: Maybe this shold allow type 1?\n                  pop.type = 0;\n                } else {\n                  // getFeeData has failed us.\n                  (0, index_js_3.assert)(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"signer.getFeeData\"\n                  });\n                }\n              } else if (pop.type === 2) {\n                // Explicitly using EIP-1559\n                // Populate missing fee data\n                if (pop.maxFeePerGas == null) {\n                  pop.maxFeePerGas = _feeData.maxFeePerGas;\n                }\n                if (pop.maxPriorityFeePerGas == null) {\n                  pop.maxPriorityFeePerGas = _feeData.maxPriorityFeePerGas;\n                }\n              }\n            case 34:\n              _context3.next = 36;\n              return (0, index_js_3.resolveProperties)(pop);\n            case 36:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 37:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function populateTransaction(_x5) {\n        return _populateTransaction.apply(this, arguments);\n      }\n      return populateTransaction;\n    }()\n  }, {\n    key: \"estimateGas\",\n    value: function () {\n      var _estimateGas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(tx) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.t0 = checkProvider(this, \"estimateGas\");\n              _context4.next = 3;\n              return this.populateCall(tx);\n            case 3:\n              _context4.t1 = _context4.sent;\n              return _context4.abrupt(\"return\", _context4.t0.estimateGas.call(_context4.t0, _context4.t1));\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function estimateGas(_x6) {\n        return _estimateGas.apply(this, arguments);\n      }\n      return estimateGas;\n    }()\n  }, {\n    key: \"call\",\n    value: function () {\n      var _call = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(tx) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.t0 = checkProvider(this, \"call\");\n              _context5.next = 3;\n              return this.populateCall(tx);\n            case 3:\n              _context5.t1 = _context5.sent;\n              return _context5.abrupt(\"return\", _context5.t0.call.call(_context5.t0, _context5.t1));\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function call(_x7) {\n        return _call.apply(this, arguments);\n      }\n      return call;\n    }()\n  }, {\n    key: \"resolveName\",\n    value: function () {\n      var _resolveName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(name) {\n        var provider;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              provider = checkProvider(this, \"resolveName\");\n              _context6.next = 3;\n              return provider.resolveName(name);\n            case 3:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function resolveName(_x8) {\n        return _resolveName.apply(this, arguments);\n      }\n      return resolveName;\n    }()\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(tx) {\n        var provider, pop, txObj;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              provider = checkProvider(this, \"sendTransaction\");\n              _context7.next = 3;\n              return this.populateTransaction(tx);\n            case 3:\n              pop = _context7.sent;\n              delete pop.from;\n              txObj = index_js_2.Transaction.from(pop);\n              _context7.t0 = provider;\n              _context7.next = 9;\n              return this.signTransaction(txObj);\n            case 9:\n              _context7.t1 = _context7.sent;\n              _context7.next = 12;\n              return _context7.t0.broadcastTransaction.call(_context7.t0, _context7.t1);\n            case 12:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 13:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function sendTransaction(_x9) {\n        return _sendTransaction.apply(this, arguments);\n      }\n      return sendTransaction;\n    }()\n  }]);\n  return AbstractSigner;\n}();\nexports.AbstractSigner = AbstractSigner;\n/**\n *  A **VoidSigner** is a class deisgned to allow an address to be used\n *  in any API which accepts a Signer, but for which there are no\n *  credentials available to perform any actual signing.\n *\n *  This for example allow impersonating an account for the purpose of\n *  static calls or estimating gas, but does not allow sending transactions.\n */\nvar _throwUnsupported = /*#__PURE__*/new WeakSet();\nvar VoidSigner = /*#__PURE__*/function (_AbstractSigner) {\n  _inherits(VoidSigner, _AbstractSigner);\n  var _super = _createSuper(VoidSigner);\n  /**\n   *  Creates a new **VoidSigner** with %%address%% attached to\n   *  %%provider%%.\n   */\n  function VoidSigner(address, provider) {\n    var _this;\n    _classCallCheck(this, VoidSigner);\n    _this = _super.call(this, provider);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _throwUnsupported);\n    /**\n     *  The signer address.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"address\", void 0);\n    (0, index_js_3.defineProperties)(_assertThisInitialized(_this), {\n      address: address\n    });\n    return _this;\n  }\n  _createClass(VoidSigner, [{\n    key: \"getAddress\",\n    value: function () {\n      var _getAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", this.address);\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function getAddress() {\n        return _getAddress.apply(this, arguments);\n      }\n      return getAddress;\n    }()\n  }, {\n    key: \"connect\",\n    value: function connect(provider) {\n      return new VoidSigner(this.address, provider);\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(tx) {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _classPrivateMethodGet(this, _throwUnsupported, _throwUnsupported2).call(this, \"transactions\", \"signTransaction\");\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function signTransaction(_x10) {\n        return _signTransaction.apply(this, arguments);\n      }\n      return signTransaction;\n    }()\n  }, {\n    key: \"signMessage\",\n    value: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(message) {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _classPrivateMethodGet(this, _throwUnsupported, _throwUnsupported2).call(this, \"messages\", \"signMessage\");\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function signMessage(_x11) {\n        return _signMessage.apply(this, arguments);\n      }\n      return signMessage;\n    }()\n  }, {\n    key: \"signTypedData\",\n    value: function () {\n      var _signTypedData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(domain, types, value) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _classPrivateMethodGet(this, _throwUnsupported, _throwUnsupported2).call(this, \"typed-data\", \"signTypedData\");\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function signTypedData(_x12, _x13, _x14) {\n        return _signTypedData.apply(this, arguments);\n      }\n      return signTypedData;\n    }()\n  }]);\n  return VoidSigner;\n}(AbstractSigner);\nfunction _throwUnsupported2(suffix, operation) {\n  (0, index_js_3.assert)(false, \"VoidSigner cannot sign \".concat(suffix), \"UNSUPPORTED_OPERATION\", {\n    operation: operation\n  });\n}\nexports.VoidSigner = VoidSigner;","map":{"version":3,"names":["index_js_1","require","index_js_2","index_js_3","provider_js_1","checkProvider","signer","operation","provider","assert","populate","_x","_x2","_populate","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee12","tx","pop","from","wrap","_callee12$","_context12","prev","next","copyRequest","to","resolveAddress","Promise","all","getAddress","then","_ref","_ref2","_slicedToArray","address","assertArgument","toLowerCase","resolveProperties","abrupt","sent","stop","AbstractSigner","_classCallCheck","_defineProperty","defineProperties","_createClass","key","value","_getNonce","_callee","blockTag","_callee$","_context","t0","t1","t2","getTransactionCount","call","getNonce","_x3","_populateCall","_callee2","_callee2$","_context2","populateCall","_x4","_populateTransaction","_callee3","network","chainId","hasEip1559","feeData","_feeData","gasPrice","_callee3$","_context3","nonce","gasLimit","estimateGas","getNetwork","getBigInt","maxFeePerGas","maxPriorityFeePerGas","type","getFeeData","populateTransaction","_x5","_estimateGas","_callee4","_callee4$","_context4","_x6","_call","_callee5","_callee5$","_context5","_x7","_resolveName","_callee6","name","_callee6$","_context6","resolveName","_x8","_sendTransaction","_callee7","txObj","_callee7$","_context7","Transaction","signTransaction","broadcastTransaction","sendTransaction","_x9","exports","_throwUnsupported","WeakSet","VoidSigner","_AbstractSigner","_inherits","_super","_createSuper","_this","_classPrivateMethodInitSpec","_assertThisInitialized","_getAddress","_callee8","_callee8$","_context8","connect","_signTransaction","_callee9","_callee9$","_context9","_classPrivateMethodGet","_throwUnsupported2","_x10","_signMessage","_callee10","message","_callee10$","_context10","signMessage","_x11","_signTypedData","_callee11","domain","types","_callee11$","_context11","signTypedData","_x12","_x13","_x14","suffix","concat"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/providers/abstract-signer.ts"],"sourcesContent":["/**\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\n *  are sufficent for most developers, but this is provided to\n *  fascilitate more complex Signers.\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */\nimport { resolveAddress } from \"../address/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport {\n    defineProperties, getBigInt, resolveProperties,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { copyRequest } from \"./provider.js\";\n\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type {\n    BlockTag, Provider, TransactionRequest, TransactionResponse\n} from \"./provider.js\";\nimport type { Signer } from \"./signer.js\";\n\n\nfunction checkProvider(signer: AbstractSigner, operation: string): Provider {\n    if (signer.provider) { return signer.provider; }\n    assert(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", { operation });\n}\n\nasync function populate(signer: AbstractSigner, tx: TransactionRequest): Promise<TransactionLike<string>> {\n    let pop: any = copyRequest(tx);\n\n    if (pop.to != null) { pop.to = resolveAddress(pop.to, signer); }\n\n    if (pop.from != null) {\n        const from = pop.from;\n        pop.from = Promise.all([\n            signer.getAddress(),\n            resolveAddress(from, signer)\n        ]).then(([ address, from ]) => {\n            assertArgument(address.toLowerCase() === from.toLowerCase(),\n                \"transaction from mismatch\", \"tx.from\", from);\n            return address;\n        });\n    } else {\n        pop.from = signer.getAddress();\n    }\n\n    return await resolveProperties(pop);\n}\n\n\n/**\n *  An **AbstractSigner** includes most of teh functionality required\n *  to get a [[Signer]] working as expected, but requires a few\n *  Signer-specific methods be overridden.\n *\n */\nexport abstract class AbstractSigner<P extends null | Provider = null | Provider> implements Signer {\n    /**\n     *  The provider this signer is connected to.\n     */\n    readonly provider!: P;\n\n    /**\n     *  Creates a new Signer connected to %%provider%%.\n     */\n    constructor(provider?: P) {\n        defineProperties<AbstractSigner>(this, { provider: (provider || null) });\n    }\n\n    /**\n     *  Resolves to the Signer address.\n     */\n    abstract getAddress(): Promise<string>;\n\n    /**\n     *  Returns the signer connected to %%provider%%.\n     *\n     *  This may throw, for example, a Signer connected over a Socket or\n     *  to a specific instance of a node may not be transferrable.\n     */\n    abstract connect(provider: null | Provider): Signer;\n\n    async getNonce(blockTag?: BlockTag): Promise<number> {\n        return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n    }\n\n    async populateCall(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        const pop = await populate(this, tx);\n        return pop;\n    }\n\n    async populateTransaction(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        const provider = checkProvider(this, \"populateTransaction\");\n\n        const pop = await populate(this, tx);\n\n        if (pop.nonce == null) {\n            pop.nonce = await this.getNonce(\"pending\");\n        }\n\n        if (pop.gasLimit == null) {\n            pop.gasLimit = await this.estimateGas(pop);\n        }\n\n        // Populate the chain ID\n        const network = await (<Provider>(this.provider)).getNetwork();\n        if (pop.chainId != null) {\n            const chainId = getBigInt(pop.chainId);\n            assertArgument(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n        } else {\n            pop.chainId = network.chainId;\n        }\n\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = (pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null);\n        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n            assertArgument(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n        } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n            assertArgument(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n        }\n\n        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            pop.type = 2;\n\n        } else if (pop.type === 0 || pop.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n\n            assert(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getGasPrice\" });\n\n            // Populate missing gasPrice\n            if (pop.gasPrice == null) { pop.gasPrice = feeData.gasPrice; }\n\n        } else {\n\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n\n            if (pop.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n\n                    // Upgrade transaction from null to eip-1559\n                    pop.type = 2;\n\n                    if (pop.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = pop.gasPrice;\n                        delete pop.gasPrice;\n                        pop.maxFeePerGas = gasPrice;\n                        pop.maxPriorityFeePerGas = gasPrice;\n\n                    } else {\n                        // Populate missing fee data\n\n                        if (pop.maxFeePerGas == null) {\n                            pop.maxFeePerGas = feeData.maxFeePerGas;\n                        }\n\n                        if (pop.maxPriorityFeePerGas == null) {\n                            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                        }\n                    }\n\n                } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n\n                    // ...but they are trying to use EIP-1559 properties\n                    assert(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"populateTransaction\" });\n\n                    // Populate missing fee data\n                    if (pop.gasPrice == null) {\n                        pop.gasPrice = feeData.gasPrice;\n                    }\n\n                    // Explicitly set untyped transaction to legacy\n                    // @TODO: Maybe this shold allow type 1?\n                    pop.type = 0;\n\n               } else {\n                    // getFeeData has failed us.\n                    assert(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"signer.getFeeData\" });\n                }\n\n            } else if (pop.type === 2) {\n                // Explicitly using EIP-1559\n\n                // Populate missing fee data\n                if (pop.maxFeePerGas == null) {\n                    pop.maxFeePerGas = feeData.maxFeePerGas;\n                }\n\n                if (pop.maxPriorityFeePerGas == null) {\n                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                }\n            }\n        }\n\n//@TOOD: Don't await all over the place; save them up for\n// the end for better batching\n        return await resolveProperties(pop);\n    }\n\n    async estimateGas(tx: TransactionRequest): Promise<bigint> {\n        return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n    }\n\n    async call(tx: TransactionRequest): Promise<string> {\n        return checkProvider(this, \"call\").call(await this.populateCall(tx));\n    }\n\n    async resolveName(name: string): Promise<null | string> {\n        const provider = checkProvider(this, \"resolveName\");\n        return await provider.resolveName(name);\n    }\n\n    async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {\n        const provider = checkProvider(this, \"sendTransaction\");\n\n        const pop = await this.populateTransaction(tx);\n        delete pop.from;\n        const txObj = Transaction.from(pop);\n        return await provider.broadcastTransaction(await this.signTransaction(txObj));\n    }\n\n    abstract signTransaction(tx: TransactionRequest): Promise<string>;\n    abstract signMessage(message: string | Uint8Array): Promise<string>;\n    abstract signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;\n}\n\n/**\n *  A **VoidSigner** is a class deisgned to allow an address to be used\n *  in any API which accepts a Signer, but for which there are no\n *  credentials available to perform any actual signing.\n *\n *  This for example allow impersonating an account for the purpose of\n *  static calls or estimating gas, but does not allow sending transactions.\n */\nexport class VoidSigner extends AbstractSigner {\n    /**\n     *  The signer address.\n     */\n    readonly address!: string;\n\n    /**\n     *  Creates a new **VoidSigner** with %%address%% attached to\n     *  %%provider%%.\n     */\n    constructor(address: string, provider?: null | Provider) {\n        super(provider);\n        defineProperties<VoidSigner>(this, { address });\n    }\n\n    async getAddress(): Promise<string> { return this.address; }\n\n    connect(provider: null | Provider): VoidSigner {\n        return new VoidSigner(this.address, provider);\n    }\n\n    #throwUnsupported(suffix: string, operation: string): never {\n        assert(false, `VoidSigner cannot sign ${ suffix }`, \"UNSUPPORTED_OPERATION\", { operation });\n    }\n\n    async signTransaction(tx: TransactionRequest): Promise<string> {\n        this.#throwUnsupported(\"transactions\", \"signTransaction\");\n    }\n\n    async signMessage(message: string | Uint8Array): Promise<string> {\n        this.#throwUnsupported(\"messages\", \"signMessage\");\n    }\n\n    async signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        this.#throwUnsupported(\"typed-data\", \"signTypedData\");\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}