{"ast":null,"code":"\"use strict\";\n\n/**\n *  The available providers should suffice for most developers purposes,\n *  but the [[AbstractProvider]] class has many features which enable\n *  sub-classing it for specific purposes.\n *\n *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]\n */\nvar _slicedToArray = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _classPrivateMethodInitSpec = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateMethodGet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateMethodGet.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nvar _asyncToGenerator = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractProvider = exports.UnmanagedSubscriber = void 0;\n// @TODO\n// Event coalescence\n//   When we register an event with an async value (e.g. address is a Signer\n//   or ENS name), we need to add it immeidately for the Event API, but also\n//   need time to resolve the address. Upon resolving the address, we need to\n//   migrate the listener to the static event. We also need to maintain a map\n//   of Signer/ENS name to address so we can sync respond to listenerCount.\nvar index_js_1 = require(\"../address/index.js\");\nvar index_js_2 = require(\"../constants/index.js\");\nvar index_js_3 = require(\"../contract/index.js\");\nvar index_js_4 = require(\"../hash/index.js\");\nvar index_js_5 = require(\"../transaction/index.js\");\nvar index_js_6 = require(\"../utils/index.js\");\nvar ens_resolver_js_1 = require(\"./ens-resolver.js\");\nvar format_js_1 = require(\"./format.js\");\nvar network_js_1 = require(\"./network.js\");\nvar provider_js_1 = require(\"./provider.js\");\nvar subscriber_polling_js_1 = require(\"./subscriber-polling.js\");\n// Constants\nvar BN_2 = BigInt(2);\nvar MAX_CCIP_REDIRECTS = 10;\nfunction isPromise(value) {\n  return value && typeof value.then === \"function\";\n}\nfunction getTag(prefix, value) {\n  return prefix + \":\" + JSON.stringify(value, function (k, v) {\n    if (v == null) {\n      return \"null\";\n    }\n    if (typeof v === \"bigint\") {\n      return \"bigint:\".concat(v.toString());\n    }\n    if (typeof v === \"string\") {\n      return v.toLowerCase();\n    }\n    // Sort object keys\n    if (typeof v === \"object\" && !Array.isArray(v)) {\n      var keys = Object.keys(v);\n      keys.sort();\n      return keys.reduce(function (accum, key) {\n        accum[key] = v[key];\n        return accum;\n      }, {});\n    }\n    return v;\n  });\n}\n/**\n *  An **UnmanagedSubscriber** is useful for events which do not require\n *  any additional management, such as ``\"debug\"`` which only requires\n *  emit in synchronous event loop triggered calls.\n */\nvar UnmanagedSubscriber = /*#__PURE__*/function () {\n  /**\n   *  Create a new UnmanagedSubscriber with %%name%%.\n   */\n  function UnmanagedSubscriber(name) {\n    _classCallCheck(this, UnmanagedSubscriber);\n    /**\n     *  The name fof the event.\n     */\n    _defineProperty(this, \"name\", void 0);\n    (0, index_js_6.defineProperties)(this, {\n      name: name\n    });\n  }\n  _createClass(UnmanagedSubscriber, [{\n    key: \"start\",\n    value: function start() {}\n  }, {\n    key: \"stop\",\n    value: function stop() {}\n  }, {\n    key: \"pause\",\n    value: function pause(dropWhilePaused) {}\n  }, {\n    key: \"resume\",\n    value: function resume() {}\n  }]);\n  return UnmanagedSubscriber;\n}();\nexports.UnmanagedSubscriber = UnmanagedSubscriber;\nfunction copy(value) {\n  return JSON.parse(JSON.stringify(value));\n}\nfunction concisify(items) {\n  items = Array.from(new Set(items).values());\n  items.sort();\n  return items;\n}\nfunction getSubscription(_x, _x2) {\n  return _getSubscription.apply(this, arguments);\n}\nfunction _getSubscription() {\n  _getSubscription = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee40(_event, provider) {\n    var hash, event, _event2, filter, addresses, promises, addAddress;\n    return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n      while (1) switch (_context40.prev = _context40.next) {\n        case 0:\n          if (!(_event == null)) {\n            _context40.next = 2;\n            break;\n          }\n          throw new Error(\"invalid event\");\n        case 2:\n          // Normalize topic array info an EventFilter\n          if (Array.isArray(_event)) {\n            _event = {\n              topics: _event\n            };\n          }\n          if (!(typeof _event === \"string\")) {\n            _context40.next = 8;\n            break;\n          }\n          _context40.t0 = _event;\n          _context40.next = _context40.t0 === \"block\" ? 7 : _context40.t0 === \"pending\" ? 7 : _context40.t0 === \"debug\" ? 7 : _context40.t0 === \"error\" ? 7 : _context40.t0 === \"network\" ? 7 : 8;\n          break;\n        case 7:\n          return _context40.abrupt(\"return\", {\n            type: _event,\n            tag: _event\n          });\n        case 8:\n          if (!(0, index_js_6.isHexString)(_event, 32)) {\n            _context40.next = 11;\n            break;\n          }\n          hash = _event.toLowerCase();\n          return _context40.abrupt(\"return\", {\n            type: \"transaction\",\n            tag: getTag(\"tx\", {\n              hash: hash\n            }),\n            hash: hash\n          });\n        case 11:\n          if (!_event.orphan) {\n            _context40.next = 14;\n            break;\n          }\n          event = _event; // @TODO: Should lowercase and whatnot things here instead of copy...\n          return _context40.abrupt(\"return\", {\n            type: \"orphan\",\n            tag: getTag(\"orphan\", event),\n            filter: copy(event)\n          });\n        case 14:\n          if (!(_event.address || _event.topics)) {\n            _context40.next = 27;\n            break;\n          }\n          _event2 = _event;\n          filter = {\n            topics: (_event2.topics || []).map(function (t) {\n              if (t == null) {\n                return null;\n              }\n              if (Array.isArray(t)) {\n                return concisify(t.map(function (t) {\n                  return t.toLowerCase();\n                }));\n              }\n              return t.toLowerCase();\n            })\n          };\n          if (!_event2.address) {\n            _context40.next = 26;\n            break;\n          }\n          addresses = [];\n          promises = [];\n          addAddress = function addAddress(addr) {\n            if ((0, index_js_6.isHexString)(addr)) {\n              addresses.push(addr);\n            } else {\n              promises.push(_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {\n                return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n                  while (1) switch (_context39.prev = _context39.next) {\n                    case 0:\n                      _context39.t0 = addresses;\n                      _context39.next = 3;\n                      return (0, index_js_1.resolveAddress)(addr, provider);\n                    case 3:\n                      _context39.t1 = _context39.sent;\n                      _context39.t0.push.call(_context39.t0, _context39.t1);\n                    case 5:\n                    case \"end\":\n                      return _context39.stop();\n                  }\n                }, _callee39);\n              }))());\n            }\n          };\n          if (Array.isArray(_event2.address)) {\n            _event2.address.forEach(addAddress);\n          } else {\n            addAddress(_event2.address);\n          }\n          if (!promises.length) {\n            _context40.next = 25;\n            break;\n          }\n          _context40.next = 25;\n          return Promise.all(promises);\n        case 25:\n          filter.address = concisify(addresses.map(function (a) {\n            return a.toLowerCase();\n          }));\n        case 26:\n          return _context40.abrupt(\"return\", {\n            filter: filter,\n            tag: getTag(\"event\", filter),\n            type: \"event\"\n          });\n        case 27:\n          (0, index_js_6.assertArgument)(false, \"unknown ProviderEvent\", \"event\", _event);\n        case 28:\n        case \"end\":\n          return _context40.stop();\n      }\n    }, _callee40);\n  }));\n  return _getSubscription.apply(this, arguments);\n}\nfunction getTime() {\n  return new Date().getTime();\n}\nvar defaultOptions = {\n  cacheTimeout: 250\n};\n/**\n *  An **AbstractProvider** provides a base class for other sub-classes to\n *  implement the [[Provider]] API by normalizing input arguments and\n *  formatting output results as well as tracking events for consistent\n *  behaviour on an eventually-consistent network.\n */\nvar _subs = /*#__PURE__*/new WeakMap();\nvar _plugins = /*#__PURE__*/new WeakMap();\nvar _pausedState = /*#__PURE__*/new WeakMap();\nvar _destroyed = /*#__PURE__*/new WeakMap();\nvar _networkPromise = /*#__PURE__*/new WeakMap();\nvar _anyNetwork = /*#__PURE__*/new WeakMap();\nvar _performCache = /*#__PURE__*/new WeakMap();\nvar _lastBlockNumber = /*#__PURE__*/new WeakMap();\nvar _nextTimer = /*#__PURE__*/new WeakMap();\nvar _timers = /*#__PURE__*/new WeakMap();\nvar _disableCcipRead = /*#__PURE__*/new WeakMap();\nvar _options = /*#__PURE__*/new WeakMap();\nvar _perform = /*#__PURE__*/new WeakSet();\nvar _call = /*#__PURE__*/new WeakSet();\nvar _checkNetwork = /*#__PURE__*/new WeakSet();\nvar _getAccountValue = /*#__PURE__*/new WeakSet();\nvar _getBlock = /*#__PURE__*/new WeakSet();\nvar _hasSub = /*#__PURE__*/new WeakSet();\nvar _getSub = /*#__PURE__*/new WeakSet();\nvar AbstractProvider = /*#__PURE__*/function () {\n  /**\n   *  Create a new **AbstractProvider** connected to %%network%%, or\n   *  use the various network detection capabilities to discover the\n   *  [[Network]] if necessary.\n   */\n  function AbstractProvider(_network, options) {\n    var _this = this;\n    _classCallCheck(this, AbstractProvider);\n    _classPrivateMethodInitSpec(this, _getSub);\n    _classPrivateMethodInitSpec(this, _hasSub);\n    _classPrivateMethodInitSpec(this, _getBlock);\n    // Account\n    _classPrivateMethodInitSpec(this, _getAccountValue);\n    _classPrivateMethodInitSpec(this, _checkNetwork);\n    _classPrivateMethodInitSpec(this, _call);\n    // Shares multiple identical requests made during the same 250ms\n    _classPrivateMethodInitSpec(this, _perform);\n    _classPrivateFieldInitSpec(this, _subs, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _plugins, {\n      writable: true,\n      value: void 0\n    });\n    // null=unpaused, true=paused+dropWhilePaused, false=paused\n    _classPrivateFieldInitSpec(this, _pausedState, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _destroyed, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _networkPromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _anyNetwork, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _performCache, {\n      writable: true,\n      value: void 0\n    });\n    // The most recent block number if running an event or -1 if no \"block\" event\n    _classPrivateFieldInitSpec(this, _lastBlockNumber, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _nextTimer, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _timers, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _disableCcipRead, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _options, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _options, Object.assign({}, defaultOptions, options || {}));\n    if (_network === \"any\") {\n      _classPrivateFieldSet(this, _anyNetwork, true);\n      _classPrivateFieldSet(this, _networkPromise, null);\n    } else if (_network) {\n      var network = network_js_1.Network.from(_network);\n      _classPrivateFieldSet(this, _anyNetwork, false);\n      _classPrivateFieldSet(this, _networkPromise, Promise.resolve(network));\n      setTimeout(function () {\n        _this.emit(\"network\", network, null);\n      }, 0);\n    } else {\n      _classPrivateFieldSet(this, _anyNetwork, false);\n      _classPrivateFieldSet(this, _networkPromise, null);\n    }\n    _classPrivateFieldSet(this, _lastBlockNumber, -1);\n    _classPrivateFieldSet(this, _performCache, new Map());\n    _classPrivateFieldSet(this, _subs, new Map());\n    _classPrivateFieldSet(this, _plugins, new Map());\n    _classPrivateFieldSet(this, _pausedState, null);\n    _classPrivateFieldSet(this, _destroyed, false);\n    _classPrivateFieldSet(this, _nextTimer, 1);\n    _classPrivateFieldSet(this, _timers, new Map());\n    _classPrivateFieldSet(this, _disableCcipRead, false);\n  }\n  /**\n   *  Returns ``this``, to allow an **AbstractProvider** to implement\n   *  the [[ContractRunner]] interface.\n   */\n  _createClass(AbstractProvider, [{\n    key: \"provider\",\n    get: function get() {\n      return this;\n    }\n    /**\n     *  Returns all the registered plug-ins.\n     */\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      return Array.from(_classPrivateFieldGet(this, _plugins).values());\n    }\n    /**\n     *  Attach a new plug-in.\n     */\n  }, {\n    key: \"attachPlugin\",\n    value: function attachPlugin(plugin) {\n      if (_classPrivateFieldGet(this, _plugins).get(plugin.name)) {\n        throw new Error(\"cannot replace existing plugin: \".concat(plugin.name, \" \"));\n      }\n      _classPrivateFieldGet(this, _plugins).set(plugin.name, plugin.connect(this));\n      return this;\n    }\n    /**\n     *  Get a plugin by name.\n     */\n  }, {\n    key: \"getPlugin\",\n    value: function getPlugin(name) {\n      return _classPrivateFieldGet(this, _plugins).get(name) || null;\n    }\n    /**\n     *  Prevent any CCIP-read operation, regardless of whether requested\n     *  in a [[call]] using ``enableCcipRead``.\n     */\n  }, {\n    key: \"disableCcipRead\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _disableCcipRead);\n    },\n    set: function set(value) {\n      _classPrivateFieldSet(this, _disableCcipRead, !!value);\n    }\n  }, {\n    key: \"ccipReadFetch\",\n    value:\n    /**\n     *  Resolves to the data for executing the CCIP-read operations.\n     */\n    function () {\n      var _ccipReadFetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tx, calldata, urls) {\n        var sender, data, errorMessages, i, url, href, request, errorMessage, resp, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this.disableCcipRead || urls.length === 0 || tx.to == null)) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", null);\n            case 2:\n              sender = tx.to.toLowerCase();\n              data = calldata.toLowerCase();\n              errorMessages = [];\n              i = 0;\n            case 6:\n              if (!(i < urls.length)) {\n                _context.next = 32;\n                break;\n              }\n              url = urls[i]; // URL expansion\n              href = url.replace(\"{sender}\", sender).replace(\"{data}\", data); // If no {data} is present, use POST; otherwise GET\n              //const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n              //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n              //    value.status = response.statusCode;\n              //    return value;\n              //});\n              request = new index_js_6.FetchRequest(href);\n              if (url.indexOf(\"{data}\") === -1) {\n                request.body = {\n                  data: data,\n                  sender: sender\n                };\n              }\n              this.emit(\"debug\", {\n                action: \"sendCcipReadFetchRequest\",\n                request: request,\n                index: i,\n                urls: urls\n              });\n              errorMessage = \"unknown error\";\n              _context.next = 15;\n              return request.send();\n            case 15:\n              resp = _context.sent;\n              _context.prev = 16;\n              result = resp.bodyJson;\n              if (!result.data) {\n                _context.next = 21;\n                break;\n              }\n              this.emit(\"debug\", {\n                action: \"receiveCcipReadFetchResult\",\n                request: request,\n                result: result\n              });\n              return _context.abrupt(\"return\", result.data);\n            case 21:\n              if (result.message) {\n                errorMessage = result.message;\n              }\n              this.emit(\"debug\", {\n                action: \"receiveCcipReadFetchError\",\n                request: request,\n                result: result\n              });\n              _context.next = 27;\n              break;\n            case 25:\n              _context.prev = 25;\n              _context.t0 = _context[\"catch\"](16);\n            case 27:\n              // 4xx indicates the result is not present; stop\n              (0, index_js_6.assert)(resp.statusCode < 400 || resp.statusCode >= 500, \"response not found during CCIP fetch: \".concat(errorMessage), \"OFFCHAIN_FAULT\", {\n                reason: \"404_MISSING_RESOURCE\",\n                transaction: tx,\n                info: {\n                  url: url,\n                  errorMessage: errorMessage\n                }\n              });\n              // 5xx indicates server issue; try the next url\n              errorMessages.push(errorMessage);\n            case 29:\n              i++;\n              _context.next = 6;\n              break;\n            case 32:\n              (0, index_js_6.assert)(false, \"error encountered during CCIP fetch: \".concat(errorMessages.map(function (m) {\n                return JSON.stringify(m);\n              }).join(\", \")), \"OFFCHAIN_FAULT\", {\n                reason: \"500_SERVER_ERROR\",\n                transaction: tx,\n                info: {\n                  urls: urls,\n                  errorMessages: errorMessages\n                }\n              });\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[16, 25]]);\n      }));\n      function ccipReadFetch(_x3, _x4, _x5) {\n        return _ccipReadFetch.apply(this, arguments);\n      }\n      return ccipReadFetch;\n    }()\n    /**\n     *  Provides the opportunity for a sub-class to wrap a block before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Block]].\n     */\n  }, {\n    key: \"_wrapBlock\",\n    value: function _wrapBlock(value, network) {\n      return new provider_js_1.Block((0, format_js_1.formatBlock)(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a log before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Log]].\n     */\n  }, {\n    key: \"_wrapLog\",\n    value: function _wrapLog(value, network) {\n      return new provider_js_1.Log((0, format_js_1.formatLog)(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  receipt before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionReceipt]].\n     */\n  }, {\n    key: \"_wrapTransactionReceipt\",\n    value: function _wrapTransactionReceipt(value, network) {\n      return new provider_js_1.TransactionReceipt((0, format_js_1.formatTransactionReceipt)(value), this);\n    }\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  response before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionResponse]].\n     */\n  }, {\n    key: \"_wrapTransactionResponse\",\n    value: function _wrapTransactionResponse(tx, network) {\n      return new provider_js_1.TransactionResponse((0, format_js_1.formatTransactionResponse)(tx), this);\n    }\n    /**\n     *  Resolves to the Network, forcing a network detection using whatever\n     *  technique the sub-class requires.\n     *\n     *  Sub-classes **must** override this.\n     */\n  }, {\n    key: \"_detectNetwork\",\n    value: function _detectNetwork() {\n      (0, index_js_6.assert)(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"_detectNetwork\"\n      });\n    }\n    /**\n     *  Sub-classes should use this to perform all built-in operations. All\n     *  methods sanitizes and normalizes the values passed into this.\n     *\n     *  Sub-classes **must** override this.\n     */\n  }, {\n    key: \"_perform\",\n    value: function () {\n      var _perform3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              (0, index_js_6.assert)(false, \"unsupported method: \".concat(req.method), \"UNSUPPORTED_OPERATION\", {\n                operation: req.method,\n                info: req\n              });\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function _perform(_x6) {\n        return _perform3.apply(this, arguments);\n      }\n      return _perform;\n    }() // State\n  }, {\n    key: \"getBlockNumber\",\n    value: function () {\n      var _getBlockNumber = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var blockNumber;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.t0 = (0, index_js_6.getNumber);\n              _context3.next = 3;\n              return _classPrivateMethodGet(this, _perform, _perform2).call(this, {\n                method: \"getBlockNumber\"\n              });\n            case 3:\n              _context3.t1 = _context3.sent;\n              blockNumber = (0, _context3.t0)(_context3.t1, \"%response\");\n              if (_classPrivateFieldGet(this, _lastBlockNumber) >= 0) {\n                _classPrivateFieldSet(this, _lastBlockNumber, blockNumber);\n              }\n              return _context3.abrupt(\"return\", blockNumber);\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getBlockNumber() {\n        return _getBlockNumber.apply(this, arguments);\n      }\n      return getBlockNumber;\n    }()\n    /**\n     *  Returns or resolves to the address for %%address%%, resolving ENS\n     *  names and [[Addressable]] objects and returning if already an\n     *  address.\n     */\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(address) {\n      return (0, index_js_1.resolveAddress)(address, this);\n    }\n    /**\n     *  Returns or resolves to a valid block tag for %%blockTag%%, resolving\n     *  negative values and returning if already a valid block tag.\n     */\n  }, {\n    key: \"_getBlockTag\",\n    value: function _getBlockTag(blockTag) {\n      if (blockTag == null) {\n        return \"latest\";\n      }\n      switch (blockTag) {\n        case \"earliest\":\n          return \"0x0\";\n        case \"latest\":\n        case \"pending\":\n        case \"safe\":\n        case \"finalized\":\n          return blockTag;\n      }\n      if ((0, index_js_6.isHexString)(blockTag)) {\n        if ((0, index_js_6.isHexString)(blockTag, 32)) {\n          return blockTag;\n        }\n        return (0, index_js_6.toQuantity)(blockTag);\n      }\n      if (typeof blockTag === \"bigint\") {\n        blockTag = (0, index_js_6.getNumber)(blockTag, \"blockTag\");\n      }\n      if (typeof blockTag === \"number\") {\n        if (blockTag >= 0) {\n          return (0, index_js_6.toQuantity)(blockTag);\n        }\n        if (_classPrivateFieldGet(this, _lastBlockNumber) >= 0) {\n          return (0, index_js_6.toQuantity)(_classPrivateFieldGet(this, _lastBlockNumber) + blockTag);\n        }\n        return this.getBlockNumber().then(function (b) {\n          return (0, index_js_6.toQuantity)(b + blockTag);\n        });\n      }\n      (0, index_js_6.assertArgument)(false, \"invalid blockTag\", \"blockTag\", blockTag);\n    }\n    /**\n     *  Returns or resolves to a filter for %%filter%%, resolving any ENS\n     *  names or [[Addressable]] object and returning if already a valid\n     *  filter.\n     */\n  }, {\n    key: \"_getFilter\",\n    value: function _getFilter(filter) {\n      // Create a canonical representation of the topics\n      var topics = (filter.topics || []).map(function (t) {\n        if (t == null) {\n          return null;\n        }\n        if (Array.isArray(t)) {\n          return concisify(t.map(function (t) {\n            return t.toLowerCase();\n          }));\n        }\n        return t.toLowerCase();\n      });\n      var blockHash = \"blockHash\" in filter ? filter.blockHash : undefined;\n      var resolve = function resolve(_address, fromBlock, toBlock) {\n        var address = undefined;\n        switch (_address.length) {\n          case 0:\n            break;\n          case 1:\n            address = _address[0];\n            break;\n          default:\n            _address.sort();\n            address = _address;\n        }\n        if (blockHash) {\n          if (fromBlock != null || toBlock != null) {\n            throw new Error(\"invalid filter\");\n          }\n        }\n        var filter = {};\n        if (address) {\n          filter.address = address;\n        }\n        if (topics.length) {\n          filter.topics = topics;\n        }\n        if (fromBlock) {\n          filter.fromBlock = fromBlock;\n        }\n        if (toBlock) {\n          filter.toBlock = toBlock;\n        }\n        if (blockHash) {\n          filter.blockHash = blockHash;\n        }\n        return filter;\n      };\n      // Addresses could be async (ENS names or Addressables)\n      var address = [];\n      if (filter.address) {\n        if (Array.isArray(filter.address)) {\n          var _iterator = _createForOfIteratorHelper(filter.address),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var addr = _step.value;\n              address.push(this._getAddress(addr));\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } else {\n          address.push(this._getAddress(filter.address));\n        }\n      }\n      var fromBlock = undefined;\n      if (\"fromBlock\" in filter) {\n        fromBlock = this._getBlockTag(filter.fromBlock);\n      }\n      var toBlock = undefined;\n      if (\"toBlock\" in filter) {\n        toBlock = this._getBlockTag(filter.toBlock);\n      }\n      if (address.filter(function (a) {\n        return typeof a !== \"string\";\n      }).length || fromBlock != null && typeof fromBlock !== \"string\" || toBlock != null && typeof toBlock !== \"string\") {\n        return Promise.all([Promise.all(address), fromBlock, toBlock]).then(function (result) {\n          return resolve(result[0], result[1], result[2]);\n        });\n      }\n      return resolve(address, fromBlock, toBlock);\n    }\n    /**\n     *  Returns or resovles to a transaction for %%request%%, resolving\n     *  any ENS names or [[Addressable]] and returning if already a valid\n     *  transaction.\n     */\n  }, {\n    key: \"_getTransactionRequest\",\n    value: function _getTransactionRequest(_request) {\n      var request = (0, provider_js_1.copyRequest)(_request);\n      var promises = [];\n      [\"to\", \"from\"].forEach(function (key) {\n        if (request[key] == null) {\n          return;\n        }\n        var addr = (0, index_js_1.resolveAddress)(request[key]);\n        if (isPromise(addr)) {\n          promises.push(_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n            return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n              while (1) switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return addr;\n                case 2:\n                  request[key] = _context4.sent;\n                case 3:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }, _callee4);\n          }))());\n        } else {\n          request[key] = addr;\n        }\n      });\n      if (request.blockTag != null) {\n        var blockTag = this._getBlockTag(request.blockTag);\n        if (isPromise(blockTag)) {\n          promises.push(_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n            return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return blockTag;\n                case 2:\n                  request.blockTag = _context5.sent;\n                case 3:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, _callee5);\n          }))());\n        } else {\n          request.blockTag = blockTag;\n        }\n      }\n      if (promises.length) {\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n          return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n            while (1) switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return Promise.all(promises);\n              case 2:\n                return _context6.abrupt(\"return\", request);\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }, _callee6);\n        }))();\n      }\n      return request;\n    }\n  }, {\n    key: \"getNetwork\",\n    value: function () {\n      var _getNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var _this2 = this;\n        var detectNetwork, networkPromise, _yield$Promise$all, _yield$Promise$all2, expected, actual;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(_classPrivateFieldGet(this, _networkPromise) == null)) {\n                _context7.next = 6;\n                break;\n              }\n              // Detect the current network (shared with all calls)\n              detectNetwork = this._detectNetwork().then(function (network) {\n                _this2.emit(\"network\", network, null);\n                return network;\n              }, function (error) {\n                // Reset the networkPromise on failure, so we will try again\n                if (_classPrivateFieldGet(_this2, _networkPromise) === detectNetwork) {\n                  _classPrivateFieldSet(_this2, _networkPromise, null);\n                }\n                throw error;\n              });\n              _classPrivateFieldSet(this, _networkPromise, detectNetwork);\n              _context7.next = 5;\n              return detectNetwork;\n            case 5:\n              return _context7.abrupt(\"return\", _context7.sent.clone());\n            case 6:\n              networkPromise = _classPrivateFieldGet(this, _networkPromise);\n              _context7.next = 9;\n              return Promise.all([networkPromise, this._detectNetwork() // The actual connected network\n              ]);\n            case 9:\n              _yield$Promise$all = _context7.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              expected = _yield$Promise$all2[0];\n              actual = _yield$Promise$all2[1];\n              if (expected.chainId !== actual.chainId) {\n                if (_classPrivateFieldGet(this, _anyNetwork)) {\n                  // The \"any\" network can change, so notify listeners\n                  this.emit(\"network\", actual, expected);\n                  // Update the network if something else hasn't already changed it\n                  if (_classPrivateFieldGet(this, _networkPromise) === networkPromise) {\n                    _classPrivateFieldSet(this, _networkPromise, Promise.resolve(actual));\n                  }\n                } else {\n                  // Otherwise, we do not allow changes to the underlying network\n                  (0, index_js_6.assert)(false, \"network changed: \".concat(expected.chainId, \" => \").concat(actual.chainId, \" \"), \"NETWORK_ERROR\", {\n                    event: \"changed\"\n                  });\n                }\n              }\n              return _context7.abrupt(\"return\", expected.clone());\n            case 15:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function getNetwork() {\n        return _getNetwork.apply(this, arguments);\n      }\n      return getNetwork;\n    }()\n  }, {\n    key: \"getFeeData\",\n    value: function () {\n      var _getFeeData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _this3 = this;\n        var _yield, block, gasPrice, maxFeePerGas, maxPriorityFeePerGas;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return (0, index_js_6.resolveProperties)({\n                block: this.getBlock(\"latest\"),\n                gasPrice: _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n                  var _gasPrice;\n                  return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                    while (1) switch (_context8.prev = _context8.next) {\n                      case 0:\n                        _context8.prev = 0;\n                        _context8.next = 3;\n                        return _classPrivateMethodGet(_this3, _perform, _perform2).call(_this3, {\n                          method: \"getGasPrice\"\n                        });\n                      case 3:\n                        _gasPrice = _context8.sent;\n                        return _context8.abrupt(\"return\", (0, index_js_6.getBigInt)(_gasPrice, \"%response\"));\n                      case 7:\n                        _context8.prev = 7;\n                        _context8.t0 = _context8[\"catch\"](0);\n                      case 9:\n                        return _context8.abrupt(\"return\", null);\n                      case 10:\n                      case \"end\":\n                        return _context8.stop();\n                    }\n                  }, _callee8, null, [[0, 7]]);\n                }))()\n              });\n            case 2:\n              _yield = _context9.sent;\n              block = _yield.block;\n              gasPrice = _yield.gasPrice;\n              maxFeePerGas = null, maxPriorityFeePerGas = null;\n              if (block && block.baseFeePerGas) {\n                // We may want to compute this more accurately in the future,\n                // using the formula \"check if the base fee is correct\".\n                // See: https://eips.ethereum.org/EIPS/eip-1559\n                maxPriorityFeePerGas = BigInt(\"1000000000\");\n                // Allow a network to override their maximum priority fee per gas\n                //const priorityFeePlugin = (await this.getNetwork()).getPlugin<MaxPriorityFeePlugin>(\"org.ethers.plugins.max-priority-fee\");\n                //if (priorityFeePlugin) {\n                //    maxPriorityFeePerGas = await priorityFeePlugin.getPriorityFee(this);\n                //}\n                maxFeePerGas = block.baseFeePerGas * BN_2 + maxPriorityFeePerGas;\n              }\n              return _context9.abrupt(\"return\", new provider_js_1.FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas));\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function getFeeData() {\n        return _getFeeData.apply(this, arguments);\n      }\n      return getFeeData;\n    }()\n  }, {\n    key: \"estimateGas\",\n    value: function () {\n      var _estimateGas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(_tx) {\n        var tx;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              tx = this._getTransactionRequest(_tx);\n              if (!isPromise(tx)) {\n                _context10.next = 5;\n                break;\n              }\n              _context10.next = 4;\n              return tx;\n            case 4:\n              tx = _context10.sent;\n            case 5:\n              _context10.t0 = (0, index_js_6.getBigInt);\n              _context10.next = 8;\n              return _classPrivateMethodGet(this, _perform, _perform2).call(this, {\n                method: \"estimateGas\",\n                transaction: tx\n              });\n            case 8:\n              _context10.t1 = _context10.sent;\n              return _context10.abrupt(\"return\", (0, _context10.t0)(_context10.t1, \"%response\"));\n            case 10:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function estimateGas(_x7) {\n        return _estimateGas.apply(this, arguments);\n      }\n      return estimateGas;\n    }()\n  }, {\n    key: \"call\",\n    value: function () {\n      var _call3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(_tx) {\n        var _yield2, tx, blockTag;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return (0, index_js_6.resolveProperties)({\n                tx: this._getTransactionRequest(_tx),\n                blockTag: this._getBlockTag(_tx.blockTag)\n              });\n            case 2:\n              _yield2 = _context11.sent;\n              tx = _yield2.tx;\n              blockTag = _yield2.blockTag;\n              _context11.next = 7;\n              return _classPrivateMethodGet(this, _checkNetwork, _checkNetwork2).call(this, _classPrivateMethodGet(this, _call, _call2).call(this, tx, blockTag, _tx.enableCcipRead ? 0 : -1));\n            case 7:\n              return _context11.abrupt(\"return\", _context11.sent);\n            case 8:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function call(_x8) {\n        return _call3.apply(this, arguments);\n      }\n      return call;\n    }()\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(address, blockTag) {\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.t0 = (0, index_js_6.getBigInt);\n              _context12.next = 3;\n              return _classPrivateMethodGet(this, _getAccountValue, _getAccountValue2).call(this, {\n                method: \"getBalance\"\n              }, address, blockTag);\n            case 3:\n              _context12.t1 = _context12.sent;\n              return _context12.abrupt(\"return\", (0, _context12.t0)(_context12.t1, \"%response\"));\n            case 5:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function getBalance(_x9, _x10) {\n        return _getBalance.apply(this, arguments);\n      }\n      return getBalance;\n    }()\n  }, {\n    key: \"getTransactionCount\",\n    value: function () {\n      var _getTransactionCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(address, blockTag) {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.t0 = (0, index_js_6.getNumber);\n              _context13.next = 3;\n              return _classPrivateMethodGet(this, _getAccountValue, _getAccountValue2).call(this, {\n                method: \"getTransactionCount\"\n              }, address, blockTag);\n            case 3:\n              _context13.t1 = _context13.sent;\n              return _context13.abrupt(\"return\", (0, _context13.t0)(_context13.t1, \"%response\"));\n            case 5:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function getTransactionCount(_x11, _x12) {\n        return _getTransactionCount.apply(this, arguments);\n      }\n      return getTransactionCount;\n    }()\n  }, {\n    key: \"getCode\",\n    value: function () {\n      var _getCode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(address, blockTag) {\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.t0 = (0, index_js_6.hexlify);\n              _context14.next = 3;\n              return _classPrivateMethodGet(this, _getAccountValue, _getAccountValue2).call(this, {\n                method: \"getCode\"\n              }, address, blockTag);\n            case 3:\n              _context14.t1 = _context14.sent;\n              return _context14.abrupt(\"return\", (0, _context14.t0)(_context14.t1));\n            case 5:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function getCode(_x13, _x14) {\n        return _getCode.apply(this, arguments);\n      }\n      return getCode;\n    }()\n  }, {\n    key: \"getStorage\",\n    value: function () {\n      var _getStorage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(address, _position, blockTag) {\n        var position;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              position = (0, index_js_6.getBigInt)(_position, \"position\");\n              _context15.t0 = (0, index_js_6.hexlify);\n              _context15.next = 4;\n              return _classPrivateMethodGet(this, _getAccountValue, _getAccountValue2).call(this, {\n                method: \"getStorage\",\n                position: position\n              }, address, blockTag);\n            case 4:\n              _context15.t1 = _context15.sent;\n              return _context15.abrupt(\"return\", (0, _context15.t0)(_context15.t1));\n            case 6:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n      function getStorage(_x15, _x16, _x17) {\n        return _getStorage.apply(this, arguments);\n      }\n      return getStorage;\n    }() // Write\n  }, {\n    key: \"broadcastTransaction\",\n    value: function () {\n      var _broadcastTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(signedTx) {\n        var _yield3, blockNumber, hash, network, tx;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return (0, index_js_6.resolveProperties)({\n                blockNumber: this.getBlockNumber(),\n                hash: this._perform({\n                  method: \"broadcastTransaction\",\n                  signedTransaction: signedTx\n                }),\n                network: this.getNetwork()\n              });\n            case 2:\n              _yield3 = _context16.sent;\n              blockNumber = _yield3.blockNumber;\n              hash = _yield3.hash;\n              network = _yield3.network;\n              tx = index_js_5.Transaction.from(signedTx);\n              if (!(tx.hash !== hash)) {\n                _context16.next = 9;\n                break;\n              }\n              throw new Error(\"@TODO: the returned hash did not match\");\n            case 9:\n              return _context16.abrupt(\"return\", this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber));\n            case 10:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this);\n      }));\n      function broadcastTransaction(_x18) {\n        return _broadcastTransaction.apply(this, arguments);\n      }\n      return broadcastTransaction;\n    }()\n  }, {\n    key: \"getBlock\",\n    value: // Queries\n    function () {\n      var _getBlock3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(block, prefetchTxs) {\n        var _yield4, network, params;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.next = 2;\n              return (0, index_js_6.resolveProperties)({\n                network: this.getNetwork(),\n                params: _classPrivateMethodGet(this, _getBlock, _getBlock2).call(this, block, !!prefetchTxs)\n              });\n            case 2:\n              _yield4 = _context17.sent;\n              network = _yield4.network;\n              params = _yield4.params;\n              if (!(params == null)) {\n                _context17.next = 7;\n                break;\n              }\n              return _context17.abrupt(\"return\", null);\n            case 7:\n              return _context17.abrupt(\"return\", this._wrapBlock(params, network));\n            case 8:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, this);\n      }));\n      function getBlock(_x19, _x20) {\n        return _getBlock3.apply(this, arguments);\n      }\n      return getBlock;\n    }()\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(hash) {\n        var _yield5, network, params;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return (0, index_js_6.resolveProperties)({\n                network: this.getNetwork(),\n                params: _classPrivateMethodGet(this, _perform, _perform2).call(this, {\n                  method: \"getTransaction\",\n                  hash: hash\n                })\n              });\n            case 2:\n              _yield5 = _context18.sent;\n              network = _yield5.network;\n              params = _yield5.params;\n              if (!(params == null)) {\n                _context18.next = 7;\n                break;\n              }\n              return _context18.abrupt(\"return\", null);\n            case 7:\n              return _context18.abrupt(\"return\", this._wrapTransactionResponse(params, network));\n            case 8:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this);\n      }));\n      function getTransaction(_x21) {\n        return _getTransaction.apply(this, arguments);\n      }\n      return getTransaction;\n    }()\n  }, {\n    key: \"getTransactionReceipt\",\n    value: function () {\n      var _getTransactionReceipt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(hash) {\n        var _yield6, network, params, tx;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return (0, index_js_6.resolveProperties)({\n                network: this.getNetwork(),\n                params: _classPrivateMethodGet(this, _perform, _perform2).call(this, {\n                  method: \"getTransactionReceipt\",\n                  hash: hash\n                })\n              });\n            case 2:\n              _yield6 = _context19.sent;\n              network = _yield6.network;\n              params = _yield6.params;\n              if (!(params == null)) {\n                _context19.next = 7;\n                break;\n              }\n              return _context19.abrupt(\"return\", null);\n            case 7:\n              if (!(params.gasPrice == null && params.effectiveGasPrice == null)) {\n                _context19.next = 14;\n                break;\n              }\n              _context19.next = 10;\n              return _classPrivateMethodGet(this, _perform, _perform2).call(this, {\n                method: \"getTransaction\",\n                hash: hash\n              });\n            case 10:\n              tx = _context19.sent;\n              if (!(tx == null)) {\n                _context19.next = 13;\n                break;\n              }\n              throw new Error(\"report this; could not find tx or effectiveGasPrice\");\n            case 13:\n              params.effectiveGasPrice = tx.gasPrice;\n            case 14:\n              return _context19.abrupt(\"return\", this._wrapTransactionReceipt(params, network));\n            case 15:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this);\n      }));\n      function getTransactionReceipt(_x22) {\n        return _getTransactionReceipt.apply(this, arguments);\n      }\n      return getTransactionReceipt;\n    }()\n  }, {\n    key: \"getTransactionResult\",\n    value: function () {\n      var _getTransactionResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(hash) {\n        var _yield7, result;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.next = 2;\n              return (0, index_js_6.resolveProperties)({\n                network: this.getNetwork(),\n                result: _classPrivateMethodGet(this, _perform, _perform2).call(this, {\n                  method: \"getTransactionResult\",\n                  hash: hash\n                })\n              });\n            case 2:\n              _yield7 = _context20.sent;\n              result = _yield7.result;\n              if (!(result == null)) {\n                _context20.next = 6;\n                break;\n              }\n              return _context20.abrupt(\"return\", null);\n            case 6:\n              return _context20.abrupt(\"return\", (0, index_js_6.hexlify)(result));\n            case 7:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, this);\n      }));\n      function getTransactionResult(_x23) {\n        return _getTransactionResult.apply(this, arguments);\n      }\n      return getTransactionResult;\n    }() // Bloom-filter Queries\n  }, {\n    key: \"getLogs\",\n    value: function () {\n      var _getLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(_filter) {\n        var _this4 = this;\n        var filter, _yield8, network, params;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              filter = this._getFilter(_filter);\n              if (!isPromise(filter)) {\n                _context21.next = 5;\n                break;\n              }\n              _context21.next = 4;\n              return filter;\n            case 4:\n              filter = _context21.sent;\n            case 5:\n              _context21.next = 7;\n              return (0, index_js_6.resolveProperties)({\n                network: this.getNetwork(),\n                params: _classPrivateMethodGet(this, _perform, _perform2).call(this, {\n                  method: \"getLogs\",\n                  filter: filter\n                })\n              });\n            case 7:\n              _yield8 = _context21.sent;\n              network = _yield8.network;\n              params = _yield8.params;\n              return _context21.abrupt(\"return\", params.map(function (p) {\n                return _this4._wrapLog(p, network);\n              }));\n            case 11:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, this);\n      }));\n      function getLogs(_x24) {\n        return _getLogs.apply(this, arguments);\n      }\n      return getLogs;\n    }() // ENS\n  }, {\n    key: \"_getProvider\",\n    value: function _getProvider(chainId) {\n      (0, index_js_6.assert)(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"_getProvider()\"\n      });\n    }\n  }, {\n    key: \"getResolver\",\n    value: function () {\n      var _getResolver = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(name) {\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return ens_resolver_js_1.EnsResolver.fromName(this, name);\n            case 2:\n              return _context22.abrupt(\"return\", _context22.sent);\n            case 3:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22, this);\n      }));\n      function getResolver(_x25) {\n        return _getResolver.apply(this, arguments);\n      }\n      return getResolver;\n    }()\n  }, {\n    key: \"getAvatar\",\n    value: function () {\n      var _getAvatar = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(name) {\n        var resolver;\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) switch (_context23.prev = _context23.next) {\n            case 0:\n              _context23.next = 2;\n              return this.getResolver(name);\n            case 2:\n              resolver = _context23.sent;\n              if (!resolver) {\n                _context23.next = 7;\n                break;\n              }\n              _context23.next = 6;\n              return resolver.getAvatar();\n            case 6:\n              return _context23.abrupt(\"return\", _context23.sent);\n            case 7:\n              return _context23.abrupt(\"return\", null);\n            case 8:\n            case \"end\":\n              return _context23.stop();\n          }\n        }, _callee23, this);\n      }));\n      function getAvatar(_x26) {\n        return _getAvatar.apply(this, arguments);\n      }\n      return getAvatar;\n    }()\n  }, {\n    key: \"resolveName\",\n    value: function () {\n      var _resolveName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(name) {\n        var resolver;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              _context24.next = 2;\n              return this.getResolver(name);\n            case 2:\n              resolver = _context24.sent;\n              if (!resolver) {\n                _context24.next = 7;\n                break;\n              }\n              _context24.next = 6;\n              return resolver.getAddress();\n            case 6:\n              return _context24.abrupt(\"return\", _context24.sent);\n            case 7:\n              return _context24.abrupt(\"return\", null);\n            case 8:\n            case \"end\":\n              return _context24.stop();\n          }\n        }, _callee24, this);\n      }));\n      function resolveName(_x27) {\n        return _resolveName.apply(this, arguments);\n      }\n      return resolveName;\n    }()\n  }, {\n    key: \"lookupAddress\",\n    value: function () {\n      var _lookupAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(address) {\n        var node, ensAddr, ensContract, resolver, resolverContract, name, check;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              address = (0, index_js_1.getAddress)(address);\n              node = (0, index_js_4.namehash)(address.substring(2).toLowerCase() + \".addr.reverse\");\n              _context25.prev = 2;\n              _context25.next = 5;\n              return ens_resolver_js_1.EnsResolver.getEnsAddress(this);\n            case 5:\n              ensAddr = _context25.sent;\n              ensContract = new index_js_3.Contract(ensAddr, [\"function resolver(bytes32) view returns (address)\"], this);\n              _context25.next = 9;\n              return ensContract.resolver(node);\n            case 9:\n              resolver = _context25.sent;\n              if (!(resolver == null || resolver === index_js_2.ZeroAddress)) {\n                _context25.next = 12;\n                break;\n              }\n              return _context25.abrupt(\"return\", null);\n            case 12:\n              resolverContract = new index_js_3.Contract(resolver, [\"function name(bytes32) view returns (string)\"], this);\n              _context25.next = 15;\n              return resolverContract.name(node);\n            case 15:\n              name = _context25.sent;\n              _context25.next = 18;\n              return this.resolveName(name);\n            case 18:\n              check = _context25.sent;\n              if (!(check !== address)) {\n                _context25.next = 21;\n                break;\n              }\n              return _context25.abrupt(\"return\", null);\n            case 21:\n              return _context25.abrupt(\"return\", name);\n            case 24:\n              _context25.prev = 24;\n              _context25.t0 = _context25[\"catch\"](2);\n              if (!((0, index_js_6.isError)(_context25.t0, \"BAD_DATA\") && _context25.t0.value === \"0x\")) {\n                _context25.next = 28;\n                break;\n              }\n              return _context25.abrupt(\"return\", null);\n            case 28:\n              if (!(0, index_js_6.isError)(_context25.t0, \"CALL_EXCEPTION\")) {\n                _context25.next = 30;\n                break;\n              }\n              return _context25.abrupt(\"return\", null);\n            case 30:\n              throw _context25.t0;\n            case 31:\n              return _context25.abrupt(\"return\", null);\n            case 32:\n            case \"end\":\n              return _context25.stop();\n          }\n        }, _callee25, this, [[2, 24]]);\n      }));\n      function lookupAddress(_x28) {\n        return _lookupAddress.apply(this, arguments);\n      }\n      return lookupAddress;\n    }()\n  }, {\n    key: \"waitForTransaction\",\n    value: function () {\n      var _waitForTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(hash, _confirms, timeout) {\n        var _this5 = this;\n        var confirms;\n        return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n          while (1) switch (_context28.prev = _context28.next) {\n            case 0:\n              confirms = _confirms != null ? _confirms : 1;\n              if (!(confirms === 0)) {\n                _context28.next = 3;\n                break;\n              }\n              return _context28.abrupt(\"return\", this.getTransactionReceipt(hash));\n            case 3:\n              return _context28.abrupt(\"return\", new Promise( /*#__PURE__*/function () {\n                var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(resolve, reject) {\n                  var timer, listener;\n                  return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n                    while (1) switch (_context27.prev = _context27.next) {\n                      case 0:\n                        timer = null;\n                        listener = /*#__PURE__*/function () {\n                          var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(blockNumber) {\n                            var receipt;\n                            return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n                              while (1) switch (_context26.prev = _context26.next) {\n                                case 0:\n                                  _context26.prev = 0;\n                                  _context26.next = 3;\n                                  return _this5.getTransactionReceipt(hash);\n                                case 3:\n                                  receipt = _context26.sent;\n                                  if (!(receipt != null)) {\n                                    _context26.next = 9;\n                                    break;\n                                  }\n                                  if (!(blockNumber - receipt.blockNumber + 1 >= confirms)) {\n                                    _context26.next = 9;\n                                    break;\n                                  }\n                                  resolve(receipt);\n                                  //this.off(\"block\", listener);\n                                  if (timer) {\n                                    clearTimeout(timer);\n                                    timer = null;\n                                  }\n                                  return _context26.abrupt(\"return\");\n                                case 9:\n                                  _context26.next = 14;\n                                  break;\n                                case 11:\n                                  _context26.prev = 11;\n                                  _context26.t0 = _context26[\"catch\"](0);\n                                  console.log(\"EEE\", _context26.t0);\n                                case 14:\n                                  _this5.once(\"block\", listener);\n                                case 15:\n                                case \"end\":\n                                  return _context26.stop();\n                              }\n                            }, _callee26, null, [[0, 11]]);\n                          }));\n                          return function listener(_x34) {\n                            return _ref6.apply(this, arguments);\n                          };\n                        }();\n                        if (timeout != null) {\n                          timer = setTimeout(function () {\n                            if (timer == null) {\n                              return;\n                            }\n                            timer = null;\n                            _this5.off(\"block\", listener);\n                            reject((0, index_js_6.makeError)(\"timeout\", \"TIMEOUT\", {\n                              reason: \"timeout\"\n                            }));\n                          }, timeout);\n                        }\n                        _context27.t0 = listener;\n                        _context27.next = 6;\n                        return _this5.getBlockNumber();\n                      case 6:\n                        _context27.t1 = _context27.sent;\n                        (0, _context27.t0)(_context27.t1);\n                      case 8:\n                      case \"end\":\n                        return _context27.stop();\n                    }\n                  }, _callee27);\n                }));\n                return function (_x32, _x33) {\n                  return _ref5.apply(this, arguments);\n                };\n              }()));\n            case 4:\n            case \"end\":\n              return _context28.stop();\n          }\n        }, _callee28, this);\n      }));\n      function waitForTransaction(_x29, _x30, _x31) {\n        return _waitForTransaction.apply(this, arguments);\n      }\n      return waitForTransaction;\n    }()\n  }, {\n    key: \"waitForBlock\",\n    value: function () {\n      var _waitForBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29(blockTag) {\n        return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n          while (1) switch (_context29.prev = _context29.next) {\n            case 0:\n              (0, index_js_6.assert)(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\n                operation: \"waitForBlock\"\n              });\n            case 1:\n            case \"end\":\n              return _context29.stop();\n          }\n        }, _callee29);\n      }));\n      function waitForBlock(_x35) {\n        return _waitForBlock.apply(this, arguments);\n      }\n      return waitForBlock;\n    }()\n    /**\n     *  Clear a timer created using the [[_setTimeout]] method.\n     */\n  }, {\n    key: \"_clearTimeout\",\n    value: function _clearTimeout(timerId) {\n      var timer = _classPrivateFieldGet(this, _timers).get(timerId);\n      if (!timer) {\n        return;\n      }\n      if (timer.timer) {\n        clearTimeout(timer.timer);\n      }\n      _classPrivateFieldGet(this, _timers).delete(timerId);\n    }\n    /**\n     *  Create a timer that will execute %%func%% after at least %%timeout%%\n     *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute\n     *  in the next event loop.\n     *\n     *  [Pausing](AbstractProvider-paused) the provider will pause any\n     *  associated timers.\n     */\n  }, {\n    key: \"_setTimeout\",\n    value: function _setTimeout(_func, timeout) {\n      var _this$nextTimer,\n        _this$nextTimer2,\n        _this6 = this;\n      if (timeout == null) {\n        timeout = 0;\n      }\n      var timerId = (_classPrivateFieldSet(this, _nextTimer, (_this$nextTimer = _classPrivateFieldGet(this, _nextTimer), _this$nextTimer2 = _this$nextTimer++, _this$nextTimer)), _this$nextTimer2);\n      var func = function func() {\n        _classPrivateFieldGet(_this6, _timers).delete(timerId);\n        _func();\n      };\n      if (this.paused) {\n        _classPrivateFieldGet(this, _timers).set(timerId, {\n          timer: null,\n          func: func,\n          time: timeout\n        });\n      } else {\n        var timer = setTimeout(func, timeout);\n        _classPrivateFieldGet(this, _timers).set(timerId, {\n          timer: timer,\n          func: func,\n          time: getTime()\n        });\n      }\n      return timerId;\n    }\n    /**\n     *  Perform %%func%% on each subscriber.\n     */\n  }, {\n    key: \"_forEachSubscriber\",\n    value: function _forEachSubscriber(func) {\n      var _iterator2 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _subs).values()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var sub = _step2.value;\n          func(sub.subscriber);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     *  Sub-classes may override this to customize subscription\n     *  implementations.\n     */\n  }, {\n    key: \"_getSubscriber\",\n    value: function _getSubscriber(sub) {\n      switch (sub.type) {\n        case \"debug\":\n        case \"error\":\n        case \"network\":\n          return new UnmanagedSubscriber(sub.type);\n        case \"block\":\n          return new subscriber_polling_js_1.PollingBlockSubscriber(this);\n        case \"event\":\n          return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);\n        case \"transaction\":\n          return new subscriber_polling_js_1.PollingTransactionSubscriber(this, sub.hash);\n        case \"orphan\":\n          return new subscriber_polling_js_1.PollingOrphanSubscriber(this, sub.filter);\n      }\n      throw new Error(\"unsupported event: \".concat(sub.type));\n    }\n    /**\n     *  If a [[Subscriber]] fails and needs to replace itself, this\n     *  method may be used.\n     *\n     *  For example, this is used for providers when using the\n     *  ``eth_getFilterChanges`` method, which can return null if state\n     *  filters are not supported by the backend, allowing the Subscriber\n     *  to swap in a [[PollingEventSubscriber]].\n     */\n  }, {\n    key: \"_recoverSubscriber\",\n    value: function _recoverSubscriber(oldSub, newSub) {\n      var _iterator3 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _subs).values()),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var sub = _step3.value;\n          if (sub.subscriber === oldSub) {\n            if (sub.started) {\n              sub.subscriber.stop();\n            }\n            sub.subscriber = newSub;\n            if (sub.started) {\n              newSub.start();\n            }\n            if (_classPrivateFieldGet(this, _pausedState) != null) {\n              newSub.pause(_classPrivateFieldGet(this, _pausedState));\n            }\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"on\",\n    value: function () {\n      var _on = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30(event, listener) {\n        var sub;\n        return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n          while (1) switch (_context30.prev = _context30.next) {\n            case 0:\n              _context30.next = 2;\n              return _classPrivateMethodGet(this, _getSub, _getSub2).call(this, event);\n            case 2:\n              sub = _context30.sent;\n              sub.listeners.push({\n                listener: listener,\n                once: false\n              });\n              if (!sub.started) {\n                sub.subscriber.start();\n                sub.started = true;\n                if (_classPrivateFieldGet(this, _pausedState) != null) {\n                  sub.subscriber.pause(_classPrivateFieldGet(this, _pausedState));\n                }\n              }\n              return _context30.abrupt(\"return\", this);\n            case 6:\n            case \"end\":\n              return _context30.stop();\n          }\n        }, _callee30, this);\n      }));\n      function on(_x36, _x37) {\n        return _on.apply(this, arguments);\n      }\n      return on;\n    }()\n  }, {\n    key: \"once\",\n    value: function () {\n      var _once = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31(event, listener) {\n        var sub;\n        return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n          while (1) switch (_context31.prev = _context31.next) {\n            case 0:\n              _context31.next = 2;\n              return _classPrivateMethodGet(this, _getSub, _getSub2).call(this, event);\n            case 2:\n              sub = _context31.sent;\n              sub.listeners.push({\n                listener: listener,\n                once: true\n              });\n              if (!sub.started) {\n                sub.subscriber.start();\n                sub.started = true;\n                if (_classPrivateFieldGet(this, _pausedState) != null) {\n                  sub.subscriber.pause(_classPrivateFieldGet(this, _pausedState));\n                }\n              }\n              return _context31.abrupt(\"return\", this);\n            case 6:\n            case \"end\":\n              return _context31.stop();\n          }\n        }, _callee31, this);\n      }));\n      function once(_x38, _x39) {\n        return _once.apply(this, arguments);\n      }\n      return once;\n    }()\n  }, {\n    key: \"emit\",\n    value: function () {\n      var _emit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32(event) {\n        var _this7 = this;\n        var _len,\n          args,\n          _key,\n          sub,\n          count,\n          _args32 = arguments;\n        return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n          while (1) switch (_context32.prev = _context32.next) {\n            case 0:\n              for (_len = _args32.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = _args32[_key];\n              }\n              _context32.next = 3;\n              return _classPrivateMethodGet(this, _hasSub, _hasSub2).call(this, event, args);\n            case 3:\n              sub = _context32.sent;\n              if (!(!sub || sub.listeners.length === 0)) {\n                _context32.next = 6;\n                break;\n              }\n              return _context32.abrupt(\"return\", false);\n            case 6:\n              ;\n              count = sub.listeners.length;\n              sub.listeners = sub.listeners.filter(function (_ref7) {\n                var listener = _ref7.listener,\n                  once = _ref7.once;\n                var payload = new index_js_6.EventPayload(_this7, once ? null : listener, event);\n                try {\n                  listener.call.apply(listener, [_this7].concat(args, [payload]));\n                } catch (error) {}\n                return !once;\n              });\n              if (sub.listeners.length === 0) {\n                if (sub.started) {\n                  sub.subscriber.stop();\n                }\n                _classPrivateFieldGet(this, _subs).delete(sub.tag);\n              }\n              return _context32.abrupt(\"return\", count > 0);\n            case 11:\n            case \"end\":\n              return _context32.stop();\n          }\n        }, _callee32, this);\n      }));\n      function emit(_x40) {\n        return _emit.apply(this, arguments);\n      }\n      return emit;\n    }()\n  }, {\n    key: \"listenerCount\",\n    value: function () {\n      var _listenerCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee33(event) {\n        var sub, total, _iterator4, _step4, listeners;\n        return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n          while (1) switch (_context33.prev = _context33.next) {\n            case 0:\n              if (!event) {\n                _context33.next = 7;\n                break;\n              }\n              _context33.next = 3;\n              return _classPrivateMethodGet(this, _hasSub, _hasSub2).call(this, event);\n            case 3:\n              sub = _context33.sent;\n              if (sub) {\n                _context33.next = 6;\n                break;\n              }\n              return _context33.abrupt(\"return\", 0);\n            case 6:\n              return _context33.abrupt(\"return\", sub.listeners.length);\n            case 7:\n              total = 0;\n              _iterator4 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _subs).values());\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  listeners = _step4.value.listeners;\n                  total += listeners.length;\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n              return _context33.abrupt(\"return\", total);\n            case 11:\n            case \"end\":\n              return _context33.stop();\n          }\n        }, _callee33, this);\n      }));\n      function listenerCount(_x41) {\n        return _listenerCount.apply(this, arguments);\n      }\n      return listenerCount;\n    }()\n  }, {\n    key: \"listeners\",\n    value: function () {\n      var _listeners = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee34(event) {\n        var sub, result, _iterator5, _step5, _listeners2;\n        return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n          while (1) switch (_context34.prev = _context34.next) {\n            case 0:\n              if (!event) {\n                _context34.next = 7;\n                break;\n              }\n              _context34.next = 3;\n              return _classPrivateMethodGet(this, _hasSub, _hasSub2).call(this, event);\n            case 3:\n              sub = _context34.sent;\n              if (sub) {\n                _context34.next = 6;\n                break;\n              }\n              return _context34.abrupt(\"return\", []);\n            case 6:\n              return _context34.abrupt(\"return\", sub.listeners.map(function (_ref8) {\n                var listener = _ref8.listener;\n                return listener;\n              }));\n            case 7:\n              result = [];\n              _iterator5 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _subs).values());\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  _listeners2 = _step5.value.listeners;\n                  result = result.concat(_listeners2.map(function (_ref9) {\n                    var listener = _ref9.listener;\n                    return listener;\n                  }));\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n              return _context34.abrupt(\"return\", result);\n            case 11:\n            case \"end\":\n              return _context34.stop();\n          }\n        }, _callee34, this);\n      }));\n      function listeners(_x42) {\n        return _listeners.apply(this, arguments);\n      }\n      return listeners;\n    }()\n  }, {\n    key: \"off\",\n    value: function () {\n      var _off = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee35(event, listener) {\n        var sub, index;\n        return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n          while (1) switch (_context35.prev = _context35.next) {\n            case 0:\n              _context35.next = 2;\n              return _classPrivateMethodGet(this, _hasSub, _hasSub2).call(this, event);\n            case 2:\n              sub = _context35.sent;\n              if (sub) {\n                _context35.next = 5;\n                break;\n              }\n              return _context35.abrupt(\"return\", this);\n            case 5:\n              if (listener) {\n                index = sub.listeners.map(function (_ref10) {\n                  var listener = _ref10.listener;\n                  return listener;\n                }).indexOf(listener);\n                if (index >= 0) {\n                  sub.listeners.splice(index, 1);\n                }\n              }\n              if (!listener || sub.listeners.length === 0) {\n                if (sub.started) {\n                  sub.subscriber.stop();\n                }\n                _classPrivateFieldGet(this, _subs).delete(sub.tag);\n              }\n              return _context35.abrupt(\"return\", this);\n            case 8:\n            case \"end\":\n              return _context35.stop();\n          }\n        }, _callee35, this);\n      }));\n      function off(_x43, _x44) {\n        return _off.apply(this, arguments);\n      }\n      return off;\n    }()\n  }, {\n    key: \"removeAllListeners\",\n    value: function () {\n      var _removeAllListeners = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee36(event) {\n        var _yield$_classPrivateM, tag, started, subscriber, _iterator6, _step6, _step6$value, _tag, _step6$value$, _started, _subscriber;\n        return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n          while (1) switch (_context36.prev = _context36.next) {\n            case 0:\n              if (!event) {\n                _context36.next = 11;\n                break;\n              }\n              _context36.next = 3;\n              return _classPrivateMethodGet(this, _getSub, _getSub2).call(this, event);\n            case 3:\n              _yield$_classPrivateM = _context36.sent;\n              tag = _yield$_classPrivateM.tag;\n              started = _yield$_classPrivateM.started;\n              subscriber = _yield$_classPrivateM.subscriber;\n              if (started) {\n                subscriber.stop();\n              }\n              _classPrivateFieldGet(this, _subs).delete(tag);\n              _context36.next = 13;\n              break;\n            case 11:\n              _iterator6 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _subs));\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  _step6$value = _slicedToArray(_step6.value, 2), _tag = _step6$value[0], _step6$value$ = _step6$value[1], _started = _step6$value$.started, _subscriber = _step6$value$.subscriber;\n                  if (_started) {\n                    _subscriber.stop();\n                  }\n                  _classPrivateFieldGet(this, _subs).delete(_tag);\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n            case 13:\n              return _context36.abrupt(\"return\", this);\n            case 14:\n            case \"end\":\n              return _context36.stop();\n          }\n        }, _callee36, this);\n      }));\n      function removeAllListeners(_x45) {\n        return _removeAllListeners.apply(this, arguments);\n      }\n      return removeAllListeners;\n    }() // Alias for \"on\"\n  }, {\n    key: \"addListener\",\n    value: function () {\n      var _addListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee37(event, listener) {\n        return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n          while (1) switch (_context37.prev = _context37.next) {\n            case 0:\n              _context37.next = 2;\n              return this.on(event, listener);\n            case 2:\n              return _context37.abrupt(\"return\", _context37.sent);\n            case 3:\n            case \"end\":\n              return _context37.stop();\n          }\n        }, _callee37, this);\n      }));\n      function addListener(_x46, _x47) {\n        return _addListener.apply(this, arguments);\n      }\n      return addListener;\n    }() // Alias for \"off\"\n  }, {\n    key: \"removeListener\",\n    value: function () {\n      var _removeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee38(event, listener) {\n        return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n          while (1) switch (_context38.prev = _context38.next) {\n            case 0:\n              return _context38.abrupt(\"return\", this.off(event, listener));\n            case 1:\n            case \"end\":\n              return _context38.stop();\n          }\n        }, _callee38, this);\n      }));\n      function removeListener(_x48, _x49) {\n        return _removeListener.apply(this, arguments);\n      }\n      return removeListener;\n    }()\n    /**\n     *  If this provider has been destroyed using the [[destroy]] method.\n     *\n     *  Once destroyed, all resources are reclaimed, internal event loops\n     *  and timers are cleaned up and no further requests may be sent to\n     *  the provider.\n     */\n  }, {\n    key: \"destroyed\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _destroyed);\n    }\n    /**\n     *  Sub-classes may use this to shutdown any sockets or release their\n     *  resources and reject any pending requests.\n     *\n     *  Sub-classes **must** call ``super.destroy()``.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      // Stop all listeners\n      this.removeAllListeners();\n      // Shut down all tiemrs\n      var _iterator7 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _timers).keys()),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var timerId = _step7.value;\n          this._clearTimeout(timerId);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      _classPrivateFieldSet(this, _destroyed, true);\n    }\n    /**\n     *  Whether the provider is currently paused.\n     *\n     *  A paused provider will not emit any events, and generally should\n     *  not make any requests to the network, but that is up to sub-classes\n     *  to manage.\n     *\n     *  Setting ``paused = true`` is identical to calling ``.pause(false)``,\n     *  which will buffer any events that occur while paused until the\n     *  provider is unpaused.\n     */\n  }, {\n    key: \"paused\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _pausedState) != null;\n    },\n    set: function set(pause) {\n      if (!!pause === this.paused) {\n        return;\n      }\n      if (this.paused) {\n        this.resume();\n      } else {\n        this.pause(false);\n      }\n    }\n    /**\n     *  Pause the provider. If %%dropWhilePaused%%, any events that occur\n     *  while paused are dropped, otherwise all events will be emitted once\n     *  the provider is unpaused.\n     */\n  }, {\n    key: \"pause\",\n    value: function pause(dropWhilePaused) {\n      _classPrivateFieldSet(this, _lastBlockNumber, -1);\n      if (_classPrivateFieldGet(this, _pausedState) != null) {\n        if (_classPrivateFieldGet(this, _pausedState) == !!dropWhilePaused) {\n          return;\n        }\n        (0, index_js_6.assert)(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\n          operation: \"pause\"\n        });\n      }\n      this._forEachSubscriber(function (s) {\n        return s.pause(dropWhilePaused);\n      });\n      _classPrivateFieldSet(this, _pausedState, !!dropWhilePaused);\n      var _iterator8 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _timers).values()),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var timer = _step8.value;\n          // Clear the timer\n          if (timer.timer) {\n            clearTimeout(timer.timer);\n          }\n          // Remaining time needed for when we become unpaused\n          timer.time = getTime() - timer.time;\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n    /**\n     *  Resume the provider.\n     */\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (_classPrivateFieldGet(this, _pausedState) == null) {\n        return;\n      }\n      this._forEachSubscriber(function (s) {\n        return s.resume();\n      });\n      _classPrivateFieldSet(this, _pausedState, null);\n      var _iterator9 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _timers).values()),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var timer = _step9.value;\n          // Remaining time when we were paused\n          var timeout = timer.time;\n          if (timeout < 0) {\n            timeout = 0;\n          }\n          // Start time (in cause paused, so we con compute remaininf time)\n          timer.time = getTime();\n          // Start the timer\n          setTimeout(timer.func, timeout);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n  }]);\n  return AbstractProvider;\n}();\nfunction _perform2(_x50) {\n  return _perform4.apply(this, arguments);\n}\nfunction _perform4() {\n  _perform4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee41(req) {\n    var _this8 = this;\n    var timeout, tag, perform;\n    return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n      while (1) switch (_context41.prev = _context41.next) {\n        case 0:\n          timeout = _classPrivateFieldGet(this, _options).cacheTimeout; // Caching disabled\n          if (!(timeout < 0)) {\n            _context41.next = 5;\n            break;\n          }\n          _context41.next = 4;\n          return this._perform(req);\n        case 4:\n          return _context41.abrupt(\"return\", _context41.sent);\n        case 5:\n          // Create a tag\n          tag = getTag(req.method, req);\n          perform = _classPrivateFieldGet(this, _performCache).get(tag);\n          if (!perform) {\n            perform = this._perform(req);\n            _classPrivateFieldGet(this, _performCache).set(tag, perform);\n            setTimeout(function () {\n              if (_classPrivateFieldGet(_this8, _performCache).get(tag) === perform) {\n                _classPrivateFieldGet(_this8, _performCache).delete(tag);\n              }\n            }, timeout);\n          }\n          _context41.next = 10;\n          return perform;\n        case 10:\n          return _context41.abrupt(\"return\", _context41.sent);\n        case 11:\n        case \"end\":\n          return _context41.stop();\n      }\n    }, _callee41, this);\n  }));\n  return _perform4.apply(this, arguments);\n}\nfunction _call2(_x51, _x52, _x53) {\n  return _call4.apply(this, arguments);\n}\nfunction _call4() {\n  _call4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee42(tx, blockTag, attempt) {\n    var transaction, data, txSender, ccipArgs, ccipResult, _tx2, result;\n    return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n      while (1) switch (_context42.prev = _context42.next) {\n        case 0:\n          (0, index_js_6.assert)(attempt < MAX_CCIP_REDIRECTS, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\n            reason: \"TOO_MANY_REDIRECTS\",\n            transaction: Object.assign({}, tx, {\n              blockTag: blockTag,\n              enableCcipRead: true\n            })\n          });\n          // This came in as a PerformActionTransaction, so to/from are safe; we can cast\n          transaction = (0, provider_js_1.copyRequest)(tx);\n          _context42.prev = 2;\n          _context42.t0 = (0, index_js_6.hexlify);\n          _context42.next = 6;\n          return this._perform({\n            method: \"call\",\n            transaction: transaction,\n            blockTag: blockTag\n          });\n        case 6:\n          _context42.t1 = _context42.sent;\n          return _context42.abrupt(\"return\", (0, _context42.t0)(_context42.t1));\n        case 10:\n          _context42.prev = 10;\n          _context42.t2 = _context42[\"catch\"](2);\n          if (!(!this.disableCcipRead && (0, index_js_6.isCallException)(_context42.t2) && _context42.t2.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && (0, index_js_6.dataSlice)(_context42.t2.data, 0, 4) === \"0x556f1830\")) {\n            _context42.next = 37;\n            break;\n          }\n          data = _context42.t2.data;\n          _context42.next = 16;\n          return (0, index_js_1.resolveAddress)(transaction.to, this);\n        case 16:\n          txSender = _context42.sent;\n          try {\n            ccipArgs = parseOffchainLookup((0, index_js_6.dataSlice)(_context42.t2.data, 4));\n          } catch (error) {\n            (0, index_js_6.assert)(false, error.message, \"OFFCHAIN_FAULT\", {\n              reason: \"BAD_DATA\",\n              transaction: transaction,\n              info: {\n                data: data\n              }\n            });\n          }\n          // Check the sender of the OffchainLookup matches the transaction\n          (0, index_js_6.assert)(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\n            action: \"call\",\n            data: data,\n            reason: \"OffchainLookup\",\n            transaction: transaction,\n            invocation: null,\n            revert: {\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              name: \"OffchainLookup\",\n              args: ccipArgs.errorArgs\n            }\n          });\n          _context42.next = 21;\n          return this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\n        case 21:\n          ccipResult = _context42.sent;\n          (0, index_js_6.assert)(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\n            reason: \"FETCH_FAILED\",\n            transaction: transaction,\n            info: {\n              data: _context42.t2.data,\n              errorArgs: ccipArgs.errorArgs\n            }\n          });\n          _tx2 = {\n            to: txSender,\n            data: (0, index_js_6.concat)([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])\n          };\n          this.emit(\"debug\", {\n            action: \"sendCcipReadCall\",\n            transaction: _tx2\n          });\n          _context42.prev = 25;\n          _context42.next = 28;\n          return _classPrivateMethodGet(this, _call, _call2).call(this, _tx2, blockTag, attempt + 1);\n        case 28:\n          result = _context42.sent;\n          this.emit(\"debug\", {\n            action: \"receiveCcipReadCallResult\",\n            transaction: Object.assign({}, _tx2),\n            result: result\n          });\n          return _context42.abrupt(\"return\", result);\n        case 33:\n          _context42.prev = 33;\n          _context42.t3 = _context42[\"catch\"](25);\n          this.emit(\"debug\", {\n            action: \"receiveCcipReadCallError\",\n            transaction: Object.assign({}, _tx2),\n            error: _context42.t3\n          });\n          throw _context42.t3;\n        case 37:\n          throw _context42.t2;\n        case 38:\n        case \"end\":\n          return _context42.stop();\n      }\n    }, _callee42, this, [[2, 10], [25, 33]]);\n  }));\n  return _call4.apply(this, arguments);\n}\nfunction _checkNetwork2(_x54) {\n  return _checkNetwork3.apply(this, arguments);\n}\nfunction _checkNetwork3() {\n  _checkNetwork3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee43(promise) {\n    var _yield9, value;\n    return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n      while (1) switch (_context43.prev = _context43.next) {\n        case 0:\n          _context43.next = 2;\n          return (0, index_js_6.resolveProperties)({\n            network: this.getNetwork(),\n            value: promise\n          });\n        case 2:\n          _yield9 = _context43.sent;\n          value = _yield9.value;\n          return _context43.abrupt(\"return\", value);\n        case 5:\n        case \"end\":\n          return _context43.stop();\n      }\n    }, _callee43, this);\n  }));\n  return _checkNetwork3.apply(this, arguments);\n}\nfunction _getAccountValue2(_x55, _x56, _x57) {\n  return _getAccountValue3.apply(this, arguments);\n}\nfunction _getAccountValue3() {\n  _getAccountValue3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee44(request, _address, _blockTag) {\n    var address, blockTag, _yield$Promise$all3, _yield$Promise$all4;\n    return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n      while (1) switch (_context44.prev = _context44.next) {\n        case 0:\n          address = this._getAddress(_address);\n          blockTag = this._getBlockTag(_blockTag);\n          if (!(typeof address !== \"string\" || typeof blockTag !== \"string\")) {\n            _context44.next = 9;\n            break;\n          }\n          _context44.next = 5;\n          return Promise.all([address, blockTag]);\n        case 5:\n          _yield$Promise$all3 = _context44.sent;\n          _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2);\n          address = _yield$Promise$all4[0];\n          blockTag = _yield$Promise$all4[1];\n        case 9:\n          _context44.next = 11;\n          return _classPrivateMethodGet(this, _checkNetwork, _checkNetwork2).call(this, _classPrivateMethodGet(this, _perform, _perform2).call(this, Object.assign(request, {\n            address: address,\n            blockTag: blockTag\n          })));\n        case 11:\n          return _context44.abrupt(\"return\", _context44.sent);\n        case 12:\n        case \"end\":\n          return _context44.stop();\n      }\n    }, _callee44, this);\n  }));\n  return _getAccountValue3.apply(this, arguments);\n}\nfunction _getBlock2(_x58, _x59) {\n  return _getBlock4.apply(this, arguments);\n}\nfunction _getBlock4() {\n  _getBlock4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee45(block, includeTransactions) {\n    var blockTag;\n    return _regeneratorRuntime().wrap(function _callee45$(_context45) {\n      while (1) switch (_context45.prev = _context45.next) {\n        case 0:\n          if (!(0, index_js_6.isHexString)(block, 32)) {\n            _context45.next = 4;\n            break;\n          }\n          _context45.next = 3;\n          return _classPrivateMethodGet(this, _perform, _perform2).call(this, {\n            method: \"getBlock\",\n            blockHash: block,\n            includeTransactions: includeTransactions\n          });\n        case 3:\n          return _context45.abrupt(\"return\", _context45.sent);\n        case 4:\n          blockTag = this._getBlockTag(block);\n          if (!(typeof blockTag !== \"string\")) {\n            _context45.next = 9;\n            break;\n          }\n          _context45.next = 8;\n          return blockTag;\n        case 8:\n          blockTag = _context45.sent;\n        case 9:\n          _context45.next = 11;\n          return _classPrivateMethodGet(this, _perform, _perform2).call(this, {\n            method: \"getBlock\",\n            blockTag: blockTag,\n            includeTransactions: includeTransactions\n          });\n        case 11:\n          return _context45.abrupt(\"return\", _context45.sent);\n        case 12:\n        case \"end\":\n          return _context45.stop();\n      }\n    }, _callee45, this);\n  }));\n  return _getBlock4.apply(this, arguments);\n}\nfunction _hasSub2(_x60, _x61) {\n  return _hasSub3.apply(this, arguments);\n}\nfunction _hasSub3() {\n  _hasSub3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee46(event, emitArgs) {\n    var sub;\n    return _regeneratorRuntime().wrap(function _callee46$(_context46) {\n      while (1) switch (_context46.prev = _context46.next) {\n        case 0:\n          _context46.next = 2;\n          return getSubscription(event, this);\n        case 2:\n          sub = _context46.sent;\n          if (!(sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true)) {\n            _context46.next = 7;\n            break;\n          }\n          _context46.next = 6;\n          return getSubscription({\n            orphan: \"drop-log\",\n            log: emitArgs[0]\n          }, this);\n        case 6:\n          sub = _context46.sent;\n        case 7:\n          return _context46.abrupt(\"return\", _classPrivateFieldGet(this, _subs).get(sub.tag) || null);\n        case 8:\n        case \"end\":\n          return _context46.stop();\n      }\n    }, _callee46, this);\n  }));\n  return _hasSub3.apply(this, arguments);\n}\nfunction _getSub2(_x62) {\n  return _getSub3.apply(this, arguments);\n}\nfunction _getSub3() {\n  _getSub3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee47(event) {\n    var subscription, tag, sub, subscriber, addressableMap, nameMap;\n    return _regeneratorRuntime().wrap(function _callee47$(_context47) {\n      while (1) switch (_context47.prev = _context47.next) {\n        case 0:\n          _context47.next = 2;\n          return getSubscription(event, this);\n        case 2:\n          subscription = _context47.sent;\n          // Prevent tampering with our tag in any subclass' _getSubscriber\n          tag = subscription.tag;\n          sub = _classPrivateFieldGet(this, _subs).get(tag);\n          if (!sub) {\n            subscriber = this._getSubscriber(subscription);\n            addressableMap = new WeakMap();\n            nameMap = new Map();\n            sub = {\n              subscriber: subscriber,\n              tag: tag,\n              addressableMap: addressableMap,\n              nameMap: nameMap,\n              started: false,\n              listeners: []\n            };\n            _classPrivateFieldGet(this, _subs).set(tag, sub);\n          }\n          return _context47.abrupt(\"return\", sub);\n        case 7:\n        case \"end\":\n          return _context47.stop();\n      }\n    }, _callee47, this);\n  }));\n  return _getSub3.apply(this, arguments);\n}\nexports.AbstractProvider = AbstractProvider;\nfunction _parseString(result, start) {\n  try {\n    var bytes = _parseBytes(result, start);\n    if (bytes) {\n      return (0, index_js_6.toUtf8String)(bytes);\n    }\n  } catch (error) {}\n  return null;\n}\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n  try {\n    var offset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, start, start + 32));\n    var length = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, offset, offset + 32));\n    return (0, index_js_6.dataSlice)(result, offset + 32, offset + 32 + length);\n  } catch (error) {}\n  return null;\n}\nfunction numPad(value) {\n  var result = (0, index_js_6.toBeArray)(value);\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n  var padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n  var result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n}\nvar empty = new Uint8Array([]);\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n  var result = [];\n  var byteCount = 0;\n  // Add place-holders for pointers as we add items\n  for (var i = 0; i < datas.length; i++) {\n    result.push(empty);\n    byteCount += 32;\n  }\n  for (var _i = 0; _i < datas.length; _i++) {\n    var data = (0, index_js_6.getBytes)(datas[_i]);\n    // Update the bytes offset\n    result[_i] = numPad(byteCount);\n    // The length and padded value of data\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n  return (0, index_js_6.concat)(result);\n}\nvar zeros = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nfunction parseOffchainLookup(data) {\n  var result = {\n    sender: \"\",\n    urls: [],\n    calldata: \"\",\n    selector: \"\",\n    extraData: \"\",\n    errorArgs: []\n  };\n  (0, index_js_6.assert)((0, index_js_6.dataLength)(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\n    reason: \"insufficient OffchainLookup data\"\n  });\n  var sender = (0, index_js_6.dataSlice)(data, 0, 32);\n  (0, index_js_6.assert)((0, index_js_6.dataSlice)(sender, 0, 12) === (0, index_js_6.dataSlice)(zeros, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\n    reason: \"corrupt OffchainLookup sender\"\n  });\n  result.sender = (0, index_js_6.dataSlice)(sender, 12);\n  // Read the URLs from the response\n  try {\n    var urls = [];\n    var urlsOffset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, 32, 64));\n    var urlsLength = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, urlsOffset, urlsOffset + 32));\n    var urlsData = (0, index_js_6.dataSlice)(data, urlsOffset + 32);\n    for (var u = 0; u < urlsLength; u++) {\n      var url = _parseString(urlsData, u * 32);\n      if (url == null) {\n        throw new Error(\"abort\");\n      }\n      urls.push(url);\n    }\n    result.urls = urls;\n  } catch (error) {\n    (0, index_js_6.assert)(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup urls\"\n    });\n  }\n  // Get the CCIP calldata to forward\n  try {\n    var calldata = _parseBytes(data, 64);\n    if (calldata == null) {\n      throw new Error(\"abort\");\n    }\n    result.calldata = calldata;\n  } catch (error) {\n    (0, index_js_6.assert)(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup calldata\"\n    });\n  }\n  // Get the callbackSelector (bytes4)\n  (0, index_js_6.assert)((0, index_js_6.dataSlice)(data, 100, 128) === (0, index_js_6.dataSlice)(zeros, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\n    reason: \"corrupt OffchainLookup callbaackSelector\"\n  });\n  result.selector = (0, index_js_6.dataSlice)(data, 96, 100);\n  // Get the extra data to send back to the contract as context\n  try {\n    var extraData = _parseBytes(data, 128);\n    if (extraData == null) {\n      throw new Error(\"abort\");\n    }\n    result.extraData = extraData;\n  } catch (error) {\n    (0, index_js_6.assert)(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\n      reason: \"corrupt OffchainLookup extraData\"\n    });\n  }\n  result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map(function (k) {\n    return result[k];\n  });\n  return result;\n}","map":{"version":3,"names":["_slicedToArray","require","default","_createForOfIteratorHelper","_regeneratorRuntime","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateMethodGet","_classPrivateFieldGet","_classPrivateFieldSet","_asyncToGenerator","_classCallCheck","_createClass","_defineProperty","index_js_1","index_js_2","index_js_3","index_js_4","index_js_5","index_js_6","ens_resolver_js_1","format_js_1","network_js_1","provider_js_1","subscriber_polling_js_1","BN_2","BigInt","MAX_CCIP_REDIRECTS","isPromise","value","then","getTag","prefix","JSON","stringify","k","v","concat","toString","toLowerCase","Array","isArray","keys","Object","sort","reduce","accum","key","UnmanagedSubscriber","name","defineProperties","start","stop","pause","dropWhilePaused","resume","exports","copy","parse","concisify","items","from","Set","values","getSubscription","_x","_x2","_getSubscription","apply","arguments","mark","_callee40","_event","provider","hash","event","_event2","filter","addresses","promises","addAddress","wrap","_callee40$","_context40","prev","next","Error","topics","t0","abrupt","type","tag","isHexString","orphan","address","map","t","addr","push","_callee39","_callee39$","_context39","resolveAddress","t1","sent","call","forEach","length","Promise","all","a","assertArgument","getTime","Date","defaultOptions","cacheTimeout","_subs","WeakMap","_plugins","_pausedState","_destroyed","_networkPromise","_anyNetwork","_performCache","_lastBlockNumber","_nextTimer","_timers","_disableCcipRead","_options","_perform","WeakSet","_call","_checkNetwork","_getAccountValue","_getBlock","_hasSub","_getSub","AbstractProvider","_network","options","_this","writable","assign","network","Network","resolve","setTimeout","emit","Map","get","attachPlugin","plugin","set","connect","getPlugin","_ccipReadFetch","_callee","tx","calldata","urls","sender","data","errorMessages","i","url","href","request","errorMessage","resp","result","_callee$","_context","disableCcipRead","to","replace","FetchRequest","indexOf","body","action","index","send","bodyJson","message","assert","statusCode","reason","transaction","info","m","join","ccipReadFetch","_x3","_x4","_x5","_wrapBlock","Block","formatBlock","_wrapLog","Log","formatLog","_wrapTransactionReceipt","TransactionReceipt","formatTransactionReceipt","_wrapTransactionResponse","TransactionResponse","formatTransactionResponse","_detectNetwork","operation","_perform3","_callee2","req","_callee2$","_context2","method","_x6","_getBlockNumber","_callee3","blockNumber","_callee3$","_context3","getNumber","_perform2","getBlockNumber","_getAddress","_getBlockTag","blockTag","toQuantity","b","_getFilter","blockHash","undefined","_address","fromBlock","toBlock","_iterator","_step","s","n","done","err","e","f","_getTransactionRequest","_request","copyRequest","_callee4","_callee4$","_context4","_callee5","_callee5$","_context5","_callee6","_callee6$","_context6","_getNetwork","_callee7","_this2","detectNetwork","networkPromise","_yield$Promise$all","_yield$Promise$all2","expected","actual","_callee7$","_context7","error","clone","chainId","getNetwork","_getFeeData","_callee9","_this3","_yield","block","gasPrice","maxFeePerGas","maxPriorityFeePerGas","_callee9$","_context9","resolveProperties","getBlock","_callee8","_gasPrice","_callee8$","_context8","getBigInt","baseFeePerGas","FeeData","getFeeData","_estimateGas","_callee10","_tx","_callee10$","_context10","estimateGas","_x7","_call3","_callee11","_yield2","_callee11$","_context11","_checkNetwork2","_call2","enableCcipRead","_x8","_getBalance","_callee12","_callee12$","_context12","_getAccountValue2","getBalance","_x9","_x10","_getTransactionCount","_callee13","_callee13$","_context13","getTransactionCount","_x11","_x12","_getCode","_callee14","_callee14$","_context14","hexlify","getCode","_x13","_x14","_getStorage","_callee15","_position","position","_callee15$","_context15","getStorage","_x15","_x16","_x17","_broadcastTransaction","_callee16","signedTx","_yield3","_callee16$","_context16","signedTransaction","Transaction","replaceableTransaction","broadcastTransaction","_x18","_getBlock3","_callee17","prefetchTxs","_yield4","params","_callee17$","_context17","_getBlock2","_x19","_x20","_getTransaction","_callee18","_yield5","_callee18$","_context18","getTransaction","_x21","_getTransactionReceipt","_callee19","_yield6","_callee19$","_context19","effectiveGasPrice","getTransactionReceipt","_x22","_getTransactionResult","_callee20","_yield7","_callee20$","_context20","getTransactionResult","_x23","_getLogs","_callee21","_filter","_this4","_yield8","_callee21$","_context21","p","getLogs","_x24","_getProvider","_getResolver","_callee22","_callee22$","_context22","EnsResolver","fromName","getResolver","_x25","_getAvatar","_callee23","resolver","_callee23$","_context23","getAvatar","_x26","_resolveName","_callee24","_callee24$","_context24","getAddress","resolveName","_x27","_lookupAddress","_callee25","node","ensAddr","ensContract","resolverContract","check","_callee25$","_context25","namehash","substring","getEnsAddress","Contract","ZeroAddress","isError","lookupAddress","_x28","_waitForTransaction","_callee28","_confirms","timeout","_this5","confirms","_callee28$","_context28","_ref5","_callee27","reject","timer","listener","_callee27$","_context27","_ref6","_callee26","receipt","_callee26$","_context26","clearTimeout","console","log","once","_x34","off","makeError","_x32","_x33","waitForTransaction","_x29","_x30","_x31","_waitForBlock","_callee29","_callee29$","_context29","waitForBlock","_x35","_clearTimeout","timerId","delete","_setTimeout","_func","_this$nextTimer","_this$nextTimer2","_this6","func","paused","time","_forEachSubscriber","_iterator2","_step2","sub","subscriber","_getSubscriber","PollingBlockSubscriber","PollingEventSubscriber","PollingTransactionSubscriber","PollingOrphanSubscriber","_recoverSubscriber","oldSub","newSub","_iterator3","_step3","started","_on","_callee30","_callee30$","_context30","_getSub2","listeners","on","_x36","_x37","_once","_callee31","_callee31$","_context31","_x38","_x39","_emit","_callee32","_this7","_len","args","_key","count","_args32","_callee32$","_context32","_hasSub2","_ref7","payload","EventPayload","_x40","_listenerCount","_callee33","total","_iterator4","_step4","_callee33$","_context33","listenerCount","_x41","_listeners","_callee34","_iterator5","_step5","_listeners2","_callee34$","_context34","_ref8","_ref9","_x42","_off","_callee35","_callee35$","_context35","_ref10","splice","_x43","_x44","_removeAllListeners","_callee36","_yield$_classPrivateM","_iterator6","_step6","_step6$value","_tag","_step6$value$","_started","_subscriber","_callee36$","_context36","removeAllListeners","_x45","_addListener","_callee37","_callee37$","_context37","addListener","_x46","_x47","_removeListener","_callee38","_callee38$","_context38","removeListener","_x48","_x49","destroy","_iterator7","_step7","_iterator8","_step8","_iterator9","_step9","_x50","_perform4","_callee41","_this8","perform","_callee41$","_context41","_x51","_x52","_x53","_call4","_callee42","attempt","txSender","ccipArgs","ccipResult","_tx2","_callee42$","_context42","t2","isCallException","dataSlice","parseOffchainLookup","invocation","revert","signature","errorArgs","selector","encodeBytes","extraData","t3","_x54","_checkNetwork3","_callee43","promise","_yield9","_callee43$","_context43","_x55","_x56","_x57","_getAccountValue3","_callee44","_blockTag","_yield$Promise$all3","_yield$Promise$all4","_callee44$","_context44","_x58","_x59","_getBlock4","_callee45","includeTransactions","_callee45$","_context45","_x60","_x61","_hasSub3","_callee46","emitArgs","_callee46$","_context46","removed","_x62","_getSub3","_callee47","subscription","addressableMap","nameMap","_callee47$","_context47","_parseString","bytes","_parseBytes","toUtf8String","offset","numPad","toBeArray","padded","Uint8Array","bytesPad","Math","ceil","empty","datas","byteCount","getBytes","zeros","dataLength","urlsOffset","urlsLength","urlsData","u","split"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/providers/abstract-provider.ts"],"sourcesContent":["/**\n *  The available providers should suffice for most developers purposes,\n *  but the [[AbstractProvider]] class has many features which enable\n *  sub-classing it for specific purposes.\n *\n *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]\n */\n\n// @TODO\n// Event coalescence\n//   When we register an event with an async value (e.g. address is a Signer\n//   or ENS name), we need to add it immeidately for the Event API, but also\n//   need time to resolve the address. Upon resolving the address, we need to\n//   migrate the listener to the static event. We also need to maintain a map\n//   of Signer/ENS name to address so we can sync respond to listenerCount.\n\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { ZeroAddress } from \"../constants/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { namehash } from \"../hash/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport {\n    concat, dataLength, dataSlice, hexlify, isHexString,\n    getBigInt, getBytes, getNumber,\n    isCallException, isError, makeError, assert, assertArgument,\n    FetchRequest,\n    toBeArray, toQuantity,\n    defineProperties, EventPayload, resolveProperties,\n    toUtf8String\n} from \"../utils/index.js\";\n\nimport { EnsResolver } from \"./ens-resolver.js\";\nimport {\n    formatBlock, formatLog, formatTransactionReceipt, formatTransactionResponse\n} from \"./format.js\";\nimport { Network } from \"./network.js\";\nimport { copyRequest, Block, FeeData, Log, TransactionReceipt, TransactionResponse } from \"./provider.js\";\nimport {\n    PollingBlockSubscriber, PollingEventSubscriber, PollingOrphanSubscriber, PollingTransactionSubscriber\n} from \"./subscriber-polling.js\";\n\nimport type { Addressable, AddressLike } from \"../address/index.js\";\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\nimport type { Listener } from \"../utils/index.js\";\n\nimport type { Networkish } from \"./network.js\";\n//import type { MaxPriorityFeePlugin } from \"./plugins-network.js\";\nimport type {\n    BlockParams, LogParams, TransactionReceiptParams,\n    TransactionResponseParams\n} from \"./formatting.js\";\n\nimport type {\n    BlockTag, EventFilter, Filter, FilterByBlockHash, OrphanFilter,\n    PreparedTransactionRequest, Provider, ProviderEvent,\n    TransactionRequest\n} from \"./provider.js\";\n\ntype Timer = ReturnType<typeof setTimeout>;\n\n\n// Constants\nconst BN_2 = BigInt(2);\n\nconst MAX_CCIP_REDIRECTS = 10;\n\nfunction isPromise<T = any>(value: any): value is Promise<T> {\n    return (value && typeof(value.then) === \"function\");\n}\n\nfunction getTag(prefix: string, value: any): string {\n    return prefix + \":\" + JSON.stringify(value, (k, v) => {\n        if (v == null) { return \"null\"; }\n        if (typeof(v) === \"bigint\") { return `bigint:${ v.toString() }`}\n        if (typeof(v) === \"string\") { return v.toLowerCase(); }\n\n        // Sort object keys\n        if (typeof(v) === \"object\" && !Array.isArray(v)) {\n            const keys = Object.keys(v);\n            keys.sort();\n            return keys.reduce((accum, key) => {\n                accum[key] = v[key];\n                return accum;\n            }, <any>{ });\n        }\n\n        return v;\n    });\n}\n\n/**\n *  The types of additional event values that can be emitted for the\n *  ``\"debug\"`` event.\n */\nexport type DebugEventAbstractProvider = {\n    action: \"sendCcipReadFetchRequest\",\n    request: FetchRequest\n    index: number\n    urls: Array<string>\n} | {\n    action: \"receiveCcipReadFetchResult\",\n    request: FetchRequest,\n    result: any\n} | {\n    action: \"receiveCcipReadFetchError\",\n    request: FetchRequest,\n    result: any\n} | {\n    action: \"sendCcipReadCall\",\n    transaction: { to: string, data: string }\n} | {\n    action: \"receiveCcipReadCallResult\",\n    transaction: { to: string, data: string }\n    result: string\n} | {\n    action: \"receiveCcipReadCallError\",\n    transaction: { to: string, data: string }\n    error: Error\n};\n\n\n/**\n *  The value passed to the [[AbstractProvider-_getSubscriber]] method.\n *\n *  Only developers sub-classing [[AbstractProvider[[ will care about this,\n *  if they are modifying a low-level feature of how subscriptions operate.\n */\nexport type Subscription = {\n    type: \"block\" | \"close\" | \"debug\" | \"error\" | \"network\" | \"pending\",\n    tag: string\n} | {\n    type: \"transaction\",\n    tag: string,\n    hash: string\n} | {\n    type: \"event\",\n    tag: string,\n    filter: EventFilter\n} | {\n    type: \"orphan\",\n    tag: string,\n    filter: OrphanFilter\n};\n\n/**\n *  A **Subscriber** manages a subscription.\n *\n *  Only developers sub-classing [[AbstractProvider[[ will care about this,\n *  if they are modifying a low-level feature of how subscriptions operate.\n */\nexport interface Subscriber {\n    /**\n     *  Called initially when a subscriber is added the first time.\n     */\n    start(): void;\n\n    /**\n     *  Called when there are no more subscribers to the event.\n     */\n    stop(): void;\n\n    /**\n     *  Called when the subscription should pause.\n     *\n     *  If %%dropWhilePaused%%, events that occur while paused should not\n     *  be emitted [[resume]].\n     */\n    pause(dropWhilePaused?: boolean): void;\n\n    /**\n     *  Resume a paused subscriber.\n     */\n    resume(): void;\n\n    /**\n     *  The frequency (in ms) to poll for events, if polling is used by\n     *  the subscriber.\n     *\n     *  For non-polling subscribers, this must return ``undefined``.\n     */\n    pollingInterval?: number;\n}\n\n/**\n *  An **UnmanagedSubscriber** is useful for events which do not require\n *  any additional management, such as ``\"debug\"`` which only requires\n *  emit in synchronous event loop triggered calls.\n */\nexport class UnmanagedSubscriber implements Subscriber {\n    /**\n     *  The name fof the event.\n     */\n    name!: string;\n\n    /**\n     *  Create a new UnmanagedSubscriber with %%name%%.\n     */\n    constructor(name: string) { defineProperties<UnmanagedSubscriber>(this, { name }); }\n\n    start(): void { }\n    stop(): void { }\n\n    pause(dropWhilePaused?: boolean): void { }\n    resume(): void { }\n}\n\ntype Sub = {\n    tag: string;\n    nameMap: Map<string, string>\n    addressableMap: WeakMap<Addressable, string>;\n    listeners: Array<{ listener: Listener, once: boolean }>;\n    // @TODO: get rid of this, as it is (and has to be)\n    // tracked in subscriber\n    started: boolean;\n    subscriber: Subscriber;\n};\n\nfunction copy<T = any>(value: T): T {\n    return JSON.parse(JSON.stringify(value));\n}\n\nfunction concisify(items: Array<string>): Array<string> {\n    items = Array.from((new Set(items)).values())\n    items.sort();\n    return items;\n}\n\n\nasync function getSubscription(_event: ProviderEvent, provider: AbstractProvider): Promise<Subscription> {\n    if (_event == null) { throw new Error(\"invalid event\"); }\n\n    // Normalize topic array info an EventFilter\n    if (Array.isArray(_event)) { _event = { topics: _event }; }\n\n    if (typeof(_event) === \"string\") {\n        switch (_event) {\n            case \"block\": case \"pending\": case \"debug\": case \"error\": case \"network\": {\n                return { type: _event, tag: _event };\n            }\n        }\n    }\n\n    if (isHexString(_event, 32)) {\n        const hash = _event.toLowerCase();\n        return { type: \"transaction\", tag: getTag(\"tx\", { hash }), hash };\n    }\n\n    if ((<any>_event).orphan) {\n        const event = <OrphanFilter>_event;\n        // @TODO: Should lowercase and whatnot things here instead of copy...\n        return { type: \"orphan\", tag: getTag(\"orphan\", event), filter: copy(event) };\n    }\n\n    if (((<any>_event).address || (<any>_event).topics)) {\n        const event = <EventFilter>_event;\n\n        const filter: any = {\n            topics: ((event.topics || []).map((t) => {\n                if (t == null) { return null; }\n                if (Array.isArray(t)) {\n                    return concisify(t.map((t) => t.toLowerCase()));\n                }\n                return t.toLowerCase();\n            }))\n        };\n\n        if (event.address) {\n            const addresses: Array<string> = [ ];\n            const promises: Array<Promise<void>> = [ ];\n\n            const addAddress = (addr: AddressLike) => {\n                if (isHexString(addr)) {\n                    addresses.push(addr);\n                } else {\n                    promises.push((async () => {\n                        addresses.push(await resolveAddress(addr, provider));\n                    })());\n                }\n            }\n\n            if (Array.isArray(event.address)) {\n                event.address.forEach(addAddress);\n            } else {\n                addAddress(event.address);\n            }\n            if (promises.length) { await Promise.all(promises); }\n            filter.address = concisify(addresses.map((a) => a.toLowerCase()));\n        }\n\n        return { filter, tag: getTag(\"event\", filter), type: \"event\" };\n    }\n\n    assertArgument(false, \"unknown ProviderEvent\", \"event\", _event);\n}\n\nfunction getTime(): number { return (new Date()).getTime(); }\n\n/**\n *  An **AbstractPlugin** is used to provide additional internal services\n *  to an [[AbstractProvider]] without adding backwards-incompatible changes\n *  to method signatures or other internal and complex logic.\n */\nexport interface AbstractProviderPlugin {\n    /**\n     *  The reverse domain notation of the plugin.\n     */\n    readonly name: string;\n\n    /**\n     *  Creates a new instance of the plugin, connected to %%provider%%.\n     */\n    connect(provider: AbstractProvider): AbstractProviderPlugin;\n}\n\n/**\n *  A normalized filter used for [[PerformActionRequest]] objects.\n */\nexport type PerformActionFilter = {\n    address?: string | Array<string>;\n    topics?: Array<null | string | Array<string>>;\n    fromBlock?: BlockTag;\n    toBlock?: BlockTag;\n} | {\n    address?: string | Array<string>;\n    topics?: Array<null | string | Array<string>>;\n    blockHash?: string;\n};\n\n/**\n *  A normalized transactions used for [[PerformActionRequest]] objects.\n */\nexport interface PerformActionTransaction extends PreparedTransactionRequest {\n    /**\n     *  The ``to`` address of the transaction.\n     */\n    to?: string;\n\n    /**\n     *  The sender of the transaction.\n     */\n    from?: string;\n}\n\n/**\n *  The [[AbstractProvider]] methods will normalize all values and pass this\n *  type to [[AbstractProvider-_perform]].\n */\nexport type PerformActionRequest = {\n    method: \"broadcastTransaction\",\n    signedTransaction: string\n} | {\n    method: \"call\",\n    transaction: PerformActionTransaction, blockTag: BlockTag\n} | {\n    method: \"chainId\"\n} | {\n    method: \"estimateGas\",\n    transaction: PerformActionTransaction\n} | {\n    method: \"getBalance\",\n    address: string, blockTag: BlockTag\n} | {\n    method: \"getBlock\",\n    blockTag: BlockTag, includeTransactions: boolean\n} | {\n    method: \"getBlock\",\n    blockHash: string, includeTransactions: boolean\n} | {\n    method: \"getBlockNumber\"\n} | {\n    method: \"getCode\",\n    address: string, blockTag: BlockTag\n} | {\n    method: \"getGasPrice\"\n} | {\n    method: \"getLogs\",\n    filter: PerformActionFilter\n} | {\n    method: \"getStorage\",\n    address: string, position: bigint, blockTag: BlockTag\n} | {\n    method: \"getTransaction\",\n    hash: string\n} | {\n    method: \"getTransactionCount\",\n    address: string, blockTag: BlockTag\n} | {\n    method: \"getTransactionReceipt\",\n    hash: string\n} | {\n    method: \"getTransactionResult\",\n    hash: string\n};\n\ntype _PerformAccountRequest = {\n    method: \"getBalance\" | \"getTransactionCount\" | \"getCode\"\n} | {\n    method: \"getStorage\", position: bigint\n}\n\n/**\n *  Options for configuring some internal aspects of an [[AbstractProvider]].\n *\n *  **``cacheTimeout``** - how long to cache a low-level ``_perform``\n *  for, based on input parameters. This reduces the number of calls\n *  to getChainId and getBlockNumber, but may break test chains which\n *  can perform operations (internally) synchronously. Use ``-1`` to\n *  disable, ``0`` will only buffer within the same event loop and\n *  any other value is in ms. (default: ``250``)\n */\nexport type AbstractProviderOptions = {\n    cacheTimeout?: number;\n};\n\nconst defaultOptions = {\n    cacheTimeout: 250\n};\n\ntype CcipArgs = {\n    sender: string;\n    urls: Array<string>;\n    calldata: string;\n    selector: string;\n    extraData: string;\n    errorArgs: Array<any>\n};\n\n/**\n *  An **AbstractProvider** provides a base class for other sub-classes to\n *  implement the [[Provider]] API by normalizing input arguments and\n *  formatting output results as well as tracking events for consistent\n *  behaviour on an eventually-consistent network.\n */\nexport class AbstractProvider implements Provider {\n\n    #subs: Map<string, Sub>;\n    #plugins: Map<string, AbstractProviderPlugin>;\n\n    // null=unpaused, true=paused+dropWhilePaused, false=paused\n    #pausedState: null | boolean;\n\n    #destroyed: boolean;\n\n    #networkPromise: null | Promise<Network>;\n    readonly #anyNetwork: boolean;\n\n    #performCache: Map<string, Promise<any>>;\n\n    // The most recent block number if running an event or -1 if no \"block\" event\n    #lastBlockNumber: number;\n\n    #nextTimer: number;\n    #timers: Map<number, { timer: null | Timer, func: () => void, time: number }>;\n\n    #disableCcipRead: boolean;\n\n    #options: Required<AbstractProviderOptions>;\n\n    /**\n     *  Create a new **AbstractProvider** connected to %%network%%, or\n     *  use the various network detection capabilities to discover the\n     *  [[Network]] if necessary.\n     */\n    constructor(_network?: \"any\" | Networkish, options?: AbstractProviderOptions) {\n        this.#options = Object.assign({ }, defaultOptions, options || { });\n\n        if (_network === \"any\") {\n            this.#anyNetwork = true;\n            this.#networkPromise = null;\n        } else if (_network) {\n            const network = Network.from(_network);\n            this.#anyNetwork = false;\n            this.#networkPromise = Promise.resolve(network);\n            setTimeout(() => { this.emit(\"network\", network, null); }, 0);\n        } else {\n            this.#anyNetwork = false;\n            this.#networkPromise = null;\n        }\n\n        this.#lastBlockNumber = -1;\n\n        this.#performCache = new Map();\n\n        this.#subs = new Map();\n        this.#plugins = new Map();\n        this.#pausedState = null;\n\n        this.#destroyed = false;\n\n        this.#nextTimer = 1;\n        this.#timers = new Map();\n\n        this.#disableCcipRead = false;\n    }\n\n    /**\n     *  Returns ``this``, to allow an **AbstractProvider** to implement\n     *  the [[ContractRunner]] interface.\n     */\n    get provider(): this { return this; }\n\n    /**\n     *  Returns all the registered plug-ins.\n     */\n    get plugins(): Array<AbstractProviderPlugin> {\n        return Array.from(this.#plugins.values());\n    }\n\n    /**\n     *  Attach a new plug-in.\n     */\n    attachPlugin(plugin: AbstractProviderPlugin): this {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${ plugin.name } `);\n        }\n        this.#plugins.set(plugin.name,  plugin.connect(this));\n        return this;\n    }\n\n    /**\n     *  Get a plugin by name.\n     */\n    getPlugin<T extends AbstractProviderPlugin = AbstractProviderPlugin>(name: string): null | T {\n        return <T>(this.#plugins.get(name)) || null;\n    }\n\n    /**\n     *  Prevent any CCIP-read operation, regardless of whether requested\n     *  in a [[call]] using ``enableCcipRead``.\n     */\n    get disableCcipRead(): boolean { return this.#disableCcipRead; }\n    set disableCcipRead(value: boolean) { this.#disableCcipRead = !!value; }\n\n    // Shares multiple identical requests made during the same 250ms\n    async #perform<T = any>(req: PerformActionRequest): Promise<T> {\n        const timeout = this.#options.cacheTimeout;\n\n        // Caching disabled\n        if (timeout < 0) { return await this._perform(req); }\n\n        // Create a tag\n        const tag = getTag(req.method, req);\n\n        let perform = this.#performCache.get(tag);\n        if (!perform) {\n            perform = this._perform(req);\n\n            this.#performCache.set(tag, perform);\n\n            setTimeout(() => {\n                if (this.#performCache.get(tag) === perform) {\n                    this.#performCache.delete(tag);\n                }\n            }, timeout);\n        }\n\n        return await perform;\n    }\n\n    /**\n     *  Resolves to the data for executing the CCIP-read operations.\n     */\n    async ccipReadFetch(tx: PerformActionTransaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0 || tx.to == null) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            //const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n            //    value.status = response.statusCode;\n            //    return value;\n            //});\n            const request = new FetchRequest(href);\n            if (url.indexOf(\"{data}\") === -1) {\n                request.body = { data, sender };\n            }\n\n            this.emit(\"debug\", { action: \"sendCcipReadFetchRequest\", request, index: i, urls });\n\n            let errorMessage = \"unknown error\";\n\n            const resp = await request.send();\n            try {\n                 const result = resp.bodyJson;\n                 if (result.data) {\n                     this.emit(\"debug\", { action: \"receiveCcipReadFetchResult\", request, result });\n                     return result.data;\n                 }\n                 if (result.message) { errorMessage = result.message; }\n                 this.emit(\"debug\", { action: \"receiveCcipReadFetchError\", request, result });\n            } catch (error) { }\n\n            // 4xx indicates the result is not present; stop\n            assert(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${ errorMessage }`,\n                \"OFFCHAIN_FAULT\", { reason: \"404_MISSING_RESOURCE\", transaction: tx, info: { url, errorMessage } });\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        assert(false, `error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, \"OFFCHAIN_FAULT\", {\n            reason: \"500_SERVER_ERROR\",\n            transaction: tx, info: { urls, errorMessages }\n        });\n    }\n\n    /**\n     *  Provides the opportunity for a sub-class to wrap a block before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Block]].\n     */\n    _wrapBlock(value: BlockParams, network: Network): Block {\n        return new Block(formatBlock(value), this);\n    }\n\n    /**\n     *  Provides the opportunity for a sub-class to wrap a log before\n     *  returning it, to add additional properties or an alternate\n     *  sub-class of [[Log]].\n     */\n    _wrapLog(value: LogParams, network: Network): Log {\n        return new Log(formatLog(value), this);\n    }\n\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  receipt before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionReceipt]].\n     */\n    _wrapTransactionReceipt(value: TransactionReceiptParams, network: Network): TransactionReceipt {\n        return new TransactionReceipt(formatTransactionReceipt(value), this);\n    }\n\n    /**\n     *  Provides the opportunity for a sub-class to wrap a transaction\n     *  response before returning it, to add additional properties or an\n     *  alternate sub-class of [[TransactionResponse]].\n     */\n    _wrapTransactionResponse(tx: TransactionResponseParams, network: Network): TransactionResponse {\n        return new TransactionResponse(formatTransactionResponse(tx), this);\n    }\n\n    /**\n     *  Resolves to the Network, forcing a network detection using whatever\n     *  technique the sub-class requires.\n     *\n     *  Sub-classes **must** override this.\n     */\n    _detectNetwork(): Promise<Network> {\n        assert(false, \"sub-classes must implement this\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_detectNetwork\"\n        });\n    }\n\n    /**\n     *  Sub-classes should use this to perform all built-in operations. All\n     *  methods sanitizes and normalizes the values passed into this.\n     *\n     *  Sub-classes **must** override this.\n     */\n    async _perform<T = any>(req: PerformActionRequest): Promise<T> {\n        assert(false, `unsupported method: ${ req.method }`, \"UNSUPPORTED_OPERATION\", {\n            operation: req.method,\n            info: req\n        });\n    }\n\n    // State\n\n    async getBlockNumber(): Promise<number> {\n        const blockNumber = getNumber(await this.#perform({ method: \"getBlockNumber\" }), \"%response\");\n        if (this.#lastBlockNumber >= 0) { this.#lastBlockNumber = blockNumber; }\n        return blockNumber;\n    }\n\n    /**\n     *  Returns or resolves to the address for %%address%%, resolving ENS\n     *  names and [[Addressable]] objects and returning if already an\n     *  address.\n     */\n    _getAddress(address: AddressLike): string | Promise<string> {\n        return resolveAddress(address, this);\n    }\n\n    /**\n     *  Returns or resolves to a valid block tag for %%blockTag%%, resolving\n     *  negative values and returning if already a valid block tag.\n     */\n    _getBlockTag(blockTag?: BlockTag): string | Promise<string> {\n        if (blockTag == null) { return \"latest\"; }\n\n        switch (blockTag) {\n            case \"earliest\":\n                return \"0x0\";\n            case \"latest\": case \"pending\": case \"safe\": case \"finalized\":\n                return blockTag;\n        }\n\n\n        if (isHexString(blockTag)) {\n            if (isHexString(blockTag, 32)) { return blockTag; }\n            return toQuantity(blockTag);\n        }\n\n        if (typeof(blockTag) === \"bigint\") {\n            blockTag = getNumber(blockTag, \"blockTag\");\n        }\n\n        if (typeof(blockTag) === \"number\") {\n            if (blockTag >= 0) { return toQuantity(blockTag); }\n            if (this.#lastBlockNumber >= 0) { return toQuantity(this.#lastBlockNumber + blockTag); }\n            return this.getBlockNumber().then((b) => toQuantity(b + <number>blockTag));\n        }\n\n        assertArgument(false, \"invalid blockTag\", \"blockTag\", blockTag);\n    }\n\n    /**\n     *  Returns or resolves to a filter for %%filter%%, resolving any ENS\n     *  names or [[Addressable]] object and returning if already a valid\n     *  filter.\n     */\n    _getFilter(filter: Filter | FilterByBlockHash): PerformActionFilter | Promise<PerformActionFilter> {\n\n        // Create a canonical representation of the topics\n        const topics = (filter.topics || [ ]).map((t) => {\n            if (t == null) { return null; }\n            if (Array.isArray(t)) {\n                return concisify(t.map((t) => t.toLowerCase()));\n            }\n            return t.toLowerCase();\n        });\n\n        const blockHash = (\"blockHash\" in filter) ? filter.blockHash: undefined;\n\n        const resolve = (_address: Array<string>, fromBlock?: string, toBlock?: string) => {\n            let address: undefined | string | Array<string> = undefined;\n            switch (_address.length) {\n                case 0: break;\n                case 1:\n                    address = _address[0];\n                    break;\n                default:\n                    _address.sort();\n                    address = _address;\n            }\n\n            if (blockHash) {\n                if (fromBlock != null || toBlock != null) {\n                    throw new Error(\"invalid filter\");\n                }\n            }\n\n            const filter = <any>{ };\n            if (address) { filter.address = address; }\n            if (topics.length) { filter.topics = topics; }\n            if (fromBlock) { filter.fromBlock = fromBlock; }\n            if (toBlock) { filter.toBlock = toBlock; }\n            if (blockHash) { filter.blockHash = blockHash; }\n\n            return filter;\n        };\n\n        // Addresses could be async (ENS names or Addressables)\n        let address: Array<string | Promise<string>> = [ ];\n        if (filter.address) {\n            if (Array.isArray(filter.address)) {\n                for (const addr of filter.address) { address.push(this._getAddress(addr)); }\n            } else {\n                address.push(this._getAddress(filter.address));\n            }\n        }\n\n        let fromBlock: undefined | string | Promise<string> = undefined;\n        if (\"fromBlock\" in filter) { fromBlock = this._getBlockTag(filter.fromBlock); }\n\n        let toBlock: undefined | string | Promise<string> = undefined;\n        if (\"toBlock\" in filter) { toBlock = this._getBlockTag(filter.toBlock); }\n\n        if (address.filter((a) => (typeof(a) !== \"string\")).length ||\n            (fromBlock != null && typeof(fromBlock) !== \"string\") ||\n            (toBlock != null && typeof(toBlock) !== \"string\")) {\n\n            return Promise.all([ Promise.all(address), fromBlock, toBlock ]).then((result) => {\n                return resolve(result[0], result[1], result[2]);\n            });\n        }\n\n        return resolve(<Array<string>>address, fromBlock, toBlock);\n    }\n\n    /**\n     *  Returns or resovles to a transaction for %%request%%, resolving\n     *  any ENS names or [[Addressable]] and returning if already a valid\n     *  transaction.\n     */\n    _getTransactionRequest(_request: TransactionRequest): PerformActionTransaction | Promise<PerformActionTransaction> {\n        const request = <PerformActionTransaction>copyRequest(_request);\n\n        const promises: Array<Promise<void>> = [ ];\n        [ \"to\", \"from\" ].forEach((key) => {\n            if ((<any>request)[key] == null) { return; }\n\n            const addr = resolveAddress((<any>request)[key]);\n            if (isPromise(addr)) {\n                promises.push((async function() { (<any>request)[key] = await addr; })());\n            } else {\n                (<any>request)[key] = addr;\n            }\n        });\n\n        if (request.blockTag != null) {\n            const blockTag = this._getBlockTag(request.blockTag);\n            if (isPromise(blockTag)) {\n                promises.push((async function() { request.blockTag = await blockTag; })());\n            } else {\n                request.blockTag = blockTag;\n            }\n        }\n\n        if (promises.length) {\n            return (async function() {\n                await Promise.all(promises);\n                return request;\n            })();\n        }\n\n        return request;\n    }\n\n    async getNetwork(): Promise<Network> {\n\n        // No explicit network was set and this is our first time\n        if (this.#networkPromise == null) {\n\n            // Detect the current network (shared with all calls)\n            const detectNetwork = this._detectNetwork().then((network) => {\n                this.emit(\"network\", network, null);\n                return network;\n            }, (error) => {\n                // Reset the networkPromise on failure, so we will try again\n                if (this.#networkPromise === detectNetwork) {\n                    this.#networkPromise = null;\n                }\n                throw error;\n            });\n\n            this.#networkPromise = detectNetwork;\n            return (await detectNetwork).clone();\n        }\n\n        const networkPromise = this.#networkPromise;\n\n        const [ expected, actual ] = await Promise.all([\n            networkPromise,          // Possibly an explicit Network\n            this._detectNetwork()    // The actual connected network\n        ]);\n\n        if (expected.chainId !== actual.chainId) {\n            if (this.#anyNetwork) {\n                // The \"any\" network can change, so notify listeners\n                this.emit(\"network\", actual, expected);\n\n                // Update the network if something else hasn't already changed it\n                if (this.#networkPromise === networkPromise) {\n                    this.#networkPromise = Promise.resolve(actual);\n                }\n            } else {\n                // Otherwise, we do not allow changes to the underlying network\n                assert(false, `network changed: ${ expected.chainId } => ${ actual.chainId } `, \"NETWORK_ERROR\", {\n                    event: \"changed\"\n                });\n            }\n        }\n\n        return expected.clone();\n    }\n\n    async getFeeData(): Promise<FeeData> {\n        const { block, gasPrice } = await resolveProperties({\n            block: this.getBlock(\"latest\"),\n            gasPrice: ((async () => {\n                try {\n                    const gasPrice = await this.#perform({ method: \"getGasPrice\" });\n                    return getBigInt(gasPrice, \"%response\");\n                } catch (error) { }\n                return null\n            })())\n        });\n\n        let maxFeePerGas = null, maxPriorityFeePerGas = null;\n\n        if (block && block.baseFeePerGas) {\n            // We may want to compute this more accurately in the future,\n            // using the formula \"check if the base fee is correct\".\n            // See: https://eips.ethereum.org/EIPS/eip-1559\n            maxPriorityFeePerGas = BigInt(\"1000000000\");\n\n            // Allow a network to override their maximum priority fee per gas\n            //const priorityFeePlugin = (await this.getNetwork()).getPlugin<MaxPriorityFeePlugin>(\"org.ethers.plugins.max-priority-fee\");\n            //if (priorityFeePlugin) {\n            //    maxPriorityFeePerGas = await priorityFeePlugin.getPriorityFee(this);\n            //}\n            maxFeePerGas = (block.baseFeePerGas * BN_2) + maxPriorityFeePerGas;\n        }\n\n        return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);\n    }\n\n\n    async estimateGas(_tx: TransactionRequest): Promise<bigint> {\n        let tx = this._getTransactionRequest(_tx);\n        if (isPromise(tx)) { tx = await tx; }\n        return getBigInt(await this.#perform({\n            method: \"estimateGas\", transaction: tx\n        }), \"%response\");\n    }\n\n    async #call(tx: PerformActionTransaction, blockTag: string, attempt: number): Promise<string> {\n        assert (attempt < MAX_CCIP_REDIRECTS, \"CCIP read exceeded maximum redirections\", \"OFFCHAIN_FAULT\", {\n             reason: \"TOO_MANY_REDIRECTS\",\n             transaction: Object.assign({ }, tx, { blockTag, enableCcipRead: true })\n         });\n\n         // This came in as a PerformActionTransaction, so to/from are safe; we can cast\n         const transaction = <PerformActionTransaction>copyRequest(tx);\n\n         try {\n             return hexlify(await this._perform({ method: \"call\", transaction, blockTag }));\n\n         } catch (error: any) {\n             // CCIP Read OffchainLookup\n             if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === \"latest\" && transaction.to != null && dataSlice(error.data, 0, 4) === \"0x556f1830\") {\n                 const data = error.data;\n\n                 const txSender = await resolveAddress(transaction.to, this);\n\n                 // Parse the CCIP Read Arguments\n                 let ccipArgs: CcipArgs;\n                 try {\n                     ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));\n                 } catch (error: any) {\n                     assert(false, error.message, \"OFFCHAIN_FAULT\", {\n                         reason: \"BAD_DATA\", transaction, info: { data } });\n                 }\n\n                 // Check the sender of the OffchainLookup matches the transaction\n                 assert(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(),\n                     \"CCIP Read sender mismatch\", \"CALL_EXCEPTION\", {\n                         action: \"call\",\n                         data,\n                         reason: \"OffchainLookup\",\n                         transaction: <any>transaction, // @TODO: populate data?\n                         invocation: null,\n                         revert: {\n                             signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                             name: \"OffchainLookup\",\n                             args: ccipArgs.errorArgs\n                         }\n                     });\n\n                 const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);\n                 assert(ccipResult != null, \"CCIP Read failed to fetch data\", \"OFFCHAIN_FAULT\", {\n                     reason: \"FETCH_FAILED\", transaction, info: { data: error.data, errorArgs: ccipArgs.errorArgs } });\n\n                 const tx = {\n                     to: txSender,\n                     data: concat([ ccipArgs.selector, encodeBytes([ ccipResult, ccipArgs.extraData ]) ])\n                 };\n\n                 this.emit(\"debug\", { action: \"sendCcipReadCall\", transaction: tx });\n                 try {\n                     const result = await this.#call(tx, blockTag, attempt + 1);\n                     this.emit(\"debug\", { action: \"receiveCcipReadCallResult\", transaction: Object.assign({ }, tx), result });\n                     return result;\n                 } catch (error) {\n                     this.emit(\"debug\", { action: \"receiveCcipReadCallError\", transaction: Object.assign({ }, tx), error });\n                     throw error;\n                 }\n             }\n\n             throw error;\n         }\n    }\n\n    async #checkNetwork<T>(promise: Promise<T>): Promise<T> {\n        const { value } = await resolveProperties({\n            network: this.getNetwork(),\n            value: promise\n        });\n        return value;\n    }\n\n    async call(_tx: TransactionRequest): Promise<string> {\n        const { tx, blockTag } = await resolveProperties({\n            tx: this._getTransactionRequest(_tx),\n            blockTag: this._getBlockTag(_tx.blockTag)\n        });\n\n        return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0: -1));\n    }\n\n    // Account\n    async #getAccountValue(request: _PerformAccountRequest, _address: AddressLike, _blockTag?: BlockTag): Promise<any> {\n        let address: string | Promise<string> = this._getAddress(_address);\n        let blockTag: string | Promise<string> = this._getBlockTag(_blockTag);\n\n        if (typeof(address) !== \"string\" || typeof(blockTag) !== \"string\") {\n            [ address, blockTag ] = await Promise.all([ address, blockTag ]);\n        }\n\n        return await this.#checkNetwork(this.#perform(Object.assign(request, { address, blockTag })));\n    }\n\n    async getBalance(address: AddressLike, blockTag?: BlockTag): Promise<bigint> {\n        return getBigInt(await this.#getAccountValue({ method: \"getBalance\" }, address, blockTag), \"%response\");\n    }\n\n    async getTransactionCount(address: AddressLike, blockTag?: BlockTag): Promise<number> {\n        return getNumber(await this.#getAccountValue({ method: \"getTransactionCount\" }, address, blockTag), \"%response\");\n    }\n\n    async getCode(address: AddressLike, blockTag?: BlockTag): Promise<string> {\n        return hexlify(await this.#getAccountValue({ method: \"getCode\" }, address, blockTag));\n    }\n\n    async getStorage(address: AddressLike, _position: BigNumberish, blockTag?: BlockTag): Promise<string> {\n        const position = getBigInt(_position, \"position\");\n        return hexlify(await this.#getAccountValue({ method: \"getStorage\", position }, address, blockTag));\n    }\n\n    // Write\n    async broadcastTransaction(signedTx: string): Promise<TransactionResponse> {\n        const { blockNumber, hash, network } = await resolveProperties({\n             blockNumber: this.getBlockNumber(),\n             hash: this._perform({\n                 method: \"broadcastTransaction\",\n                 signedTransaction: signedTx\n             }),\n             network: this.getNetwork()\n        });\n\n        const tx = Transaction.from(signedTx);\n        if (tx.hash !== hash) {\n            throw new Error(\"@TODO: the returned hash did not match\");\n        }\n\n        return this._wrapTransactionResponse(<any>tx, network).replaceableTransaction(blockNumber);\n    }\n\n    async #getBlock(block: BlockTag | string, includeTransactions: boolean): Promise<any> {\n        // @TODO: Add CustomBlockPlugin check\n\n        if (isHexString(block, 32)) {\n            return await this.#perform({\n                method: \"getBlock\", blockHash: block, includeTransactions\n            });\n        }\n\n        let blockTag = this._getBlockTag(block);\n        if (typeof(blockTag) !== \"string\") { blockTag = await blockTag; }\n\n        return await this.#perform({\n            method: \"getBlock\", blockTag, includeTransactions\n        });\n    }\n\n    // Queries\n    async getBlock(block: BlockTag | string, prefetchTxs?: boolean): Promise<null | Block> {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#getBlock(block, !!prefetchTxs)\n        });\n        if (params == null) { return null; }\n\n        return this._wrapBlock(params, network);\n    }\n\n    async getTransaction(hash: string): Promise<null | TransactionResponse> {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransaction\", hash })\n        });\n        if (params == null) { return null; }\n\n        return this._wrapTransactionResponse(params, network);\n    }\n\n    async getTransactionReceipt(hash: string): Promise<null | TransactionReceipt> {\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform({ method: \"getTransactionReceipt\", hash })\n        });\n        if (params == null) { return null; }\n\n        // Some backends did not backfill the effectiveGasPrice into old transactions\n        // in the receipt, so we look it up manually and inject it.\n        if (params.gasPrice == null && params.effectiveGasPrice == null) {\n            const tx = await this.#perform({ method: \"getTransaction\", hash });\n            if (tx == null) { throw new Error(\"report this; could not find tx or effectiveGasPrice\"); }\n            params.effectiveGasPrice = tx.gasPrice;\n        }\n\n        return this._wrapTransactionReceipt(params, network);\n    }\n\n    async getTransactionResult(hash: string): Promise<null | string> {\n        const { result } = await resolveProperties({\n            network: this.getNetwork(),\n            result: this.#perform({ method: \"getTransactionResult\", hash })\n        });\n        if (result == null) { return null; }\n        return hexlify(result);\n    }\n\n    // Bloom-filter Queries\n    async getLogs(_filter: Filter | FilterByBlockHash): Promise<Array<Log>> {\n        let filter = this._getFilter(_filter);\n        if (isPromise(filter)) { filter = await filter; }\n\n        const { network, params } = await resolveProperties({\n            network: this.getNetwork(),\n            params: this.#perform<Array<LogParams>>({ method: \"getLogs\", filter })\n        });\n\n        return params.map((p) => this._wrapLog(p, network));\n    }\n\n    // ENS\n    _getProvider(chainId: number): AbstractProvider {\n        assert(false, \"provider cannot connect to target network\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_getProvider()\"\n        });\n    }\n\n    async getResolver(name: string): Promise<null | EnsResolver> {\n        return await EnsResolver.fromName(this, name);\n    }\n\n    async getAvatar(name: string): Promise<null | string> {\n        const resolver = await this.getResolver(name);\n        if (resolver) { return await resolver.getAvatar(); }\n        return null;\n    }\n\n    async resolveName(name: string): Promise<null | string>{\n        const resolver = await this.getResolver(name);\n        if (resolver) { return await resolver.getAddress(); }\n        return null;\n    }\n\n    async lookupAddress(address: string): Promise<null | string> {\n        address = getAddress(address);\n        const node = namehash(address.substring(2).toLowerCase() + \".addr.reverse\");\n\n        try {\n\n            const ensAddr = await EnsResolver.getEnsAddress(this);\n            const ensContract = new Contract(ensAddr, [\n                \"function resolver(bytes32) view returns (address)\"\n            ], this);\n\n            const resolver = await ensContract.resolver(node);\n            if (resolver == null || resolver === ZeroAddress) { return null; }\n\n            const resolverContract = new Contract(resolver, [\n                \"function name(bytes32) view returns (string)\"\n            ], this);\n            const name = await resolverContract.name(node);\n\n            // Failed forward resolution\n            const check = await this.resolveName(name);\n            if (check !== address) { return null; }\n\n            return name;\n\n        } catch (error) {\n            // No data was returned from the resolver\n            if (isError(error, \"BAD_DATA\") && error.value === \"0x\") {\n                return null;\n            }\n\n            // Something reerted\n            if (isError(error, \"CALL_EXCEPTION\")) { return null; }\n\n            throw error;\n        }\n\n        return null;\n    }\n\n    async waitForTransaction(hash: string, _confirms?: null | number, timeout?: null | number): Promise<null | TransactionReceipt> {\n        const confirms = (_confirms != null) ? _confirms: 1;\n        if (confirms === 0) { return this.getTransactionReceipt(hash); }\n\n        return new Promise(async (resolve, reject) => {\n            let timer: null | Timer = null;\n\n            const listener = (async (blockNumber: number) => {\n                try {\n                    const receipt = await this.getTransactionReceipt(hash);\n                    if (receipt != null) {\n                        if (blockNumber - receipt.blockNumber + 1 >= confirms) {\n                            resolve(receipt);\n                            //this.off(\"block\", listener);\n                            if (timer) {\n                                clearTimeout(timer);\n                                timer = null;\n                            }\n                            return;\n                        }\n                    }\n                } catch (error) {\n                    console.log(\"EEE\", error);\n                }\n                this.once(\"block\", listener);\n            });\n\n            if (timeout != null) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n                    this.off(\"block\", listener);\n                    reject(makeError(\"timeout\", \"TIMEOUT\", { reason: \"timeout\" }));\n                }, timeout);\n            }\n\n            listener(await this.getBlockNumber());\n        });\n    }\n\n    async waitForBlock(blockTag?: BlockTag): Promise<Block> {\n        assert(false, \"not implemented yet\", \"NOT_IMPLEMENTED\", {\n            operation: \"waitForBlock\"\n        });\n    }\n\n    /**\n     *  Clear a timer created using the [[_setTimeout]] method.\n     */\n    _clearTimeout(timerId: number): void {\n        const timer = this.#timers.get(timerId);\n        if (!timer) { return; }\n        if (timer.timer) { clearTimeout(timer.timer); }\n        this.#timers.delete(timerId);\n    }\n\n    /**\n     *  Create a timer that will execute %%func%% after at least %%timeout%%\n     *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute\n     *  in the next event loop.\n     *\n     *  [Pausing](AbstractProvider-paused) the provider will pause any\n     *  associated timers.\n     */\n    _setTimeout(_func: () => void, timeout?: number): number {\n        if (timeout == null) { timeout = 0; }\n        const timerId = this.#nextTimer++;\n        const func = () => {\n            this.#timers.delete(timerId);\n            _func();\n        };\n\n        if (this.paused) {\n            this.#timers.set(timerId, { timer: null, func, time: timeout });\n        } else {\n            const timer = setTimeout(func, timeout);\n            this.#timers.set(timerId, { timer, func, time: getTime() });\n        }\n\n        return timerId;\n    }\n\n    /**\n     *  Perform %%func%% on each subscriber.\n     */\n    _forEachSubscriber(func: (s: Subscriber) => void): void {\n        for (const sub of this.#subs.values()) {\n            func(sub.subscriber);\n        }\n    }\n\n    /**\n     *  Sub-classes may override this to customize subscription\n     *  implementations.\n     */\n    _getSubscriber(sub: Subscription): Subscriber {\n        switch (sub.type) {\n            case \"debug\":\n            case \"error\":\n            case \"network\":\n                return new UnmanagedSubscriber(sub.type);\n            case \"block\":\n                return new PollingBlockSubscriber(this);\n            case \"event\":\n                return new PollingEventSubscriber(this, sub.filter);\n            case \"transaction\":\n                return new PollingTransactionSubscriber(this, sub.hash);\n            case \"orphan\":\n                return new PollingOrphanSubscriber(this, sub.filter);\n        }\n\n        throw new Error(`unsupported event: ${ sub.type }`);\n    }\n\n    /**\n     *  If a [[Subscriber]] fails and needs to replace itself, this\n     *  method may be used.\n     *\n     *  For example, this is used for providers when using the\n     *  ``eth_getFilterChanges`` method, which can return null if state\n     *  filters are not supported by the backend, allowing the Subscriber\n     *  to swap in a [[PollingEventSubscriber]].\n     */\n    _recoverSubscriber(oldSub: Subscriber, newSub: Subscriber): void {\n        for (const sub of this.#subs.values()) {\n            if (sub.subscriber === oldSub) {\n                if (sub.started) { sub.subscriber.stop(); }\n                sub.subscriber = newSub;\n                if (sub.started) { newSub.start(); }\n                if (this.#pausedState != null) { newSub.pause(this.#pausedState); }\n                break;\n            }\n        }\n    }\n\n    async #hasSub(event: ProviderEvent, emitArgs?: Array<any>): Promise<null | Sub> {\n        let sub = await getSubscription(event, this);\n        // This is a log that is removing an existing log; we actually want\n        // to emit an orphan event for the removed log\n        if (sub.type === \"event\" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {\n            sub = await getSubscription({ orphan: \"drop-log\", log: emitArgs[0] }, this);\n        }\n        return this.#subs.get(sub.tag) || null;\n    }\n\n    async #getSub(event: ProviderEvent): Promise<Sub> {\n        const subscription = await getSubscription(event, this);\n\n        // Prevent tampering with our tag in any subclass' _getSubscriber\n        const tag = subscription.tag;\n\n        let sub = this.#subs.get(tag);\n        if (!sub) {\n            const subscriber = this._getSubscriber(subscription);\n\n            const addressableMap = new WeakMap();\n            const nameMap = new Map();\n            sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [ ] };\n            this.#subs.set(tag, sub);\n        }\n\n        return sub;\n    }\n\n    async on(event: ProviderEvent, listener: Listener): Promise<this> {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({ listener, once: false });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) { sub.subscriber.pause(this.#pausedState); }\n        }\n        return this;\n    }\n\n    async once(event: ProviderEvent, listener: Listener): Promise<this> {\n        const sub = await this.#getSub(event);\n        sub.listeners.push({ listener, once: true });\n        if (!sub.started) {\n            sub.subscriber.start();\n            sub.started = true;\n            if (this.#pausedState != null) { sub.subscriber.pause(this.#pausedState); }\n        }\n        return this;\n    }\n\n    async emit(event: ProviderEvent, ...args: Array<any>): Promise<boolean> {\n        const sub = await this.#hasSub(event, args);\n        // If there is not subscription or if a recent emit removed\n        // the last of them (which also deleted the sub) do nothing\n        if (!sub || sub.listeners.length === 0) { return false; };\n\n        const count = sub.listeners.length;\n        sub.listeners = sub.listeners.filter(({ listener, once }) => {\n            const payload = new EventPayload(this, (once ? null: listener), event);\n            try {\n                listener.call(this, ...args, payload);\n            } catch(error) { }\n            return !once;\n        });\n\n        if (sub.listeners.length === 0) {\n            if (sub.started) { sub.subscriber.stop(); }\n            this.#subs.delete(sub.tag);\n        }\n\n        return (count > 0);\n    }\n\n    async listenerCount(event?: ProviderEvent): Promise<number> {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) { return 0; }\n            return sub.listeners.length;\n        }\n\n        let total = 0;\n        for (const { listeners } of this.#subs.values()) {\n            total += listeners.length;\n        }\n        return total;\n    }\n\n    async listeners(event?: ProviderEvent): Promise<Array<Listener>> {\n        if (event) {\n            const sub = await this.#hasSub(event);\n            if (!sub) { return  [ ]; }\n            return sub.listeners.map(({ listener }) => listener);\n        }\n        let result: Array<Listener> = [ ];\n        for (const { listeners } of this.#subs.values()) {\n            result = result.concat(listeners.map(({ listener }) => listener));\n        }\n        return result;\n    }\n\n    async off(event: ProviderEvent, listener?: Listener): Promise<this> {\n        const sub = await this.#hasSub(event);\n        if (!sub) { return this; }\n\n        if (listener) {\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\n            if (index >= 0) { sub.listeners.splice(index, 1); }\n        }\n\n        if (!listener || sub.listeners.length === 0) {\n            if (sub.started) { sub.subscriber.stop(); }\n            this.#subs.delete(sub.tag);\n        }\n\n        return this;\n    }\n\n    async removeAllListeners(event?: ProviderEvent): Promise<this> {\n        if (event) {\n            const { tag, started, subscriber } = await this.#getSub(event);\n            if (started) { subscriber.stop(); }\n            this.#subs.delete(tag);\n        } else {\n            for (const [ tag, { started, subscriber } ] of this.#subs) {\n                if (started) { subscriber.stop(); }\n                this.#subs.delete(tag);\n            }\n        }\n        return this;\n    }\n\n    // Alias for \"on\"\n    async addListener(event: ProviderEvent, listener: Listener): Promise<this> {\n       return await this.on(event, listener);\n    }\n\n    // Alias for \"off\"\n    async removeListener(event: ProviderEvent, listener: Listener): Promise<this> {\n       return this.off(event, listener);\n    }\n\n    /**\n     *  If this provider has been destroyed using the [[destroy]] method.\n     *\n     *  Once destroyed, all resources are reclaimed, internal event loops\n     *  and timers are cleaned up and no further requests may be sent to\n     *  the provider.\n     */\n    get destroyed(): boolean {\n        return this.#destroyed;\n    }\n\n    /**\n     *  Sub-classes may use this to shutdown any sockets or release their\n     *  resources and reject any pending requests.\n     *\n     *  Sub-classes **must** call ``super.destroy()``.\n     */\n    destroy(): void {\n        // Stop all listeners\n        this.removeAllListeners();\n\n        // Shut down all tiemrs\n        for (const timerId of this.#timers.keys()) {\n            this._clearTimeout(timerId);\n        }\n\n        this.#destroyed = true;\n    }\n\n    /**\n     *  Whether the provider is currently paused.\n     *\n     *  A paused provider will not emit any events, and generally should\n     *  not make any requests to the network, but that is up to sub-classes\n     *  to manage.\n     *\n     *  Setting ``paused = true`` is identical to calling ``.pause(false)``,\n     *  which will buffer any events that occur while paused until the\n     *  provider is unpaused.\n     */\n    get paused(): boolean { return (this.#pausedState != null); }\n    set paused(pause: boolean) {\n        if (!!pause === this.paused) { return; }\n\n        if (this.paused) {\n            this.resume();\n        } else {\n            this.pause(false);\n        }\n    }\n\n    /**\n     *  Pause the provider. If %%dropWhilePaused%%, any events that occur\n     *  while paused are dropped, otherwise all events will be emitted once\n     *  the provider is unpaused.\n     */\n    pause(dropWhilePaused?: boolean): void {\n        this.#lastBlockNumber = -1;\n\n        if (this.#pausedState != null) {\n            if (this.#pausedState == !!dropWhilePaused) { return; }\n            assert(false, \"cannot change pause type; resume first\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"pause\"\n            });\n        }\n\n        this._forEachSubscriber((s) => s.pause(dropWhilePaused));\n        this.#pausedState = !!dropWhilePaused;\n\n        for (const timer of this.#timers.values()) {\n            // Clear the timer\n            if (timer.timer) { clearTimeout(timer.timer); }\n\n            // Remaining time needed for when we become unpaused\n            timer.time = getTime() - timer.time;\n        }\n    }\n\n    /**\n     *  Resume the provider.\n     */\n    resume(): void {\n        if (this.#pausedState == null) { return; }\n\n        this._forEachSubscriber((s) => s.resume());\n        this.#pausedState = null;\n        for (const timer of this.#timers.values()) {\n            // Remaining time when we were paused\n            let timeout = timer.time;\n            if (timeout < 0) { timeout = 0; }\n\n            // Start time (in cause paused, so we con compute remaininf time)\n            timer.time = getTime();\n\n            // Start the timer\n            setTimeout(timer.func, timeout);\n        }\n    }\n}\n\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        const bytes = _parseBytes(result, start);\n        if (bytes) { return toUtf8String(bytes); }\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n    try {\n        const offset = getNumber(dataSlice(result, start, start + 32));\n        const length = getNumber(dataSlice(result, offset, offset + 32));\n\n        return dataSlice(result, offset + 32, offset + 32 + length);\n    } catch (error) { }\n    return null;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = toBeArray(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\nconst empty: Uint8Array = new Uint8Array([ ]);\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>): string {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(empty);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = getBytes(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return concat(result);\n}\n\nconst zeros = \"0x0000000000000000000000000000000000000000000000000000000000000000\"\nfunction parseOffchainLookup(data: string): CcipArgs {\n    const result: CcipArgs = {\n        sender: \"\", urls: [ ], calldata: \"\", selector: \"\", extraData: \"\", errorArgs: [ ]\n    };\n\n    assert(dataLength(data) >= 5 * 32, \"insufficient OffchainLookup data\", \"OFFCHAIN_FAULT\", {\n        reason: \"insufficient OffchainLookup data\"\n    });\n\n    const sender = dataSlice(data, 0, 32);\n    assert(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), \"corrupt OffchainLookup sender\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup sender\"\n    });\n    result.sender = dataSlice(sender, 12);\n\n    // Read the URLs from the response\n    try {\n        const urls: Array<string> = [];\n        const urlsOffset = getNumber(dataSlice(data, 32, 64));\n        const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));\n        const urlsData = dataSlice(data, urlsOffset + 32);\n        for (let u = 0; u < urlsLength; u++) {\n            const url = _parseString(urlsData, u * 32);\n            if (url == null) { throw new Error(\"abort\"); }\n            urls.push(url);\n        }\n        result.urls = urls;\n    } catch (error) {\n        assert(false, \"corrupt OffchainLookup urls\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup urls\"\n        });\n    }\n\n    // Get the CCIP calldata to forward\n    try {\n        const calldata = _parseBytes(data, 64);\n        if (calldata == null) { throw new Error(\"abort\"); }\n        result.calldata = calldata;\n    } catch (error) {\n        assert(false, \"corrupt OffchainLookup calldata\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup calldata\"\n        });\n    }\n\n    // Get the callbackSelector (bytes4)\n    assert(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), \"corrupt OffchainLookup callbaackSelector\", \"OFFCHAIN_FAULT\", {\n        reason: \"corrupt OffchainLookup callbaackSelector\"\n    });\n    result.selector = dataSlice(data, 96, 100);\n\n    // Get the extra data to send back to the contract as context\n    try {\n        const extraData = _parseBytes(data, 128);\n        if (extraData == null) { throw new Error(\"abort\"); }\n        result.extraData = extraData;\n    } catch (error) {\n        assert(false, \"corrupt OffchainLookup extraData\", \"OFFCHAIN_FAULT\", {\n            reason: \"corrupt OffchainLookup extraData\"\n        });\n    }\n\n    result.errorArgs = \"sender,urls,calldata,selector,extraData\".split(/,/).map((k) => (<any>result)[k])\n\n    return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}