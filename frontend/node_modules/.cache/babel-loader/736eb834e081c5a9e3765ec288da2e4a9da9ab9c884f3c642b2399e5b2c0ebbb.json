{"ast":null,"code":"\"use strict\";\n\n/**\n *  [[link-quicknode]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]\n */\nvar _regeneratorRuntime = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _get = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QuickNodeProvider = void 0;\nvar index_js_1 = require(\"../utils/index.js\");\nvar community_js_1 = require(\"./community.js\");\nvar network_js_1 = require(\"./network.js\");\nvar provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nvar defaultToken = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"ethers.quiknode.pro\";\n    case \"goerli\":\n      return \"ethers.ethereum-goerli.quiknode.pro\";\n    //case \"sepolia\":\n    //    return \"sepolia.infura.io\";\n    case \"arbitrum\":\n      return \"ethers.arbitrum-mainnet.quiknode.pro\";\n    case \"arbitrum-goerli\":\n      return \"ethers.arbitrum-goerli.quiknode.pro\";\n    case \"matic\":\n      return \"ethers.matic.quiknode.pro\";\n    case \"matic-mumbai\":\n      return \"ethers.matic-testnet.quiknode.pro\";\n    case \"optimism\":\n      return \"ethers.optimism.quiknode.pro\";\n    case \"optimism-goerli\":\n      return \"ethers.optimism-goerli.quiknode.pro\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **QuickNodeProvider** connects to the [[link-quicknode]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API token is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-quicknode).\n */\nvar QuickNodeProvider = /*#__PURE__*/function (_provider_jsonrpc_js_) {\n  _inherits(QuickNodeProvider, _provider_jsonrpc_js_);\n  var _super = _createSuper(QuickNodeProvider);\n  /**\n   *  Creates a new **QuickNodeProvider**.\n   */\n  function QuickNodeProvider(_network, token) {\n    var _this;\n    _classCallCheck(this, QuickNodeProvider);\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    var network = network_js_1.Network.from(_network);\n    if (token == null) {\n      token = defaultToken;\n    }\n    var request = QuickNodeProvider.getRequest(network, token);\n    _this = _super.call(this, request, network, {\n      staticNetwork: network\n    });\n    /**\n     *  The API token.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"token\", void 0);\n    (0, index_js_1.defineProperties)(_assertThisInitialized(_this), {\n      token: token\n    });\n    return _this;\n  }\n  _createClass(QuickNodeProvider, [{\n    key: \"_getProvider\",\n    value: function _getProvider(chainId) {\n      try {\n        return new QuickNodeProvider(chainId, this.token);\n      } catch (error) {}\n      return _get(_getPrototypeOf(QuickNodeProvider.prototype), \"_getProvider\", this).call(this, chainId);\n    }\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.token === defaultToken;\n    }\n    /**\n     *  Returns a new request prepared for %%network%% and the\n     *  %%token%%.\n     */\n  }], [{\n    key: \"getRequest\",\n    value: function getRequest(network, token) {\n      if (token == null) {\n        token = defaultToken;\n      }\n      var request = new index_js_1.FetchRequest(\"https://\".concat(getHost(network.name), \"/\").concat(token));\n      request.allowGzip = true;\n      //if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n      if (token === defaultToken) {\n        request.retryFunc = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request, response, attempt) {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  (0, community_js_1.showThrottleMessage)(\"QuickNodeProvider\");\n                  return _context.abrupt(\"return\", true);\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function (_x, _x2, _x3) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n      }\n      return request;\n    }\n  }]);\n  return QuickNodeProvider;\n}(provider_jsonrpc_js_1.JsonRpcProvider);\nexports.QuickNodeProvider = QuickNodeProvider;","map":{"version":3,"names":["_regeneratorRuntime","require","default","_asyncToGenerator","_classCallCheck","_createClass","_assertThisInitialized","_get","_getPrototypeOf","_inherits","_createSuper","_defineProperty","index_js_1","community_js_1","network_js_1","provider_jsonrpc_js_1","defaultToken","getHost","name","assertArgument","QuickNodeProvider","_provider_jsonrpc_js_","_super","_network","token","_this","network","Network","from","request","getRequest","call","staticNetwork","defineProperties","key","value","_getProvider","chainId","error","prototype","isCommunityResource","FetchRequest","concat","allowGzip","retryFunc","_ref","mark","_callee","response","attempt","wrap","_callee$","_context","prev","next","showThrottleMessage","abrupt","stop","_x","_x2","_x3","apply","arguments","JsonRpcProvider","exports"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/providers/provider-quicknode.ts"],"sourcesContent":["/**\n *  [[link-quicknode]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]\n */\n\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nconst defaultToken = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"ethers.quiknode.pro\";\n        case \"goerli\":\n            return \"ethers.ethereum-goerli.quiknode.pro\";\n        //case \"sepolia\":\n        //    return \"sepolia.infura.io\";\n\n        case \"arbitrum\":\n            return \"ethers.arbitrum-mainnet.quiknode.pro\";\n        case \"arbitrum-goerli\":\n            return \"ethers.arbitrum-goerli.quiknode.pro\";\n        case \"matic\":\n            return \"ethers.matic.quiknode.pro\";\n        case \"matic-mumbai\":\n            return \"ethers.matic-testnet.quiknode.pro\";\n        case \"optimism\":\n            return \"ethers.optimism.quiknode.pro\";\n        case \"optimism-goerli\":\n            return \"ethers.optimism-goerli.quiknode.pro\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n\n/**\n *  The **QuickNodeProvider** connects to the [[link-quicknode]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API token is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-quicknode).\n */\nexport class QuickNodeProvider extends JsonRpcProvider implements CommunityResourcable {\n    /**\n     *  The API token.\n     */\n    readonly token!: string;\n\n    /**\n     *  Creates a new **QuickNodeProvider**.\n     */\n    constructor(_network?: Networkish, token?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (token == null) { token = defaultToken; }\n\n        const request = QuickNodeProvider.getRequest(network, token);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<QuickNodeProvider>(this, { token });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new QuickNodeProvider(chainId, this.token);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.token === defaultToken);\n    }\n\n    /**\n     *  Returns a new request prepared for %%network%% and the\n     *  %%token%%.\n     */\n    static getRequest(network: Network, token?: null | string): FetchRequest {\n        if (token == null) { token = defaultToken; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/${ token }`);\n        request.allowGzip = true;\n        //if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n\n        if (token === defaultToken) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"QuickNodeProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}