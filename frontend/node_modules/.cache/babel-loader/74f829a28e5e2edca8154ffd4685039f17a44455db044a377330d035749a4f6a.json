{"ast":null,"code":"\"use strict\";\n\n// Electronic Code Book\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ECB = void 0;\nvar mode_js_1 = require(\"./mode.js\");\nvar ECB = /*#__PURE__*/function (_mode_js_1$ModeOfOper) {\n  _inherits(ECB, _mode_js_1$ModeOfOper);\n  var _super = _createSuper(ECB);\n  function ECB(key) {\n    _classCallCheck(this, ECB);\n    return _super.call(this, \"ECB\", key, ECB);\n  }\n  _createClass(ECB, [{\n    key: \"encrypt\",\n    value: function encrypt(plaintext) {\n      if (plaintext.length % 16) {\n        throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n      }\n      var crypttext = new Uint8Array(plaintext.length);\n      for (var i = 0; i < plaintext.length; i += 16) {\n        crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);\n      }\n      return crypttext;\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(crypttext) {\n      if (crypttext.length % 16) {\n        throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n      }\n      var plaintext = new Uint8Array(crypttext.length);\n      for (var i = 0; i < crypttext.length; i += 16) {\n        plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);\n      }\n      return plaintext;\n    }\n  }]);\n  return ECB;\n}(mode_js_1.ModeOfOperation);\nexports.ECB = ECB;","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","_inherits","_createSuper","mode_js_1","ECB","_mode_js_1$ModeOfOper","_super","key","call","value","encrypt","plaintext","length","TypeError","crypttext","Uint8Array","i","set","aes","subarray","decrypt","ModeOfOperation","exports"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/aes-js/src.ts/mode-ecb.ts"],"sourcesContent":["// Electronic Code Book\n\nimport { ModeOfOperation } from \"./mode.js\";\n\nexport class ECB extends ModeOfOperation {\n\n  constructor(key: Uint8Array) {\n    super(\"ECB\", key, ECB);\n  }\n\n  encrypt(plaintext: Uint8Array): Uint8Array {\n    if (plaintext.length % 16) {\n        throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\n    }\n\n    const crypttext = new Uint8Array(plaintext.length);\n    for (let i = 0; i < plaintext.length; i += 16) {\n        crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);\n    }\n\n    return crypttext;\n  }\n\n  decrypt(crypttext: Uint8Array): Uint8Array {\n    if (crypttext.length % 16) {\n        throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n    }\n\n    const plaintext = new Uint8Array(crypttext.length);\n    for (let i = 0; i < crypttext.length; i += 16) {\n        plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);\n    }\n\n    return plaintext;\n  }\n}\n"],"mappings":";;AAAA;AAAA,IAAAA,eAAA,GAAAC,OAAA,oGAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAF,OAAA,iGAAAC,OAAA;AAAA,IAAAE,SAAA,GAAAH,OAAA,8FAAAC,OAAA;AAAA,IAAAG,YAAA,GAAAJ,OAAA,iGAAAC,OAAA;;;;;AAEA,IAAAI,SAAA,GAAAL,OAAA;AAA4C,IAE/BM,GAAI,0BAAAC,qBAAA;EAAAJ,SAAA,CAAAG,GAAA,EAAAC,qBAAA;EAAA,IAAAC,MAAA,GAAAJ,YAAA,CAAAE,GAAA;EAEf,SAAAA,IAAYG,GAAe;IAAAV,eAAA,OAAAO,GAAA;IAAA,OAAAE,MAAA,CAAAE,IAAA,OACnB,KAAK,EAAED,GAAG,EAAEH,GAAG;EACvB;EAACJ,YAAA,CAAAI,GAAA;IAAAG,GAAA;IAAAE,KAAA,EAED,SAAAC,QAAQC,SAAqB;MAC3B,IAAIA,SAAS,CAACC,MAAM,GAAG,EAAE,EAAE;QACvB,MAAM,IAAIC,SAAS,CAAC,uDAAuD,CAAC;;MAGhF,IAAMC,SAAS,GAAG,IAAIC,UAAU,CAACJ,SAAS,CAACC,MAAM,CAAC;MAClD,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,SAAS,CAACC,MAAM,EAAEI,CAAC,IAAI,EAAE,EAAE;QAC3CF,SAAS,CAACG,GAAG,CAAC,IAAI,CAACC,GAAG,CAACR,OAAO,CAACC,SAAS,CAACQ,QAAQ,CAACH,CAAC,EAAEA,CAAC,GAAG,EAAE,CAAC,CAAC,EAAEA,CAAC,CAAC;;MAGrE,OAAOF,SAAS;IAClB;EAAC;IAAAP,GAAA;IAAAE,KAAA,EAED,SAAAW,QAAQN,SAAqB;MAC3B,IAAIA,SAAS,CAACF,MAAM,GAAG,EAAE,EAAE;QACvB,MAAM,IAAIC,SAAS,CAAC,wDAAwD,CAAC;;MAGjF,IAAMF,SAAS,GAAG,IAAII,UAAU,CAACD,SAAS,CAACF,MAAM,CAAC;MAClD,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACF,MAAM,EAAEI,CAAC,IAAI,EAAE,EAAE;QAC3CL,SAAS,CAACM,GAAG,CAAC,IAAI,CAACC,GAAG,CAACE,OAAO,CAACN,SAAS,CAACK,QAAQ,CAACH,CAAC,EAAEA,CAAC,GAAG,EAAE,CAAC,CAAC,EAAEA,CAAC,CAAC;;MAGrE,OAAOL,SAAS;IAClB;EAAC;EAAA,OAAAP,GAAA;AAAA,EA9BsBD,SAAA,CAAAkB,eAAe;AAAxCC,OAAA,CAAAlB,GAAA,GAAAA,GAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}