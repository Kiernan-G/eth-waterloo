{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayCoder = exports.unpack = exports.pack = void 0;\nvar index_js_1 = require(\"../../utils/index.js\");\nvar typed_js_1 = require(\"../typed.js\");\nvar abstract_coder_js_1 = require(\"./abstract-coder.js\");\nvar anonymous_js_1 = require(\"./anonymous.js\");\n/**\n *  @_ignore\n */\nfunction pack(writer, coders, values) {\n  var arrayValues = [];\n  if (Array.isArray(values)) {\n    arrayValues = values;\n  } else if (values && typeof values === \"object\") {\n    var unique = {};\n    arrayValues = coders.map(function (coder) {\n      var name = coder.localName;\n      (0, index_js_1.assert)(name, \"cannot encode object for signature with missing names\", \"INVALID_ARGUMENT\", {\n        argument: \"values\",\n        info: {\n          coder: coder\n        },\n        value: values\n      });\n      (0, index_js_1.assert)(!unique[name], \"cannot encode object for signature with duplicate names\", \"INVALID_ARGUMENT\", {\n        argument: \"values\",\n        info: {\n          coder: coder\n        },\n        value: values\n      });\n      unique[name] = true;\n      return values[name];\n    });\n  } else {\n    (0, index_js_1.assertArgument)(false, \"invalid tuple value\", \"tuple\", values);\n  }\n  (0, index_js_1.assertArgument)(coders.length === arrayValues.length, \"types/value length mismatch\", \"tuple\", values);\n  var staticWriter = new abstract_coder_js_1.Writer();\n  var dynamicWriter = new abstract_coder_js_1.Writer();\n  var updateFuncs = [];\n  coders.forEach(function (coder, index) {\n    var value = arrayValues[index];\n    if (coder.dynamic) {\n      // Get current dynamic offset (for the future pointer)\n      var dynamicOffset = dynamicWriter.length;\n      // Encode the dynamic value into the dynamicWriter\n      coder.encode(dynamicWriter, value);\n      // Prepare to populate the correct offset once we are done\n      var updateFunc = staticWriter.writeUpdatableValue();\n      updateFuncs.push(function (baseOffset) {\n        updateFunc(baseOffset + dynamicOffset);\n      });\n    } else {\n      coder.encode(staticWriter, value);\n    }\n  });\n  // Backfill all the dynamic offsets, now that we know the static length\n  updateFuncs.forEach(function (func) {\n    func(staticWriter.length);\n  });\n  var length = writer.appendWriter(staticWriter);\n  length += writer.appendWriter(dynamicWriter);\n  return length;\n}\nexports.pack = pack;\n/**\n *  @_ignore\n */\nfunction unpack(reader, coders) {\n  var values = [];\n  var keys = [];\n  // A reader anchored to this base\n  var baseReader = reader.subReader(0);\n  coders.forEach(function (coder) {\n    var value = null;\n    if (coder.dynamic) {\n      var offset = reader.readIndex();\n      var offsetReader = baseReader.subReader(offset);\n      try {\n        value = coder.decode(offsetReader);\n      } catch (error) {\n        // Cannot recover from this\n        if ((0, index_js_1.isError)(error, \"BUFFER_OVERRUN\")) {\n          throw error;\n        }\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    } else {\n      try {\n        value = coder.decode(reader);\n      } catch (error) {\n        // Cannot recover from this\n        if ((0, index_js_1.isError)(error, \"BUFFER_OVERRUN\")) {\n          throw error;\n        }\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    }\n    if (value == undefined) {\n      throw new Error(\"investigate\");\n    }\n    values.push(value);\n    keys.push(coder.localName || null);\n  });\n  return abstract_coder_js_1.Result.fromItems(values, keys);\n}\nexports.unpack = unpack;\n/**\n *  @_ignore\n */\nvar ArrayCoder = /*#__PURE__*/function (_abstract_coder_js_1$) {\n  _inherits(ArrayCoder, _abstract_coder_js_1$);\n  var _super = _createSuper(ArrayCoder);\n  function ArrayCoder(coder, length, localName) {\n    var _this;\n    _classCallCheck(this, ArrayCoder);\n    var type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n    var dynamic = length === -1 || coder.dynamic;\n    _this = _super.call(this, \"array\", type, localName, dynamic);\n    _defineProperty(_assertThisInitialized(_this), \"coder\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"length\", void 0);\n    (0, index_js_1.defineProperties)(_assertThisInitialized(_this), {\n      coder: coder,\n      length: length\n    });\n    return _this;\n  }\n  _createClass(ArrayCoder, [{\n    key: \"defaultValue\",\n    value: function defaultValue() {\n      // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n      var defaultChild = this.coder.defaultValue();\n      var result = [];\n      for (var i = 0; i < this.length; i++) {\n        result.push(defaultChild);\n      }\n      return result;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(writer, _value) {\n      var value = typed_js_1.Typed.dereference(_value, \"array\");\n      if (!Array.isArray(value)) {\n        this._throwError(\"expected array value\", value);\n      }\n      var count = this.length;\n      if (count === -1) {\n        count = value.length;\n        writer.writeValue(value.length);\n      }\n      (0, index_js_1.assertArgumentCount)(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n      var coders = [];\n      for (var i = 0; i < value.length; i++) {\n        coders.push(this.coder);\n      }\n      return pack(writer, coders, value);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(reader) {\n      var count = this.length;\n      if (count === -1) {\n        count = reader.readIndex();\n        // Check that there is *roughly* enough data to ensure\n        // stray random data is not being read as a length. Each\n        // slot requires at least 32 bytes for their value (or 32\n        // bytes as a link to the data). This could use a much\n        // tighter bound, but we are erroring on the side of safety.\n        (0, index_js_1.assert)(count * abstract_coder_js_1.WordSize <= reader.dataLength, \"insufficient data length\", \"BUFFER_OVERRUN\", {\n          buffer: reader.bytes,\n          offset: count * abstract_coder_js_1.WordSize,\n          length: reader.dataLength\n        });\n      }\n      var coders = [];\n      for (var i = 0; i < count; i++) {\n        coders.push(new anonymous_js_1.AnonymousCoder(this.coder));\n      }\n      return unpack(reader, coders);\n    }\n  }]);\n  return ArrayCoder;\n}(abstract_coder_js_1.Coder);\nexports.ArrayCoder = ArrayCoder;","map":{"version":3,"names":["index_js_1","require","typed_js_1","abstract_coder_js_1","anonymous_js_1","pack","writer","coders","values","arrayValues","Array","isArray","unique","map","coder","name","localName","assert","argument","info","value","assertArgument","length","staticWriter","Writer","dynamicWriter","updateFuncs","forEach","index","dynamic","dynamicOffset","encode","updateFunc","writeUpdatableValue","push","baseOffset","func","appendWriter","exports","unpack","reader","keys","baseReader","subReader","offset","readIndex","offsetReader","decode","error","isError","baseType","type","undefined","Error","Result","fromItems","ArrayCoder","_abstract_coder_js_1$","_inherits","_super","_createSuper","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","defineProperties","_createClass","key","defaultValue","defaultChild","result","i","_value","Typed","dereference","_throwError","count","writeValue","assertArgumentCount","WordSize","dataLength","buffer","bytes","AnonymousCoder","Coder"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/abi/coders/array.ts"],"sourcesContent":["import {\n    defineProperties, isError, assert, assertArgument, assertArgumentCount\n} from \"../../utils/index.js\";\n\nimport { Typed } from \"../typed.js\";\n\nimport { Coder, Result, WordSize, Writer } from \"./abstract-coder.js\";\nimport { AnonymousCoder } from \"./anonymous.js\";\n\nimport type { Reader } from \"./abstract-coder.js\";\n\n/**\n *  @_ignore\n */\nexport function pack(writer: Writer, coders: ReadonlyArray<Coder>, values: Array<any> | { [ name: string ]: any }): number {\n    let arrayValues: Array<any> = [ ];\n\n    if (Array.isArray(values)) {\n       arrayValues = values;\n\n    } else if (values && typeof(values) === \"object\") {\n        let unique: { [ name: string ]: boolean } = { };\n\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            assert(name, \"cannot encode object for signature with missing names\",\n                \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n\n            assert(!unique[name], \"cannot encode object for signature with duplicate names\",\n                \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n\n            unique[name] = true;\n\n            return values[name];\n        });\n\n    } else {\n        assertArgument(false, \"invalid tuple value\", \"tuple\", values);\n    }\n\n    assertArgument(coders.length === arrayValues.length, \"types/value length mismatch\", \"tuple\", values);\n\n    let staticWriter = new Writer();\n    let dynamicWriter = new Writer();\n\n    let updateFuncs: Array<(baseOffset: number) => void> = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset: number) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n\n        } else {\n            coder.encode(staticWriter, value);\n        }\n    });\n\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\n\n/**\n *  @_ignore\n */\nexport function unpack(reader: Reader, coders: ReadonlyArray<Coder>): Result {\n    let values: Array<any> = [];\n    let keys: Array<null | string> = [ ];\n\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n\n    coders.forEach((coder) => {\n        let value: any = null;\n\n        if (coder.dynamic) {\n            let offset = reader.readIndex();\n            let offsetReader = baseReader.subReader(offset);\n            try {\n                value = coder.decode(offsetReader);\n            } catch (error: any) {\n                // Cannot recover from this\n                if (isError(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n\n        } else {\n            try {\n                value = coder.decode(reader);\n            } catch (error: any) {\n                // Cannot recover from this\n                if (isError(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n\n        if (value == undefined) {\n            throw new Error(\"investigate\");\n        }\n\n        values.push(value);\n        keys.push(coder.localName || null);\n    });\n\n    return Result.fromItems(values, keys);\n}\n\n/**\n *  @_ignore\n */\nexport class ArrayCoder extends Coder {\n    readonly coder!: Coder;\n    readonly length!: number;\n\n    constructor(coder: Coder, length: number, localName: string) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length: \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        defineProperties<ArrayCoder>(this, { coder, length });\n    }\n\n    defaultValue(): Array<any> {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n\n        const result: Array<any> = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n\n    encode(writer: Writer, _value: Array<any> | Typed): number {\n        const value = Typed.dereference(_value, \"array\");\n\n        if(!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n\n        let count = this.length;\n\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n\n        assertArgumentCount(value.length, count, \"coder array\" + (this.localName? (\" \"+ this.localName): \"\"));\n\n        let coders = [];\n        for (let i = 0; i < value.length; i++) { coders.push(this.coder); }\n\n        return pack(writer, coders, value);\n    }\n\n    decode(reader: Reader): any {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readIndex();\n\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            assert(count * WordSize <= reader.dataLength, \"insufficient data length\",\n                \"BUFFER_OVERRUN\", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) { coders.push(new AnonymousCoder(this.coder)); }\n\n        return unpack(reader, coders);\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}