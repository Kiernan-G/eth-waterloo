{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wordlist = void 0;\nvar index_js_1 = require(\"../utils/index.js\");\n/**\n *  A Wordlist represents a collection of language-specific\n *  words used to encode and devoce [[link-bip-39]] encoded data\n *  by mapping words to 11-bit values and vice versa.\n */\nvar Wordlist = /*#__PURE__*/function () {\n  /**\n   *  Creates a new Wordlist instance.\n   *\n   *  Sub-classes MUST call this if they provide their own constructor,\n   *  passing in the locale string of the language.\n   *\n   *  Generally there is no need to create instances of a Wordlist,\n   *  since each language-specific Wordlist creates an instance and\n   *  there is no state kept internally, so they are safe to share.\n   */\n  function Wordlist(locale) {\n    _classCallCheck(this, Wordlist);\n    _defineProperty(this, \"locale\", void 0);\n    (0, index_js_1.defineProperties)(this, {\n      locale: locale\n    });\n  }\n  /**\n   *  Sub-classes may override this to provide a language-specific\n   *  method for spliting %%phrase%% into individual words.\n   *\n   *  By default, %%phrase%% is split using any sequences of\n   *  white-space as defined by regular expressions (i.e. ``/\\s+/``).\n   */\n  _createClass(Wordlist, [{\n    key: \"split\",\n    value: function split(phrase) {\n      return phrase.toLowerCase().split(/\\s+/g);\n    }\n    /**\n     *  Sub-classes may override this to provider a language-specific\n     *  method for joining %%words%% into a phrase.\n     *\n     *  By default, %%words%% are joined by a single space.\n     */\n  }, {\n    key: \"join\",\n    value: function join(words) {\n      return words.join(\" \");\n    }\n  }]);\n  return Wordlist;\n}();\nexports.Wordlist = Wordlist;","map":{"version":3,"names":["index_js_1","require","Wordlist","locale","_classCallCheck","_defineProperty","defineProperties","_createClass","key","value","split","phrase","toLowerCase","join","words","exports"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/wordlists/wordlist.ts"],"sourcesContent":["import { defineProperties } from \"../utils/index.js\";\n\n/**\n *  A Wordlist represents a collection of language-specific\n *  words used to encode and devoce [[link-bip-39]] encoded data\n *  by mapping words to 11-bit values and vice versa.\n */\nexport abstract class Wordlist {\n    locale!: string;\n\n    /**\n     *  Creates a new Wordlist instance.\n     *\n     *  Sub-classes MUST call this if they provide their own constructor,\n     *  passing in the locale string of the language.\n     *\n     *  Generally there is no need to create instances of a Wordlist,\n     *  since each language-specific Wordlist creates an instance and\n     *  there is no state kept internally, so they are safe to share.\n     */\n    constructor(locale: string) {\n        defineProperties<Wordlist>(this, { locale });\n    }\n\n    /**\n     *  Sub-classes may override this to provide a language-specific\n     *  method for spliting %%phrase%% into individual words.\n     *\n     *  By default, %%phrase%% is split using any sequences of\n     *  white-space as defined by regular expressions (i.e. ``/\\s+/``).\n     */\n    split(phrase: string): Array<string> {\n        return phrase.toLowerCase().split(/\\s+/g)\n    }\n\n    /**\n     *  Sub-classes may override this to provider a language-specific\n     *  method for joining %%words%% into a phrase.\n     *\n     *  By default, %%words%% are joined by a single space.\n     */\n    join(words: Array<string>): string {\n        return words.join(\" \");\n    }\n\n    /**\n     *  Maps an 11-bit value into its coresponding word in the list.\n     *\n     *  Sub-classes MUST override this.\n     */\n    abstract getWord(index: number): string;\n\n    /**\n     *  Maps a word to its corresponding 11-bit value.\n     *\n     *  Sub-classes MUST override this.\n     */\n    abstract getWordIndex(word: string): number;\n}\n"],"mappings":";;;;;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AAEA;;;;;AAAA,IAKsBC,QAAQ;EAG1B;;;;;;;;;;EAUA,SAAAA,SAAYC,MAAc;IAAAC,eAAA,OAAAF,QAAA;IAAAG,eAAA;IACtB,IAAAL,UAAA,CAAAM,gBAAgB,EAAW,IAAI,EAAE;MAAEH,MAAM,EAANA;IAAM,CAAE,CAAC;EAChD;EAEA;;;;;;;EAAAI,YAAA,CAAAL,QAAA;IAAAM,GAAA;IAAAC,KAAA,EAOA,SAAAC,MAAMC,MAAc;MAChB,OAAOA,MAAM,CAACC,WAAW,EAAE,CAACF,KAAK,CAAC,MAAM,CAAC;IAC7C;IAEA;;;;;;EAAA;IAAAF,GAAA;IAAAC,KAAA,EAMA,SAAAI,KAAKC,KAAoB;MACrB,OAAOA,KAAK,CAACD,IAAI,CAAC,GAAG,CAAC;IAC1B;EAAC;EAAA,OAAAX,QAAA;AAAA;AApCLa,OAAA,CAAAb,QAAA,GAAAA,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}