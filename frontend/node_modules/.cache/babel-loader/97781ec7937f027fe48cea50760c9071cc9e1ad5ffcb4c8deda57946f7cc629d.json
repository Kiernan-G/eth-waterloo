{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractFactory = void 0;\nvar index_js_1 = require(\"../abi/index.js\");\nvar index_js_2 = require(\"../address/index.js\");\nvar index_js_3 = require(\"../utils/index.js\");\nvar contract_js_1 = require(\"./contract.js\");\n// A = Arguments to the constructor\n// I = Interface of deployed contracts\n/**\n *  A **ContractFactory** is used to deploy a Contract to the blockchain.\n */\nvar ContractFactory = /*#__PURE__*/function () {\n  /**\n   *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,\n   *  optionally connected to %%runner%%.\n   *\n   *  The %%bytecode%% may be the ``bytecode`` property within the\n   *  standard Solidity JSON output.\n   */\n  function ContractFactory(abi, bytecode, runner) {\n    _classCallCheck(this, ContractFactory);\n    /**\n     *  The Contract Interface.\n     */\n    _defineProperty(this, \"interface\", void 0);\n    /**\n     *  The Contract deployment bytecode. Often called the initcode.\n     */\n    _defineProperty(this, \"bytecode\", void 0);\n    /**\n     *  The ContractRunner to deploy the Contract as.\n     */\n    _defineProperty(this, \"runner\", void 0);\n    var iface = index_js_1.Interface.from(abi);\n    // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\n    if (bytecode instanceof Uint8Array) {\n      bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));\n    } else {\n      if (typeof bytecode === \"object\") {\n        bytecode = bytecode.object;\n      }\n      if (!bytecode.startsWith(\"0x\")) {\n        bytecode = \"0x\" + bytecode;\n      }\n      bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));\n    }\n    (0, index_js_3.defineProperties)(this, {\n      bytecode: bytecode,\n      interface: iface,\n      runner: runner || null\n    });\n  }\n  _createClass(ContractFactory, [{\n    key: \"attach\",\n    value: function attach(target) {\n      return new contract_js_1.BaseContract(target, this.interface, this.runner);\n    }\n    /**\n     *  Resolves to the transaction to deploy the contract, passing %%args%%\n     *  into the constructor.\n     */\n  }, {\n    key: \"getDeployTransaction\",\n    value: function () {\n      var _getDeployTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var overrides,\n          fragment,\n          _len,\n          args,\n          _key,\n          resolvedArgs,\n          data,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              overrides = {};\n              fragment = this.interface.deploy;\n              for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = _args[_key];\n              }\n              if (!(fragment.inputs.length + 1 === args.length)) {\n                _context.next = 7;\n                break;\n              }\n              _context.next = 6;\n              return (0, contract_js_1.copyOverrides)(args.pop());\n            case 6:\n              overrides = _context.sent;\n            case 7:\n              if (!(fragment.inputs.length !== args.length)) {\n                _context.next = 9;\n                break;\n              }\n              throw new Error(\"incorrect number of arguments to constructor\");\n            case 9:\n              _context.next = 11;\n              return (0, contract_js_1.resolveArgs)(this.runner, fragment.inputs, args);\n            case 11:\n              resolvedArgs = _context.sent;\n              data = (0, index_js_3.concat)([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);\n              return _context.abrupt(\"return\", Object.assign({}, overrides, {\n                data: data\n              }));\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getDeployTransaction() {\n        return _getDeployTransaction.apply(this, arguments);\n      }\n      return getDeployTransaction;\n    }()\n    /**\n     *  Resolves to the Contract deployed by passing %%args%% into the\n     *  constructor.\n     *\n     *  This will resovle to the Contract before it has been deployed to the\n     *  network, so the [[BaseContract-waitForDeployment]] should be used before\n     *  sending any transactions to it.\n     */\n  }, {\n    key: \"deploy\",\n    value: function () {\n      var _deploy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var tx,\n          sentTx,\n          address,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.getDeployTransaction.apply(this, _args2);\n            case 2:\n              tx = _context2.sent;\n              (0, index_js_3.assert)(this.runner && typeof this.runner.sendTransaction === \"function\", \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"sendTransaction\"\n              });\n              _context2.next = 6;\n              return this.runner.sendTransaction(tx);\n            case 6:\n              sentTx = _context2.sent;\n              address = (0, index_js_2.getCreateAddress)(sentTx);\n              return _context2.abrupt(\"return\", new contract_js_1.BaseContract(address, this.interface, this.runner, sentTx));\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function deploy() {\n        return _deploy.apply(this, arguments);\n      }\n      return deploy;\n    }()\n    /**\n     *  Return a new **ContractFactory** with the same ABI and bytecode,\n     *  but connected to %%runner%%.\n     */\n  }, {\n    key: \"connect\",\n    value: function connect(runner) {\n      return new ContractFactory(this.interface, this.bytecode, runner);\n    }\n    /**\n     *  Create a new **ContractFactory** from the standard Solidity JSON output.\n     */\n  }], [{\n    key: \"fromSolidity\",\n    value: function fromSolidity(output, runner) {\n      (0, index_js_3.assertArgument)(output != null, \"bad compiler output\", \"output\", output);\n      if (typeof output === \"string\") {\n        output = JSON.parse(output);\n      }\n      var abi = output.abi;\n      var bytecode = \"\";\n      if (output.bytecode) {\n        bytecode = output.bytecode;\n      } else if (output.evm && output.evm.bytecode) {\n        bytecode = output.evm.bytecode;\n      }\n      return new this(abi, bytecode, runner);\n    }\n  }]);\n  return ContractFactory;\n}();\nexports.ContractFactory = ContractFactory;","map":{"version":3,"names":["index_js_1","require","index_js_2","index_js_3","contract_js_1","ContractFactory","abi","bytecode","runner","_classCallCheck","_defineProperty","iface","Interface","from","Uint8Array","hexlify","getBytes","object","startsWith","defineProperties","interface","_createClass","key","value","attach","target","BaseContract","_getDeployTransaction","_asyncToGenerator","_regeneratorRuntime","mark","_callee","overrides","fragment","_len","args","_key","resolvedArgs","data","_args","arguments","wrap","_callee$","_context","prev","next","deploy","length","Array","inputs","copyOverrides","pop","sent","Error","resolveArgs","concat","encodeDeploy","abrupt","Object","assign","stop","getDeployTransaction","apply","_deploy","_callee2","tx","sentTx","address","_args2","_callee2$","_context2","assert","sendTransaction","operation","getCreateAddress","connect","fromSolidity","output","assertArgument","JSON","parse","evm","exports"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/contract/factory.ts"],"sourcesContent":["\nimport { Interface } from \"../abi/index.js\";\nimport { getCreateAddress } from \"../address/index.js\";\nimport {\n    concat, defineProperties, getBytes, hexlify,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { BaseContract, copyOverrides, resolveArgs } from \"./contract.js\";\n\nimport type { InterfaceAbi } from \"../abi/index.js\";\nimport type { Addressable } from \"../address/index.js\";\nimport type { ContractRunner } from \"../providers/index.js\";\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport type {\n    ContractInterface, ContractMethodArgs, ContractDeployTransaction,\n} from \"./types.js\";\nimport type { ContractTransactionResponse } from \"./wrappers.js\";\n\n\n// A = Arguments to the constructor\n// I = Interface of deployed contracts\n\n/**\n *  A **ContractFactory** is used to deploy a Contract to the blockchain.\n */\nexport class ContractFactory<A extends Array<any> = Array<any>, I = BaseContract> {\n\n    /**\n     *  The Contract Interface.\n     */\n    readonly interface!: Interface;\n\n    /**\n     *  The Contract deployment bytecode. Often called the initcode.\n     */\n    readonly bytecode!: string;\n\n    /**\n     *  The ContractRunner to deploy the Contract as.\n     */\n    readonly runner!: null | ContractRunner;\n\n    /**\n     *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,\n     *  optionally connected to %%runner%%.\n     *\n     *  The %%bytecode%% may be the ``bytecode`` property within the\n     *  standard Solidity JSON output.\n     */\n    constructor(abi: Interface | InterfaceAbi, bytecode: BytesLike | { object: string }, runner?: null | ContractRunner) {\n        const iface = Interface.from(abi);\n\n        // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\n        if (bytecode instanceof Uint8Array) {\n            bytecode = hexlify(getBytes(bytecode));\n        } else {\n            if (typeof(bytecode) === \"object\") { bytecode = bytecode.object; }\n            if (!bytecode.startsWith(\"0x\")) { bytecode = \"0x\" + bytecode; }\n            bytecode = hexlify(getBytes(bytecode));\n        }\n\n        defineProperties<ContractFactory>(this, {\n            bytecode, interface: iface, runner: (runner || null)\n        });\n    }\n\n    attach(target: string | Addressable): BaseContract & Omit<I, keyof BaseContract> {\n        return new (<any>BaseContract)(target, this.interface, this.runner);\n    }\n\n    /**\n     *  Resolves to the transaction to deploy the contract, passing %%args%%\n     *  into the constructor.\n     */\n    async getDeployTransaction(...args: ContractMethodArgs<A>): Promise<ContractDeployTransaction> {\n        let overrides: Omit<ContractDeployTransaction, \"data\"> = { };\n\n        const fragment = this.interface.deploy;\n\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n        }\n\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"incorrect number of arguments to constructor\");\n        }\n\n        const resolvedArgs = await resolveArgs(this.runner, fragment.inputs, args);\n\n        const data = concat([ this.bytecode, this.interface.encodeDeploy(resolvedArgs) ]);\n        return Object.assign({ }, overrides, { data });\n    }\n\n    /**\n     *  Resolves to the Contract deployed by passing %%args%% into the\n     *  constructor.\n     *\n     *  This will resovle to the Contract before it has been deployed to the\n     *  network, so the [[BaseContract-waitForDeployment]] should be used before\n     *  sending any transactions to it.\n     */\n    async deploy(...args: ContractMethodArgs<A>): Promise<BaseContract & { deploymentTransaction(): ContractTransactionResponse } & Omit<I, keyof BaseContract>> {\n        const tx = await this.getDeployTransaction(...args);\n\n        assert(this.runner && typeof(this.runner.sendTransaction) === \"function\",\n            \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"sendTransaction\" });\n\n        const sentTx = await this.runner.sendTransaction(tx);\n        const address = getCreateAddress(sentTx);\n        return new (<any>BaseContract)(address, this.interface, this.runner, sentTx);\n    }\n\n    /**\n     *  Return a new **ContractFactory** with the same ABI and bytecode,\n     *  but connected to %%runner%%.\n     */\n    connect(runner: null | ContractRunner): ContractFactory<A, I> {\n        return new ContractFactory(this.interface, this.bytecode, runner);\n    }\n\n    /**\n     *  Create a new **ContractFactory** from the standard Solidity JSON output.\n     */\n    static fromSolidity<A extends Array<any> = Array<any>, I = ContractInterface>(output: any, runner?: ContractRunner): ContractFactory<A, I> {\n        assertArgument(output != null, \"bad compiler output\", \"output\", output);\n\n        if (typeof(output) === \"string\") { output = JSON.parse(output); }\n\n        const abi = output.abi;\n\n        let bytecode = \"\";\n        if (output.bytecode) {\n            bytecode = output.bytecode;\n        } else if (output.evm && output.evm.bytecode) {\n            bytecode = output.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, runner);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}