{"ast":null,"code":"\"use strict\";\n\n/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Network = void 0;\nvar index_js_1 = require(\"../transaction/index.js\");\nvar index_js_2 = require(\"../utils/index.js\");\nvar plugins_network_js_1 = require(\"./plugins-network.js\");\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n/* * * *\nexport class PriceOraclePlugin extends NetworkPlugin {\n    readonly address!: string;\n\n    constructor(address: string) {\n        super(\"org.ethers.plugins.price-oracle\");\n        defineProperties<PriceOraclePlugin>(this, { address });\n    }\n\n    clone(): PriceOraclePlugin {\n        return new PriceOraclePlugin(this.address);\n    }\n}\n*/\n// Networks or clients with a higher need for security (such as clients\n// that may automatically make CCIP requests without user interaction)\n// can use this plugin to anonymize requests or intercept CCIP requests\n// to notify and/or receive authorization from the user\n/* * * *\nexport type FetchDataFunc = (req: Frozen<FetchRequest>) => Promise<FetchRequest>;\nexport class CcipPreflightPlugin extends NetworkPlugin {\n    readonly fetchData!: FetchDataFunc;\n\n    constructor(fetchData: FetchDataFunc) {\n        super(\"org.ethers.plugins.ccip-preflight\");\n        defineProperties<CcipPreflightPlugin>(this, { fetchData });\n    }\n\n    clone(): CcipPreflightPlugin {\n        return new CcipPreflightPlugin(this.fetchData);\n    }\n}\n*/\nvar Networks = new Map();\n// @TODO: Add a _ethersNetworkObj variable to better detect network ovjects\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nvar _name = /*#__PURE__*/new WeakMap();\nvar _chainId = /*#__PURE__*/new WeakMap();\nvar _plugins = /*#__PURE__*/new WeakMap();\nvar Network = /*#__PURE__*/function () {\n  /**\n   *  Creates a new **Network** for %%name%% and %%chainId%%.\n   */\n  function Network(name, chainId) {\n    _classCallCheck(this, Network);\n    _classPrivateFieldInitSpec(this, _name, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _chainId, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _plugins, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _name, name);\n    _classPrivateFieldSet(this, _chainId, (0, index_js_2.getBigInt)(chainId));\n    _classPrivateFieldSet(this, _plugins, new Map());\n  }\n  /**\n   *  Returns a JSON-compatible representation of a Network.\n   */\n  _createClass(Network, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        name: this.name,\n        chainId: String(this.chainId)\n      };\n    }\n    /**\n     *  The network common name.\n     *\n     *  This is the canonical name, as networks migh have multiple\n     *  names.\n     */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _name);\n    },\n    set: function set(value) {\n      _classPrivateFieldSet(this, _name, value);\n    }\n    /**\n     *  The network chain ID.\n     */\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _chainId);\n    },\n    set: function set(value) {\n      _classPrivateFieldSet(this, _chainId, (0, index_js_2.getBigInt)(value, \"chainId\"));\n    }\n    /**\n     *  Returns true if %%other%% matches this network. Any chain ID\n     *  must match, and if no chain ID is present, the name must match.\n     *\n     *  This method does not currently check for additional properties,\n     *  such as ENS address or plug-in compatibility.\n     */\n  }, {\n    key: \"matches\",\n    value: function matches(other) {\n      if (other == null) {\n        return false;\n      }\n      if (typeof other === \"string\") {\n        try {\n          return this.chainId === (0, index_js_2.getBigInt)(other);\n        } catch (error) {}\n        return this.name === other;\n      }\n      if (typeof other === \"number\" || typeof other === \"bigint\") {\n        try {\n          return this.chainId === (0, index_js_2.getBigInt)(other);\n        } catch (error) {}\n        return false;\n      }\n      if (typeof other === \"object\") {\n        if (other.chainId != null) {\n          try {\n            return this.chainId === (0, index_js_2.getBigInt)(other.chainId);\n          } catch (error) {}\n          return false;\n        }\n        if (other.name != null) {\n          return this.name === other.name;\n        }\n        return false;\n      }\n      return false;\n    }\n    /**\n     *  Returns the list of plugins currently attached to this Network.\n     */\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      return Array.from(_classPrivateFieldGet(this, _plugins).values());\n    }\n    /**\n     *  Attach a new %%plugin%% to this Network. The network name\n     *  must be unique, excluding any fragment.\n     */\n  }, {\n    key: \"attachPlugin\",\n    value: function attachPlugin(plugin) {\n      if (_classPrivateFieldGet(this, _plugins).get(plugin.name)) {\n        throw new Error(\"cannot replace existing plugin: \".concat(plugin.name, \" \"));\n      }\n      _classPrivateFieldGet(this, _plugins).set(plugin.name, plugin.clone());\n      return this;\n    }\n    /**\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\n     *  with fragments will not be returned unless %%name%% includes\n     *  a fragment.\n     */\n  }, {\n    key: \"getPlugin\",\n    value: function getPlugin(name) {\n      return _classPrivateFieldGet(this, _plugins).get(name) || null;\n    }\n    /**\n     *  Gets a list of all plugins that match %%name%%, with otr without\n     *  a fragment.\n     */\n  }, {\n    key: \"getPlugins\",\n    value: function getPlugins(basename) {\n      return this.plugins.filter(function (p) {\n        return p.name.split(\"#\")[0] === basename;\n      });\n    }\n    /**\n     *  Create a copy of this Network.\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new Network(this.name, this.chainId);\n      this.plugins.forEach(function (plugin) {\n        clone.attachPlugin(plugin.clone());\n      });\n      return clone;\n    }\n    /**\n     *  Compute the intrinsic gas required for a transaction.\n     *\n     *  A GasCostPlugin can be attached to override the default\n     *  values.\n     */\n  }, {\n    key: \"computeIntrinsicGas\",\n    value: function computeIntrinsicGas(tx) {\n      var costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || new plugins_network_js_1.GasCostPlugin();\n      var gas = costs.txBase;\n      if (tx.to == null) {\n        gas += costs.txCreate;\n      }\n      if (tx.data) {\n        for (var i = 2; i < tx.data.length; i += 2) {\n          if (tx.data.substring(i, i + 2) === \"00\") {\n            gas += costs.txDataZero;\n          } else {\n            gas += costs.txDataNonzero;\n          }\n        }\n      }\n      if (tx.accessList) {\n        var accessList = (0, index_js_1.accessListify)(tx.accessList);\n        for (var addr in accessList) {\n          gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n        }\n      }\n      return gas;\n    }\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */\n  }], [{\n    key: \"from\",\n    value: function from(network) {\n      injectCommonNetworks();\n      // Default network\n      if (network == null) {\n        return Network.from(\"mainnet\");\n      }\n      // Canonical name or chain ID\n      if (typeof network === \"number\") {\n        network = BigInt(network);\n      }\n      if (typeof network === \"string\" || typeof network === \"bigint\") {\n        var networkFunc = Networks.get(network);\n        if (networkFunc) {\n          return networkFunc();\n        }\n        if (typeof network === \"bigint\") {\n          return new Network(\"unknown\", network);\n        }\n        (0, index_js_2.assertArgument)(false, \"unknown network\", \"network\", network);\n      }\n      // Clonable with network-like abilities\n      if (typeof network.clone === \"function\") {\n        var clone = network.clone();\n        //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n        //}\n        return clone;\n      }\n      // Networkish\n      if (typeof network === \"object\") {\n        (0, index_js_2.assertArgument)(typeof network.name === \"string\" && typeof network.chainId === \"number\", \"invalid network object name or chainId\", \"network\", network);\n        var custom = new Network(network.name, network.chainId);\n        if (network.ensAddress || network.ensNetwork != null) {\n          custom.attachPlugin(new plugins_network_js_1.EnsPlugin(network.ensAddress, network.ensNetwork));\n        }\n        //if ((<any>network).layerOneConnection) {\n        //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n        //}\n        return custom;\n      }\n      (0, index_js_2.assertArgument)(false, \"invalid network\", \"network\", network);\n    }\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */\n  }, {\n    key: \"register\",\n    value: function register(nameOrChainId, networkFunc) {\n      if (typeof nameOrChainId === \"number\") {\n        nameOrChainId = BigInt(nameOrChainId);\n      }\n      var existing = Networks.get(nameOrChainId);\n      if (existing) {\n        (0, index_js_2.assertArgument)(false, \"conflicting network for \".concat(JSON.stringify(existing.name)), \"nameOrChainId\", nameOrChainId);\n      }\n      Networks.set(nameOrChainId, networkFunc);\n    }\n  }]);\n  return Network;\n}();\nexports.Network = Network;\n// See: https://chainlist.org\nvar injected = false;\nfunction injectCommonNetworks() {\n  if (injected) {\n    return;\n  }\n  injected = true;\n  /// Register popular Ethereum networks\n  function registerEth(name, chainId, options) {\n    var func = function func() {\n      var network = new Network(name, chainId);\n      // We use 0 to disable ENS\n      if (options.ensNetwork != null) {\n        network.attachPlugin(new plugins_network_js_1.EnsPlugin(null, options.ensNetwork));\n      }\n      if (options.priorityFee) {\n        //                network.attachPlugin(new MaxPriorityFeePlugin(options.priorityFee));\n      }\n      /*\n                  if (options.etherscan) {\n                      const { url, apiKey } = options.etherscan;\n                      network.attachPlugin(new EtherscanPlugin(url, apiKey));\n                  }\n      */\n      network.attachPlugin(new plugins_network_js_1.GasCostPlugin());\n      return network;\n    };\n    // Register the network by name and chain ID\n    Network.register(name, func);\n    Network.register(chainId, func);\n    if (options.altNames) {\n      options.altNames.forEach(function (name) {\n        Network.register(name, func);\n      });\n    }\n  }\n  registerEth(\"mainnet\", 1, {\n    ensNetwork: 1,\n    altNames: [\"homestead\"]\n  });\n  registerEth(\"ropsten\", 3, {\n    ensNetwork: 3\n  });\n  registerEth(\"rinkeby\", 4, {\n    ensNetwork: 4\n  });\n  registerEth(\"goerli\", 5, {\n    ensNetwork: 5\n  });\n  registerEth(\"kovan\", 42, {\n    ensNetwork: 42\n  });\n  registerEth(\"sepolia\", 11155111, {});\n  registerEth(\"classic\", 61, {});\n  registerEth(\"classicKotti\", 6, {});\n  registerEth(\"xdai\", 100, {\n    ensNetwork: 1\n  });\n  registerEth(\"optimism\", 10, {\n    ensNetwork: 1,\n    etherscan: {\n      url: \"https:/\\/api-optimistic.etherscan.io/\"\n    }\n  });\n  registerEth(\"optimism-goerli\", 420, {\n    etherscan: {\n      url: \"https:/\\/api-goerli-optimistic.etherscan.io/\"\n    }\n  });\n  registerEth(\"arbitrum\", 42161, {\n    ensNetwork: 1,\n    etherscan: {\n      url: \"https:/\\/api.arbiscan.io/\"\n    }\n  });\n  registerEth(\"arbitrum-goerli\", 421613, {\n    etherscan: {\n      url: \"https:/\\/api-goerli.arbiscan.io/\"\n    }\n  });\n  // Polygon has a 35 gwei maxPriorityFee requirement\n  registerEth(\"matic\", 137, {\n    ensNetwork: 1,\n    //        priorityFee: 35000000000,\n    etherscan: {\n      //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api.polygonscan.com/\"\n    }\n  });\n  registerEth(\"matic-mumbai\", 80001, {\n    altNames: [\"maticMumbai\", \"maticmum\"],\n    //        priorityFee: 35000000000,\n    etherscan: {\n      //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api-testnet.polygonscan.com/\"\n    }\n  });\n  registerEth(\"bnb\", 56, {\n    ensNetwork: 1,\n    etherscan: {\n      //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api.bscscan.com\"\n    }\n  });\n  registerEth(\"bnbt\", 97, {\n    etherscan: {\n      //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api-testnet.bscscan.com\"\n    }\n  });\n}","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","_classPrivateFieldInitSpec","_classPrivateFieldGet","_classPrivateFieldSet","index_js_1","index_js_2","plugins_network_js_1","Networks","Map","_name","WeakMap","_chainId","_plugins","Network","name","chainId","writable","value","getBigInt","key","toJSON","String","get","set","matches","other","error","Array","from","values","attachPlugin","plugin","Error","concat","clone","getPlugin","getPlugins","basename","plugins","filter","p","split","forEach","computeIntrinsicGas","tx","costs","GasCostPlugin","gas","txBase","to","txCreate","data","i","length","substring","txDataZero","txDataNonzero","accessList","accessListify","addr","txAccessListAddress","txAccessListStorageKey","storageKeys","network","injectCommonNetworks","BigInt","networkFunc","assertArgument","custom","ensAddress","ensNetwork","EnsPlugin","register","nameOrChainId","existing","JSON","stringify","exports","injected","registerEth","options","func","priorityFee","altNames","etherscan","url"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/providers/network.ts"],"sourcesContent":["/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\n\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assertArgument } from \"../utils/index.js\";\n\nimport { EnsPlugin, GasCostPlugin } from \"./plugins-network.js\";\n//import { EtherscanPlugin } from \"./provider-etherscan-base.js\";\n\nimport type { BigNumberish } from \"../utils/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type { NetworkPlugin } from \"./plugins-network.js\";\n\n\n/**\n *  A Networkish can be used to allude to a Network, by specifing:\n *  - a [[Network]] object\n *  - a well-known (or registered) network name\n *  - a well-known (or registered) chain ID\n *  - an object with sufficient details to describe a network\n */\nexport type Networkish = Network | number | bigint | string | {\n    name?: string,\n    chainId?: number,\n    //layerOneConnection?: Provider,\n    ensAddress?: string,\n    ensNetwork?: number\n};\n\n\n\n\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n\n/* * * *\nexport class PriceOraclePlugin extends NetworkPlugin {\n    readonly address!: string;\n\n    constructor(address: string) {\n        super(\"org.ethers.plugins.price-oracle\");\n        defineProperties<PriceOraclePlugin>(this, { address });\n    }\n\n    clone(): PriceOraclePlugin {\n        return new PriceOraclePlugin(this.address);\n    }\n}\n*/\n\n// Networks or clients with a higher need for security (such as clients\n// that may automatically make CCIP requests without user interaction)\n// can use this plugin to anonymize requests or intercept CCIP requests\n// to notify and/or receive authorization from the user\n/* * * *\nexport type FetchDataFunc = (req: Frozen<FetchRequest>) => Promise<FetchRequest>;\nexport class CcipPreflightPlugin extends NetworkPlugin {\n    readonly fetchData!: FetchDataFunc;\n\n    constructor(fetchData: FetchDataFunc) {\n        super(\"org.ethers.plugins.ccip-preflight\");\n        defineProperties<CcipPreflightPlugin>(this, { fetchData });\n    }\n\n    clone(): CcipPreflightPlugin {\n        return new CcipPreflightPlugin(this.fetchData);\n    }\n}\n*/\n\nconst Networks: Map<string | bigint, () => Network> = new Map();\n\n// @TODO: Add a _ethersNetworkObj variable to better detect network ovjects\n\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nexport class Network {\n    #name: string;\n    #chainId: bigint;\n\n    #plugins: Map<string, NetworkPlugin>;\n\n    /**\n     *  Creates a new **Network** for %%name%% and %%chainId%%.\n     */\n    constructor(name: string, chainId: BigNumberish) {\n        this.#name = name;\n        this.#chainId = getBigInt(chainId);\n        this.#plugins = new Map();\n    }\n\n    /**\n     *  Returns a JSON-compatible representation of a Network.\n     */\n    toJSON(): any {\n        return { name: this.name, chainId: String(this.chainId) };\n    }\n\n    /**\n     *  The network common name.\n     *\n     *  This is the canonical name, as networks migh have multiple\n     *  names.\n     */\n    get name(): string { return this.#name; }\n    set name(value: string) { this.#name =  value; }\n\n    /**\n     *  The network chain ID.\n     */\n    get chainId(): bigint { return this.#chainId; }\n    set chainId(value: BigNumberish) { this.#chainId = getBigInt(value, \"chainId\"); }\n\n    /**\n     *  Returns true if %%other%% matches this network. Any chain ID\n     *  must match, and if no chain ID is present, the name must match.\n     *\n     *  This method does not currently check for additional properties,\n     *  such as ENS address or plug-in compatibility.\n     */\n    matches(other: Networkish): boolean {\n        if (other == null) { return false; }\n\n        if (typeof(other) === \"string\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            } catch (error) { }\n            return (this.name === other);\n        }\n\n        if (typeof(other) === \"number\" || typeof(other) === \"bigint\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            } catch (error) { }\n            return false;\n        }\n\n        if (typeof(other) === \"object\") {\n            if (other.chainId != null) {\n                try {\n                    return (this.chainId === getBigInt(other.chainId));\n                } catch (error) { }\n                return false;\n            }\n            if (other.name != null) {\n                return (this.name === other.name);\n            }\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     *  Returns the list of plugins currently attached to this Network.\n     */\n    get plugins(): Array<NetworkPlugin> {\n        return Array.from(this.#plugins.values());\n    }\n\n    /**\n     *  Attach a new %%plugin%% to this Network. The network name\n     *  must be unique, excluding any fragment.\n     */\n    attachPlugin(plugin: NetworkPlugin): this {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${ plugin.name } `);\n        }\n        this.#plugins.set(plugin.name, plugin.clone());\n        return this;\n    }\n\n    /**\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\n     *  with fragments will not be returned unless %%name%% includes\n     *  a fragment.\n     */\n    getPlugin<T extends NetworkPlugin = NetworkPlugin>(name: string): null | T {\n        return <T>(this.#plugins.get(name)) || null;\n    }\n\n    /**\n     *  Gets a list of all plugins that match %%name%%, with otr without\n     *  a fragment.\n     */\n    getPlugins<T extends NetworkPlugin = NetworkPlugin>(basename: string): Array<T> {\n        return <Array<T>>(this.plugins.filter((p) => (p.name.split(\"#\")[0] === basename)));\n    }\n\n    /**\n     *  Create a copy of this Network.\n     */\n    clone(): Network {\n        const clone = new Network(this.name, this.chainId);\n        this.plugins.forEach((plugin) => {\n            clone.attachPlugin(plugin.clone());\n        });\n        return clone;\n    }\n\n    /**\n     *  Compute the intrinsic gas required for a transaction.\n     *\n     *  A GasCostPlugin can be attached to override the default\n     *  values.\n     */\n    computeIntrinsicGas(tx: TransactionLike): number {\n        const costs = this.getPlugin<GasCostPlugin>(\"org.ethers.plugins.network.GasCost\") || (new GasCostPlugin());\n\n        let gas = costs.txBase;\n        if (tx.to == null) { gas += costs.txCreate; }\n        if (tx.data) {\n            for (let i = 2; i < tx.data.length; i += 2) {\n                if (tx.data.substring(i, i + 2) === \"00\") {\n                    gas += costs.txDataZero;\n                } else {\n                    gas += costs.txDataNonzero;\n                }\n            }\n        }\n\n        if (tx.accessList) {\n            const accessList = accessListify(tx.accessList);\n            for (const addr in accessList) {\n                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n            }\n        }\n\n        return gas;\n    }\n\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */\n    static from(network?: Networkish): Network {\n        injectCommonNetworks();\n\n        // Default network\n        if (network == null) { return Network.from(\"mainnet\"); }\n\n        // Canonical name or chain ID\n        if (typeof(network) === \"number\") { network = BigInt(network); }\n        if (typeof(network) === \"string\" || typeof(network) === \"bigint\") {\n            const networkFunc = Networks.get(network);\n            if (networkFunc) { return networkFunc(); }\n            if (typeof(network) === \"bigint\") {\n                return new Network(\"unknown\", network);\n            }\n\n            assertArgument(false, \"unknown network\", \"network\", network);\n        }\n\n        // Clonable with network-like abilities\n        if (typeof((<Network>network).clone) === \"function\") {\n            const clone = (<Network>network).clone();\n            //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n            //}\n            return clone;\n        }\n\n        // Networkish\n        if (typeof(network) === \"object\") {\n            assertArgument(typeof(network.name) === \"string\" && typeof(network.chainId) === \"number\",\n                \"invalid network object name or chainId\", \"network\", network);\n\n            const custom = new Network(<string>(network.name), <number>(network.chainId));\n\n            if ((<any>network).ensAddress || (<any>network).ensNetwork != null) {\n                custom.attachPlugin(new EnsPlugin((<any>network).ensAddress, (<any>network).ensNetwork));\n            }\n\n            //if ((<any>network).layerOneConnection) {\n            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n            //}\n\n            return custom;\n        }\n\n        assertArgument(false, \"invalid network\", \"network\", network);\n    }\n\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */\n    static register(nameOrChainId: string | number | bigint, networkFunc: () => Network): void {\n        if (typeof(nameOrChainId) === \"number\") { nameOrChainId = BigInt(nameOrChainId); }\n        const existing = Networks.get(nameOrChainId);\n        if (existing) {\n            assertArgument(false, `conflicting network for ${ JSON.stringify(existing.name) }`, \"nameOrChainId\", nameOrChainId);\n        }\n        Networks.set(nameOrChainId, networkFunc);\n    }\n}\n\n\ntype Options = {\n    ensNetwork?: number;\n    priorityFee?: number\n    altNames?: Array<string>;\n    etherscan?: { url: string };\n};\n\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks(): void {\n    if (injected) { return; }\n    injected = true;\n\n    /// Register popular Ethereum networks\n    function registerEth(name: string, chainId: number, options: Options): void {\n        const func = function() {\n            const network = new Network(name, chainId);\n\n            // We use 0 to disable ENS\n            if (options.ensNetwork != null) {\n                network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n            }\n\n            if (options.priorityFee) {\n//                network.attachPlugin(new MaxPriorityFeePlugin(options.priorityFee));\n            }\n/*\n            if (options.etherscan) {\n                const { url, apiKey } = options.etherscan;\n                network.attachPlugin(new EtherscanPlugin(url, apiKey));\n            }\n*/\n            network.attachPlugin(new GasCostPlugin());\n\n            return network;\n        };\n\n        // Register the network by name and chain ID\n        Network.register(name, func);\n        Network.register(chainId, func);\n\n        if (options.altNames) {\n            options.altNames.forEach((name) => {\n                Network.register(name, func);\n            });\n        }\n    }\n\n    registerEth(\"mainnet\", 1, { ensNetwork: 1, altNames: [ \"homestead\" ] });\n    registerEth(\"ropsten\", 3, { ensNetwork: 3 });\n    registerEth(\"rinkeby\", 4, { ensNetwork: 4 });\n    registerEth(\"goerli\", 5, { ensNetwork: 5 });\n    registerEth(\"kovan\", 42, { ensNetwork: 42 });\n    registerEth(\"sepolia\", 11155111, { });\n\n    registerEth(\"classic\", 61, { });\n    registerEth(\"classicKotti\", 6, { });\n\n    registerEth(\"xdai\", 100, { ensNetwork: 1 });\n\n    registerEth(\"optimism\", 10, {\n        ensNetwork: 1,\n        etherscan: { url: \"https:/\\/api-optimistic.etherscan.io/\" }\n    });\n    registerEth(\"optimism-goerli\", 420, {\n        etherscan: { url: \"https:/\\/api-goerli-optimistic.etherscan.io/\" }\n    });\n\n    registerEth(\"arbitrum\", 42161, {\n        ensNetwork: 1,\n        etherscan: { url: \"https:/\\/api.arbiscan.io/\" }\n    });\n    registerEth(\"arbitrum-goerli\", 421613, {\n        etherscan: { url: \"https:/\\/api-goerli.arbiscan.io/\" }\n    });\n\n    // Polygon has a 35 gwei maxPriorityFee requirement\n    registerEth(\"matic\", 137, {\n        ensNetwork: 1,\n//        priorityFee: 35000000000,\n        etherscan: {\n//            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n            url: \"https:/\\/api.polygonscan.com/\"\n        }\n    });\n    registerEth(\"matic-mumbai\", 80001, {\n        altNames: [ \"maticMumbai\", \"maticmum\" ],  // @TODO: Future remove these alts\n//        priorityFee: 35000000000,\n        etherscan: {\n//            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n            url: \"https:/\\/api-testnet.polygonscan.com/\"\n        }\n    });\n\n    registerEth(\"bnb\", 56, {\n        ensNetwork: 1,\n        etherscan: {\n//            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n            url: \"http:/\\/api.bscscan.com\"\n        }\n    });\n    registerEth(\"bnbt\", 97, {\n        etherscan: {\n//            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n            url: \"http:/\\/api-testnet.bscscan.com\"\n        }\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}