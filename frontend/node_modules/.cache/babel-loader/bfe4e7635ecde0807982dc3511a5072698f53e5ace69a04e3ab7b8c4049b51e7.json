{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _get = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classPrivateMethodInitSpec = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _classPrivateMethodGet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateMethodGet.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _asyncToGenerator = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FallbackProvider = void 0;\n/**\n *  A **FallbackProvider** providers resiliance, security and performatnce\n *  in a way that is customizable and configurable.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */\nvar index_js_1 = require(\"../utils/index.js\");\nvar abstract_provider_js_1 = require(\"./abstract-provider.js\");\nvar network_js_1 = require(\"./network.js\");\nvar BN_1 = BigInt(\"1\");\nvar BN_2 = BigInt(\"2\");\nfunction shuffle(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var tmp = array[i];\n    array[i] = array[j];\n    array[j] = tmp;\n  }\n}\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n}\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction stringify(value) {\n  return JSON.stringify(value, function (key, value) {\n    if (typeof value === \"bigint\") {\n      return {\n        type: \"bigint\",\n        value: value.toString()\n      };\n    }\n    return value;\n  });\n}\n;\nvar defaultConfig = {\n  stallTimeout: 400,\n  priority: 1,\n  weight: 1\n};\nvar defaultState = {\n  blockNumber: -2,\n  requests: 0,\n  lateResponses: 0,\n  errorResponses: 0,\n  outOfSync: -1,\n  unsupportedEvents: 0,\n  rollingDuration: 0,\n  score: 0,\n  _network: null,\n  _updateNumber: null,\n  _totalTime: 0,\n  _lastFatalError: null,\n  _lastFatalErrorTimestamp: 0\n};\nfunction waitForSync(_x, _x2) {\n  return _waitForSync.apply(this, arguments);\n}\nfunction _waitForSync() {\n  _waitForSync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(config, blockNumber) {\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!(config.blockNumber < 0 || config.blockNumber < blockNumber)) {\n            _context7.next = 9;\n            break;\n          }\n          if (!config._updateNumber) {\n            config._updateNumber = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n              var _blockNumber;\n              return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                while (1) switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.prev = 0;\n                    _context6.next = 3;\n                    return config.provider.getBlockNumber();\n                  case 3:\n                    _blockNumber = _context6.sent;\n                    if (_blockNumber > config.blockNumber) {\n                      config.blockNumber = _blockNumber;\n                    }\n                    _context6.next = 12;\n                    break;\n                  case 7:\n                    _context6.prev = 7;\n                    _context6.t0 = _context6[\"catch\"](0);\n                    config.blockNumber = -2;\n                    config._lastFatalError = _context6.t0;\n                    config._lastFatalErrorTimestamp = getTime();\n                  case 12:\n                    config._updateNumber = null;\n                  case 13:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }, _callee6, null, [[0, 7]]);\n            }))();\n          }\n          _context7.next = 4;\n          return config._updateNumber;\n        case 4:\n          config.outOfSync++;\n          if (!config._lastFatalError) {\n            _context7.next = 7;\n            break;\n          }\n          return _context7.abrupt(\"break\", 9);\n        case 7:\n          _context7.next = 0;\n          break;\n        case 9:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return _waitForSync.apply(this, arguments);\n}\nfunction _normalize(value) {\n  if (value == null) {\n    return \"null\";\n  }\n  if (Array.isArray(value)) {\n    return \"[\" + value.map(_normalize).join(\",\") + \"]\";\n  }\n  if (typeof value === \"object\" && typeof value.toJSON === \"function\") {\n    return _normalize(value.toJSON());\n  }\n  switch (typeof value) {\n    case \"boolean\":\n    case \"symbol\":\n      return value.toString();\n    case \"bigint\":\n    case \"number\":\n      return BigInt(value).toString();\n    case \"string\":\n      return JSON.stringify(value);\n    case \"object\":\n      {\n        var keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map(function (k) {\n          return \"\".concat(JSON.stringify(k), \":\").concat(_normalize(value[k]));\n        }).join(\",\") + \"}\";\n      }\n  }\n  console.log(\"Could not serialize\", value);\n  throw new Error(\"Hmm...\");\n}\nfunction normalizeResult(value) {\n  if (\"error\" in value) {\n    var error = value.error;\n    return {\n      tag: _normalize(error),\n      value: error\n    };\n  }\n  var result = value.result;\n  return {\n    tag: _normalize(result),\n    value: result\n  };\n}\n// This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\nfunction checkQuorum(quorum, results) {\n  var tally = new Map();\n  var _iterator = _createForOfIteratorHelper(results),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _step.value,\n        value = _step$value.value,\n        tag = _step$value.tag,\n        weight = _step$value.weight;\n      var t = tally.get(tag) || {\n        value: value,\n        weight: 0\n      };\n      t.weight += weight;\n      tally.set(tag, t);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var best = null;\n  var _iterator2 = _createForOfIteratorHelper(tally.values()),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var r = _step2.value;\n      if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n        best = r;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (best) {\n    return best.value;\n  }\n  return undefined;\n}\nfunction getMedian(quorum, results) {\n  var resultWeight = 0;\n  var errorMap = new Map();\n  var bestError = null;\n  var values = [];\n  var _iterator3 = _createForOfIteratorHelper(results),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _step3.value,\n        value = _step3$value.value,\n        tag = _step3$value.tag,\n        weight = _step3$value.weight;\n      if (value instanceof Error) {\n        var e = errorMap.get(tag) || {\n          value: value,\n          weight: 0\n        };\n        e.weight += weight;\n        errorMap.set(tag, e);\n        if (bestError == null || e.weight > bestError.weight) {\n          bestError = e;\n        }\n      } else {\n        values.push(BigInt(value));\n        resultWeight += weight;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  if (resultWeight < quorum) {\n    // We have quorum for an error\n    if (bestError && bestError.weight >= quorum) {\n      return bestError.value;\n    }\n    // We do not have quorum for a result\n    return undefined;\n  }\n  // Get the sorted values\n  values.sort(function (a, b) {\n    return a < b ? -1 : b > a ? 1 : 0;\n  });\n  var mid = Math.floor(values.length / 2);\n  // Odd-length; take the middle value\n  if (values.length % 2) {\n    return values[mid];\n  }\n  // Even length; take the ceiling of the mean of the center two values\n  return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\nfunction getAnyResult(quorum, results) {\n  // If any value or error meets quorum, that is our preferred result\n  var result = checkQuorum(quorum, results);\n  if (result !== undefined) {\n    return result;\n  }\n  // Otherwise, do we have any result?\n  var _iterator4 = _createForOfIteratorHelper(results),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var r = _step4.value;\n      if (r.value) {\n        return r.value;\n      }\n    }\n    // Nope!\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return undefined;\n}\nfunction getFuzzyMode(quorum, results) {\n  if (quorum === 1) {\n    return (0, index_js_1.getNumber)(getMedian(quorum, results), \"%internal\");\n  }\n  var tally = new Map();\n  var add = function add(result, weight) {\n    var t = tally.get(result) || {\n      result: result,\n      weight: 0\n    };\n    t.weight += weight;\n    tally.set(result, t);\n  };\n  var _iterator5 = _createForOfIteratorHelper(results),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var _step5$value = _step5.value,\n        weight = _step5$value.weight,\n        value = _step5$value.value;\n      var r = (0, index_js_1.getNumber)(value);\n      add(r - 1, weight);\n      add(r, weight);\n      add(r + 1, weight);\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  var bestWeight = 0;\n  var bestResult = undefined;\n  var _iterator6 = _createForOfIteratorHelper(tally.values()),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _step6.value,\n        _weight = _step6$value.weight,\n        result = _step6$value.result;\n      // Use this result, if this result meets quorum and has either:\n      // - a better weight\n      // - or equal weight, but the result is larger\n      if (_weight >= quorum && (_weight > bestWeight || bestResult != null && _weight === bestWeight && result > bestResult)) {\n        bestWeight = _weight;\n        bestResult = result;\n      }\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  return bestResult;\n}\n/**\n *  A **FallbackProvider** manages several [[Providers]] providing\n *  resiliance by switching between slow or misbehaving nodes, security\n *  by requiring multiple backends to aggree and performance by allowing\n *  faster backends to respond earlier.\n *\n */\nvar _configs = /*#__PURE__*/new WeakMap();\nvar _height = /*#__PURE__*/new WeakMap();\nvar _initialSyncPromise = /*#__PURE__*/new WeakMap();\nvar _getNextConfig = /*#__PURE__*/new WeakSet();\nvar _addRunner = /*#__PURE__*/new WeakSet();\nvar _initialSync = /*#__PURE__*/new WeakSet();\nvar _checkQuorum = /*#__PURE__*/new WeakSet();\nvar _waitForQuorum = /*#__PURE__*/new WeakSet();\nvar FallbackProvider = /*#__PURE__*/function (_abstract_provider_js) {\n  _inherits(FallbackProvider, _abstract_provider_js);\n  var _super = _createSuper(FallbackProvider);\n  /**\n   *  Creates a new **FallbackProvider** with %%providers%% connected to\n   *  %%network%%.\n   *\n   *  If a [[Provider]] is included in %%providers%%, defaults are used\n   *  for the configuration.\n   */\n  function FallbackProvider(providers, _network) {\n    var _this;\n    _classCallCheck(this, FallbackProvider);\n    _this = _super.call(this, _network);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _waitForQuorum);\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _checkQuorum);\n    // Initializes the blockNumber and network for each runner and\n    // blocks until initialized\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _initialSync);\n    // Adds a new runner (if available) to running.\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _addRunner);\n    // Grab the next (random) config that is not already part of\n    // the running set\n    _classPrivateMethodInitSpec(_assertThisInitialized(_this), _getNextConfig);\n    /**\n     *  The number of backends that must agree on a value before it is\n     *  accpeted.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"quorum\", void 0);\n    /**\n     *  @_ignore:\n     */\n    _defineProperty(_assertThisInitialized(_this), \"eventQuorum\", void 0);\n    /**\n     *  @_ignore:\n     */\n    _defineProperty(_assertThisInitialized(_this), \"eventWorkers\", void 0);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _configs, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _height, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this), _initialSyncPromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(_assertThisInitialized(_this), _configs, providers.map(function (p) {\n      if (p instanceof abstract_provider_js_1.AbstractProvider) {\n        return Object.assign({\n          provider: p\n        }, defaultConfig, defaultState);\n      } else {\n        return Object.assign({}, defaultConfig, p, defaultState);\n      }\n    }));\n    _classPrivateFieldSet(_assertThisInitialized(_this), _height, -2);\n    _classPrivateFieldSet(_assertThisInitialized(_this), _initialSyncPromise, null);\n    _this.quorum = 2; //Math.ceil(providers.length /  2);\n    _this.eventQuorum = 1;\n    _this.eventWorkers = 1;\n    (0, index_js_1.assertArgument)(_this.quorum <= _classPrivateFieldGet(_assertThisInitialized(_this), _configs).reduce(function (a, c) {\n      return a + c.weight;\n    }, 0), \"quorum exceed provider wieght\", \"quorum\", _this.quorum);\n    return _this;\n  }\n  _createClass(FallbackProvider, [{\n    key: \"providerConfigs\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _configs).map(function (c) {\n        var result = Object.assign({}, c);\n        for (var key in result) {\n          if (key[0] === \"_\") {\n            delete result[key];\n          }\n        }\n        return result;\n      });\n    }\n  }, {\n    key: \"_detectNetwork\",\n    value: function () {\n      var _detectNetwork2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = network_js_1.Network;\n              _context.t1 = (0, index_js_1.getBigInt);\n              _context.next = 4;\n              return this._perform({\n                method: \"chainId\"\n              });\n            case 4:\n              _context.t2 = _context.sent;\n              _context.t3 = (0, _context.t1)(_context.t2);\n              return _context.abrupt(\"return\", _context.t0.from.call(_context.t0, _context.t3));\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _detectNetwork() {\n        return _detectNetwork2.apply(this, arguments);\n      }\n      return _detectNetwork;\n    }() // @TODO: Add support to select providers to be the event subscriber\n    //_getSubscriber(sub: Subscription): Subscriber {\n    //    throw new Error(\"@TODO\");\n    //}\n    /**\n     *  Transforms a %%req%% into the correct method call on %%provider%%.\n     */\n  }, {\n    key: \"_translatePerform\",\n    value: function () {\n      var _translatePerform2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(provider, req) {\n        var block;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = req.method;\n              _context2.next = _context2.t0 === \"broadcastTransaction\" ? 3 : _context2.t0 === \"call\" ? 6 : _context2.t0 === \"chainId\" ? 9 : _context2.t0 === \"estimateGas\" ? 12 : _context2.t0 === \"getBalance\" ? 15 : _context2.t0 === \"getBlock\" ? 18 : _context2.t0 === \"getBlockNumber\" ? 22 : _context2.t0 === \"getCode\" ? 25 : _context2.t0 === \"getGasPrice\" ? 28 : _context2.t0 === \"getLogs\" ? 31 : _context2.t0 === \"getStorage\" ? 34 : _context2.t0 === \"getTransaction\" ? 37 : _context2.t0 === \"getTransactionCount\" ? 40 : _context2.t0 === \"getTransactionReceipt\" ? 43 : _context2.t0 === \"getTransactionResult\" ? 46 : 49;\n              break;\n            case 3:\n              _context2.next = 5;\n              return provider.broadcastTransaction(req.signedTransaction);\n            case 5:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 6:\n              _context2.next = 8;\n              return provider.call(Object.assign({}, req.transaction, {\n                blockTag: req.blockTag\n              }));\n            case 8:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 9:\n              _context2.next = 11;\n              return provider.getNetwork();\n            case 11:\n              return _context2.abrupt(\"return\", _context2.sent.chainId);\n            case 12:\n              _context2.next = 14;\n              return provider.estimateGas(req.transaction);\n            case 14:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 15:\n              _context2.next = 17;\n              return provider.getBalance(req.address, req.blockTag);\n            case 17:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 18:\n              block = \"blockHash\" in req ? req.blockHash : req.blockTag;\n              _context2.next = 21;\n              return provider.getBlock(block, req.includeTransactions);\n            case 21:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 22:\n              _context2.next = 24;\n              return provider.getBlockNumber();\n            case 24:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 25:\n              _context2.next = 27;\n              return provider.getCode(req.address, req.blockTag);\n            case 27:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 28:\n              _context2.next = 30;\n              return provider.getFeeData();\n            case 30:\n              return _context2.abrupt(\"return\", _context2.sent.gasPrice);\n            case 31:\n              _context2.next = 33;\n              return provider.getLogs(req.filter);\n            case 33:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 34:\n              _context2.next = 36;\n              return provider.getStorage(req.address, req.position, req.blockTag);\n            case 36:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 37:\n              _context2.next = 39;\n              return provider.getTransaction(req.hash);\n            case 39:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 40:\n              _context2.next = 42;\n              return provider.getTransactionCount(req.address, req.blockTag);\n            case 42:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 43:\n              _context2.next = 45;\n              return provider.getTransactionReceipt(req.hash);\n            case 45:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 46:\n              _context2.next = 48;\n              return provider.getTransactionResult(req.hash);\n            case 48:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 49:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function _translatePerform(_x3, _x4) {\n        return _translatePerform2.apply(this, arguments);\n      }\n      return _translatePerform;\n    }()\n  }, {\n    key: \"_perform\",\n    value: function () {\n      var _perform2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(req) {\n        var results, _result2, running, i, result, _iterator7, _step7, runner;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(req.method === \"broadcastTransaction\")) {\n                _context4.next = 9;\n                break;\n              }\n              _context4.next = 3;\n              return Promise.all(_classPrivateFieldGet(this, _configs).map( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref) {\n                  var provider, weight, _result;\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) switch (_context3.prev = _context3.next) {\n                      case 0:\n                        provider = _ref.provider, weight = _ref.weight;\n                        _context3.prev = 1;\n                        _context3.next = 4;\n                        return provider._perform(req);\n                      case 4:\n                        _result = _context3.sent;\n                        return _context3.abrupt(\"return\", Object.assign(normalizeResult({\n                          result: _result\n                        }), {\n                          weight: weight\n                        }));\n                      case 8:\n                        _context3.prev = 8;\n                        _context3.t0 = _context3[\"catch\"](1);\n                        return _context3.abrupt(\"return\", Object.assign(normalizeResult({\n                          error: _context3.t0\n                        }), {\n                          weight: weight\n                        }));\n                      case 11:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }, _callee3, null, [[1, 8]]);\n                }));\n                return function (_x6) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()));\n            case 3:\n              results = _context4.sent;\n              _result2 = getAnyResult(this.quorum, results);\n              (0, index_js_1.assert)(_result2 !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n                request: \"%sub-requests\",\n                info: {\n                  request: req,\n                  results: results.map(stringify)\n                }\n              });\n              if (!(_result2 instanceof Error)) {\n                _context4.next = 8;\n                break;\n              }\n              throw _result2;\n            case 8:\n              return _context4.abrupt(\"return\", _result2);\n            case 9:\n              _context4.next = 11;\n              return _classPrivateMethodGet(this, _initialSync, _initialSync2).call(this);\n            case 11:\n              // Bootstrap enough runners to meet quorum\n              running = new Set();\n              for (i = 0; i < this.quorum; i++) {\n                _classPrivateMethodGet(this, _addRunner, _addRunner2).call(this, running, req);\n              }\n              _context4.next = 15;\n              return _classPrivateMethodGet(this, _waitForQuorum, _waitForQuorum2).call(this, running, req);\n            case 15:\n              result = _context4.sent;\n              // Track requests sent to a provider that are still\n              // outstanding after quorum has been otherwise found\n              _iterator7 = _createForOfIteratorHelper(running);\n              try {\n                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                  runner = _step7.value;\n                  if (runner.perform && runner.result == null) {\n                    runner.config.lateResponses++;\n                  }\n                }\n              } catch (err) {\n                _iterator7.e(err);\n              } finally {\n                _iterator7.f();\n              }\n              return _context4.abrupt(\"return\", result);\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function _perform(_x5) {\n        return _perform2.apply(this, arguments);\n      }\n      return _perform;\n    }()\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _destroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _iterator8, _step8, provider;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _iterator8 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _configs));\n              try {\n                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                  provider = _step8.value.provider;\n                  provider.destroy();\n                }\n              } catch (err) {\n                _iterator8.e(err);\n              } finally {\n                _iterator8.f();\n              }\n              _get(_getPrototypeOf(FallbackProvider.prototype), \"destroy\", this).call(this);\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function destroy() {\n        return _destroy.apply(this, arguments);\n      }\n      return destroy;\n    }()\n  }]);\n  return FallbackProvider;\n}(abstract_provider_js_1.AbstractProvider);\nfunction _getNextConfig2(running) {\n  // @TODO: Maybe do a check here to favour (heavily) providers that\n  //        do not require waitForSync and disfavour providers that\n  //        seem down-ish or are behaving slowly\n  var configs = Array.from(running).map(function (r) {\n    return r.config;\n  });\n  // Shuffle the states, sorted by priority\n  var allConfigs = _classPrivateFieldGet(this, _configs).slice();\n  shuffle(allConfigs);\n  allConfigs.sort(function (a, b) {\n    return b.priority - a.priority;\n  });\n  var _iterator9 = _createForOfIteratorHelper(allConfigs),\n    _step9;\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var config = _step9.value;\n      if (config._lastFatalError) {\n        continue;\n      }\n      if (configs.indexOf(config) === -1) {\n        return config;\n      }\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n  return null;\n}\nfunction _addRunner2(running, req) {\n  var _this2 = this;\n  var config = _classPrivateMethodGet(this, _getNextConfig, _getNextConfig2).call(this, running);\n  // No runners available\n  if (config == null) {\n    return null;\n  }\n  // Create a new runner\n  var runner = {\n    config: config,\n    result: null,\n    didBump: false,\n    perform: null,\n    staller: null\n  };\n  var now = getTime();\n  // Start performing this operation\n  runner.perform = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n    var result, dt;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          config.requests++;\n          _context8.next = 4;\n          return _this2._translatePerform(config.provider, req);\n        case 4:\n          result = _context8.sent;\n          runner.result = {\n            result: result\n          };\n          _context8.next = 12;\n          break;\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          config.errorResponses++;\n          runner.result = {\n            error: _context8.t0\n          };\n        case 12:\n          dt = getTime() - now;\n          config._totalTime += dt;\n          config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n          runner.perform = null;\n        case 16:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8, null, [[0, 8]]);\n  }))();\n  // Start a staller; when this times out, it's time to force\n  // kicking off another runner because we are taking too long\n  runner.staller = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return stall(config.stallTimeout);\n        case 2:\n          runner.staller = null;\n        case 3:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9);\n  }))();\n  running.add(runner);\n  return runner;\n}\nfunction _initialSync2() {\n  return _initialSync3.apply(this, arguments);\n}\nfunction _initialSync3() {\n  _initialSync3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n    var _this3 = this;\n    var initialSync, promises;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          initialSync = _classPrivateFieldGet(this, _initialSyncPromise);\n          if (!initialSync) {\n            promises = [];\n            _classPrivateFieldGet(this, _configs).forEach(function (config) {\n              promises.push(_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n                return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n                  while (1) switch (_context10.prev = _context10.next) {\n                    case 0:\n                      _context10.next = 2;\n                      return waitForSync(config, 0);\n                    case 2:\n                      if (config._lastFatalError) {\n                        _context10.next = 6;\n                        break;\n                      }\n                      _context10.next = 5;\n                      return config.provider.getNetwork();\n                    case 5:\n                      config._network = _context10.sent;\n                    case 6:\n                    case \"end\":\n                      return _context10.stop();\n                  }\n                }, _callee10);\n              }))());\n            });\n            _classPrivateFieldSet(this, _initialSyncPromise, initialSync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n              var chainId, _iterator10, _step10, config, network;\n              return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n                while (1) switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _context11.next = 2;\n                    return Promise.all(promises);\n                  case 2:\n                    // Check all the networks match\n                    chainId = null;\n                    _iterator10 = _createForOfIteratorHelper(_classPrivateFieldGet(_this3, _configs));\n                    _context11.prev = 4;\n                    _iterator10.s();\n                  case 6:\n                    if ((_step10 = _iterator10.n()).done) {\n                      _context11.next = 14;\n                      break;\n                    }\n                    config = _step10.value;\n                    if (!config._lastFatalError) {\n                      _context11.next = 10;\n                      break;\n                    }\n                    return _context11.abrupt(\"continue\", 12);\n                  case 10:\n                    network = config._network;\n                    if (chainId == null) {\n                      chainId = network.chainId;\n                    } else if (network.chainId !== chainId) {\n                      (0, index_js_1.assert)(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"new FallbackProvider\"\n                      });\n                    }\n                  case 12:\n                    _context11.next = 6;\n                    break;\n                  case 14:\n                    _context11.next = 19;\n                    break;\n                  case 16:\n                    _context11.prev = 16;\n                    _context11.t0 = _context11[\"catch\"](4);\n                    _iterator10.e(_context11.t0);\n                  case 19:\n                    _context11.prev = 19;\n                    _iterator10.f();\n                    return _context11.finish(19);\n                  case 22:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }, _callee11, null, [[4, 16, 19, 22]]);\n            }))());\n          }\n          _context12.next = 4;\n          return initialSync;\n        case 4:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12, this);\n  }));\n  return _initialSync3.apply(this, arguments);\n}\nfunction _checkQuorum2(_x7, _x8) {\n  return _checkQuorum3.apply(this, arguments);\n}\nfunction _checkQuorum3() {\n  _checkQuorum3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(running, req) {\n    var results, _iterator11, _step11, runner, _normalizeResult, tag, value, mode;\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          // Get all the result objects\n          results = [];\n          _iterator11 = _createForOfIteratorHelper(running);\n          try {\n            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n              runner = _step11.value;\n              if (runner.result != null) {\n                _normalizeResult = normalizeResult(runner.result), tag = _normalizeResult.tag, value = _normalizeResult.value;\n                results.push({\n                  tag: tag,\n                  value: value,\n                  weight: runner.config.weight\n                });\n              }\n            }\n            // Are there enough results to event meet quorum?\n          } catch (err) {\n            _iterator11.e(err);\n          } finally {\n            _iterator11.f();\n          }\n          if (!(results.reduce(function (a, r) {\n            return a + r.weight;\n          }, 0) < this.quorum)) {\n            _context13.next = 5;\n            break;\n          }\n          return _context13.abrupt(\"return\", undefined);\n        case 5:\n          _context13.t0 = req.method;\n          _context13.next = _context13.t0 === \"getBlockNumber\" ? 8 : _context13.t0 === \"getGasPrice\" ? 14 : _context13.t0 === \"estimateGas\" ? 14 : _context13.t0 === \"getBlock\" ? 15 : _context13.t0 === \"call\" ? 18 : _context13.t0 === \"chainId\" ? 18 : _context13.t0 === \"getBalance\" ? 18 : _context13.t0 === \"getTransactionCount\" ? 18 : _context13.t0 === \"getCode\" ? 18 : _context13.t0 === \"getStorage\" ? 18 : _context13.t0 === \"getTransaction\" ? 18 : _context13.t0 === \"getTransactionReceipt\" ? 18 : _context13.t0 === \"getLogs\" ? 18 : _context13.t0 === \"broadcastTransaction\" ? 19 : 20;\n          break;\n        case 8:\n          // We need to get the bootstrap block height\n          if (_classPrivateFieldGet(this, _height) === -2) {\n            _classPrivateFieldSet(this, _height, Math.ceil((0, index_js_1.getNumber)(getMedian(this.quorum, _classPrivateFieldGet(this, _configs).filter(function (c) {\n              return !c._lastFatalError;\n            }).map(function (c) {\n              return {\n                value: c.blockNumber,\n                tag: (0, index_js_1.getNumber)(c.blockNumber).toString(),\n                weight: c.weight\n              };\n            })))));\n          }\n          // Find the mode across all the providers, allowing for\n          // a little drift between block heights\n          mode = getFuzzyMode(this.quorum, results);\n          if (!(mode === undefined)) {\n            _context13.next = 12;\n            break;\n          }\n          return _context13.abrupt(\"return\", undefined);\n        case 12:\n          if (mode > _classPrivateFieldGet(this, _height)) {\n            _classPrivateFieldSet(this, _height, mode);\n          }\n          return _context13.abrupt(\"return\", _classPrivateFieldGet(this, _height));\n        case 14:\n          return _context13.abrupt(\"return\", getMedian(this.quorum, results));\n        case 15:\n          if (!(\"blockTag\" in req && req.blockTag === \"pending\")) {\n            _context13.next = 17;\n            break;\n          }\n          return _context13.abrupt(\"return\", getAnyResult(this.quorum, results));\n        case 17:\n          return _context13.abrupt(\"return\", checkQuorum(this.quorum, results));\n        case 18:\n          return _context13.abrupt(\"return\", checkQuorum(this.quorum, results));\n        case 19:\n          return _context13.abrupt(\"return\", getAnyResult(this.quorum, results));\n        case 20:\n          (0, index_js_1.assert)(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"_perform(\".concat(stringify(req.method), \")\")\n          });\n        case 21:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee13, this);\n  }));\n  return _checkQuorum3.apply(this, arguments);\n}\nfunction _waitForQuorum2(_x9, _x10) {\n  return _waitForQuorum3.apply(this, arguments);\n}\nfunction _waitForQuorum3() {\n  _waitForQuorum3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(running, req) {\n    var interesting, newRunners, _iterator12, _step12, runner, value, i;\n    return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n      while (1) switch (_context14.prev = _context14.next) {\n        case 0:\n          if (!(running.size === 0)) {\n            _context14.next = 2;\n            break;\n          }\n          throw new Error(\"no runners?!\");\n        case 2:\n          // Any promises that are interesting to watch for; an expired stall\n          // or a successful perform\n          interesting = [];\n          newRunners = 0;\n          _iterator12 = _createForOfIteratorHelper(running);\n          _context14.prev = 5;\n          _iterator12.s();\n        case 7:\n          if ((_step12 = _iterator12.n()).done) {\n            _context14.next = 19;\n            break;\n          }\n          runner = _step12.value;\n          // No responses, yet; keep an eye on it\n          if (runner.perform) {\n            interesting.push(runner.perform);\n          }\n          // Still stalling...\n          if (!runner.staller) {\n            _context14.next = 13;\n            break;\n          }\n          interesting.push(runner.staller);\n          return _context14.abrupt(\"continue\", 17);\n        case 13:\n          if (!runner.didBump) {\n            _context14.next = 15;\n            break;\n          }\n          return _context14.abrupt(\"continue\", 17);\n        case 15:\n          // Got a response (result or error) or stalled; kick off another runner\n          runner.didBump = true;\n          newRunners++;\n        case 17:\n          _context14.next = 7;\n          break;\n        case 19:\n          _context14.next = 24;\n          break;\n        case 21:\n          _context14.prev = 21;\n          _context14.t0 = _context14[\"catch\"](5);\n          _iterator12.e(_context14.t0);\n        case 24:\n          _context14.prev = 24;\n          _iterator12.f();\n          return _context14.finish(24);\n        case 27:\n          _context14.next = 29;\n          return _classPrivateMethodGet(this, _checkQuorum, _checkQuorum2).call(this, running, req);\n        case 29:\n          value = _context14.sent;\n          if (!(value !== undefined)) {\n            _context14.next = 34;\n            break;\n          }\n          if (!(value instanceof Error)) {\n            _context14.next = 33;\n            break;\n          }\n          throw value;\n        case 33:\n          return _context14.abrupt(\"return\", value);\n        case 34:\n          // Add any new runners, because a staller timed out or a result\n          // or error response came in.\n          for (i = 0; i < newRunners; i++) {\n            _classPrivateMethodGet(this, _addRunner, _addRunner2).call(this, running, req);\n          }\n          // All providers have returned, and we have no result\n          (0, index_js_1.assert)(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n            request: \"%sub-requests\",\n            info: {\n              request: req,\n              results: Array.from(running).map(function (r) {\n                return stringify(r.result);\n              })\n            }\n          });\n          // Wait for someone to either complete its perform or stall out\n          _context14.next = 38;\n          return Promise.race(interesting);\n        case 38:\n          _context14.next = 40;\n          return _classPrivateMethodGet(this, _waitForQuorum, _waitForQuorum2).call(this, running, req);\n        case 40:\n          return _context14.abrupt(\"return\", _context14.sent);\n        case 41:\n        case \"end\":\n          return _context14.stop();\n      }\n    }, _callee14, this, [[5, 21, 24, 27]]);\n  }));\n  return _waitForQuorum3.apply(this, arguments);\n}\nexports.FallbackProvider = FallbackProvider;","map":{"version":3,"names":["index_js_1","require","abstract_provider_js_1","network_js_1","BN_1","BigInt","BN_2","shuffle","array","i","length","j","Math","floor","random","tmp","stall","duration","Promise","resolve","setTimeout","getTime","Date","stringify","value","JSON","key","type","toString","defaultConfig","stallTimeout","priority","weight","defaultState","blockNumber","requests","lateResponses","errorResponses","outOfSync","unsupportedEvents","rollingDuration","score","_network","_updateNumber","_totalTime","_lastFatalError","_lastFatalErrorTimestamp","waitForSync","_x","_x2","_waitForSync","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee7","config","wrap","_callee7$","_context7","prev","next","_callee6","_blockNumber","_callee6$","_context6","provider","getBlockNumber","sent","t0","stop","abrupt","_normalize","Array","isArray","map","join","toJSON","keys","Object","sort","k","concat","console","log","Error","normalizeResult","error","tag","result","checkQuorum","quorum","results","tally","Map","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","t","get","set","err","e","f","best","_iterator2","values","_step2","r","undefined","getMedian","resultWeight","errorMap","bestError","_iterator3","_step3","_step3$value","push","a","b","mid","getAnyResult","_iterator4","_step4","getFuzzyMode","getNumber","add","_iterator5","_step5","_step5$value","bestWeight","bestResult","_iterator6","_step6","_step6$value","_configs","WeakMap","_height","_initialSyncPromise","_getNextConfig","WeakSet","_addRunner","_initialSync","_checkQuorum","_waitForQuorum","FallbackProvider","_abstract_provider_js","_inherits","_super","_createSuper","providers","network","_this","_classCallCheck","call","_classPrivateMethodInitSpec","_assertThisInitialized","_defineProperty","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","p","AbstractProvider","assign","eventQuorum","eventWorkers","assertArgument","_classPrivateFieldGet","reduce","c","_createClass","_detectNetwork2","_callee","_callee$","_context","Network","t1","getBigInt","_perform","method","t2","t3","from","_detectNetwork","_translatePerform2","_callee2","req","block","_callee2$","_context2","broadcastTransaction","signedTransaction","transaction","blockTag","getNetwork","chainId","estimateGas","getBalance","address","blockHash","getBlock","includeTransactions","getCode","getFeeData","gasPrice","getLogs","filter","getStorage","position","getTransaction","hash","getTransactionCount","getTransactionReceipt","getTransactionResult","_translatePerform","_x3","_x4","_perform2","_callee4","_result2","running","_iterator7","_step7","runner","_callee4$","_context4","all","_ref2","_callee3","_ref","_result","_callee3$","_context3","_x6","assert","request","info","_classPrivateMethodGet","_initialSync2","Set","_addRunner2","_waitForQuorum2","perform","_x5","_destroy","_callee5","_iterator8","_step8","_callee5$","_context5","destroy","_get","_getPrototypeOf","prototype","_getNextConfig2","configs","allConfigs","slice","_iterator9","_step9","indexOf","_this2","didBump","staller","now","_callee8","dt","_callee8$","_context8","_callee9","_callee9$","_context9","_initialSync3","_callee12","_this3","initialSync","promises","_callee12$","_context12","forEach","_callee10","_callee10$","_context10","_callee11","_iterator10","_step10","_callee11$","_context11","operation","finish","_checkQuorum2","_x7","_x8","_checkQuorum3","_callee13","_iterator11","_step11","_normalizeResult","mode","_callee13$","_context13","ceil","_x9","_x10","_waitForQuorum3","_callee14","interesting","newRunners","_iterator12","_step12","_callee14$","_context14","size","race","exports"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/providers/provider-fallback.ts"],"sourcesContent":["/**\n *  A **FallbackProvider** providers resiliance, security and performatnce\n *  in a way that is customizable and configurable.\n *\n *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]\n */\nimport {\n    getBigInt, getNumber, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\"\n\nimport type { PerformActionRequest } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\"\n\nconst BN_1 = BigInt(\"1\");\nconst BN_2 = BigInt(\"2\");\n\nfunction shuffle<T = any>(array: Array<T>): void {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\n}\n\nfunction getTime(): number { return (new Date()).getTime(); }\n\nfunction stringify(value: any): string {\n    return JSON.stringify(value, (key, value) => {\n        if (typeof(value) === \"bigint\") {\n            return { type: \"bigint\", value: value.toString() };\n        }\n        return value;\n    });\n}\n\n/**\n *  A configuration entry for how to use a [[Provider]].\n */\nexport interface FallbackProviderConfig {\n\n    /**\n     *  The provider.\n     */\n    provider: AbstractProvider;\n\n    /**\n     *  The amount of time to wait before kicking off the next provider.\n     *\n     *  Any providers that have not responded can still respond and be\n     *  counted, but this ensures new providers start.\n     */\n    stallTimeout?: number;\n\n    /**\n     *  The priority. Lower priority providers are dispatched first.\n     */\n    priority?: number;\n\n    /**\n     *  The amount of weight a provider is given against the quorum.\n     */\n    weight?: number;\n};\n\nconst defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };\n\n// We track a bunch of extra stuff that might help debug problems or\n// optimize infrastructure later on.\n/**\n *  The statistics and state maintained for a [[Provider]].\n */\nexport interface FallbackProviderState extends Required<FallbackProviderConfig> {\n\n    /**\n     *  The most recent blockNumber this provider has reported (-2 if none).\n     */\n    blockNumber: number;\n\n    /**\n     *  The number of total requests ever sent to this provider.\n     */\n    requests: number;\n\n    /**\n     *  The number of responses that errored.\n     */\n    errorResponses: number;\n\n    /**\n     *  The number of responses that occured after the result resolved.\n     */\n    lateResponses: number;\n\n    /**\n     *  How many times syncing was required to catch up the expected block.\n     */\n    outOfSync: number;\n\n    /**\n     *  The number of requests which reported unsupported operation.\n     */\n    unsupportedEvents: number;\n\n    /**\n     *  A rolling average (5% current duration) for response time.\n     */\n    rollingDuration: number;\n\n    /**\n     *  The ratio of quorum-agreed results to total.\n     */\n    score: number;\n}\n\ninterface Config extends FallbackProviderState {\n    _updateNumber: null | Promise<any>;\n    _network: null | Network;\n    _totalTime: number;\n    _lastFatalError: null | Error;\n    _lastFatalErrorTimestamp: number;\n}\n\nconst defaultState = {\n    blockNumber: -2, requests: 0, lateResponses: 0, errorResponses: 0,\n    outOfSync: -1, unsupportedEvents: 0, rollingDuration: 0, score: 0,\n    _network: null, _updateNumber: null, _totalTime: 0,\n    _lastFatalError: null, _lastFatalErrorTimestamp: 0\n};\n\n\nasync function waitForSync(config: Config, blockNumber: number): Promise<void> {\n    while (config.blockNumber < 0 || config.blockNumber < blockNumber) {\n        if (!config._updateNumber) {\n            config._updateNumber = (async () => {\n                try {\n                    const blockNumber = await config.provider.getBlockNumber();\n                    if (blockNumber > config.blockNumber) {\n                        config.blockNumber = blockNumber;\n                    }\n                } catch (error: any) {\n                    config.blockNumber = -2;\n                    config._lastFatalError = error;\n                    config._lastFatalErrorTimestamp = getTime();\n                }\n                config._updateNumber = null;\n            })();\n        }\n        await config._updateNumber;\n        config.outOfSync++;\n        if (config._lastFatalError) { break; }\n    }\n}\n\n/**\n *  Additional options to configure a [[FallbackProvider]].\n */\nexport type FallbackProviderOptions = {\n    // How many providers must agree on a value before reporting\n    // back the response\n    quorum: number;\n\n    // How many providers must have reported the same event\n    // for it to be emitted\n    eventQuorum: number;\n\n    // How many providers to dispatch each event to simultaneously.\n    // Set this to 0 to use getLog polling, which implies eventQuorum\n    // is equal to quorum.\n    eventWorkers: number;\n};\n\ntype RunnerResult = { result: any } | { error: Error };\n\ntype RunnerState = {\n    config: Config;\n    staller: null | Promise<void>;\n    didBump: boolean;\n    perform: null | Promise<any>;\n    result: null | RunnerResult;\n}\n\nfunction _normalize(value: any): string {\n    if (value == null) { return \"null\"; }\n\n    if (Array.isArray(value)) {\n        return \"[\" + (value.map(_normalize)).join(\",\") + \"]\";\n    }\n\n    if (typeof(value) === \"object\" && typeof(value.toJSON) === \"function\") {\n        return _normalize(value.toJSON());\n    }\n\n    switch (typeof(value)) {\n        case \"boolean\": case \"symbol\":\n            return value.toString();\n        case \"bigint\": case \"number\":\n            return BigInt(value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\": {\n            const keys = Object.keys(value);\n            keys.sort();\n            return \"{\" + keys.map((k) => `${ JSON.stringify(k) }:${ _normalize(value[k]) }`).join(\",\") + \"}\";\n        }\n    }\n\n    console.log(\"Could not serialize\", value);\n    throw new Error(\"Hmm...\");\n}\n\nfunction normalizeResult(value: RunnerResult): { tag: string, value: any } {\n\n    if (\"error\" in value) {\n        const error = value.error;\n        return { tag: _normalize(error), value: error };\n    }\n\n    const result = value.result;\n    return { tag: _normalize(result), value: result };\n}\n\ntype TallyResult = {\n    tag: string;\n    value: any;\n    weight: number;\n};\n\n// This strategy picks the highest weight result, as long as the weight is\n// equal to or greater than quorum\nfunction checkQuorum(quorum: number, results: Array<TallyResult>): any | Error {\n    const tally: Map<string, { value: any, weight: number }> = new Map();\n    for (const { value, tag, weight } of results) {\n        const t = tally.get(tag) || { value, weight: 0 };\n        t.weight += weight;\n        tally.set(tag, t);\n    }\n\n    let best: null | { value: any, weight: number } = null;\n\n    for (const r of tally.values()) {\n        if (r.weight >= quorum && (!best || r.weight > best.weight)) {\n            best = r;\n        }\n    }\n\n    if (best) { return best.value; }\n\n    return undefined;\n}\n\nfunction getMedian(quorum: number, results: Array<TallyResult>): undefined | bigint | Error {\n    let resultWeight = 0;\n\n    const errorMap: Map<string, { weight: number, value: Error }> = new Map();\n    let bestError: null | { weight: number, value: Error } = null;\n\n    const values: Array<bigint> = [ ];\n    for (const { value, tag, weight } of results) {\n        if (value instanceof Error) {\n            const e = errorMap.get(tag) || { value, weight: 0 };\n            e.weight += weight;\n            errorMap.set(tag, e);\n\n            if (bestError == null || e.weight > bestError.weight) { bestError = e; }\n        } else {\n            values.push(BigInt(value));\n            resultWeight += weight;\n        }\n    }\n\n    if (resultWeight < quorum) {\n        // We have quorum for an error\n        if (bestError && bestError.weight >= quorum) { return bestError.value; }\n\n        // We do not have quorum for a result\n        return undefined;\n    }\n\n    // Get the sorted values\n    values.sort((a, b) => ((a < b) ? -1: (b > a) ? 1: 0));\n\n    const mid = Math.floor(values.length / 2);\n\n    // Odd-length; take the middle value\n    if (values.length % 2) { return values[mid]; }\n\n    // Even length; take the ceiling of the mean of the center two values\n    return (values[mid - 1] + values[mid] + BN_1) / BN_2;\n}\n\nfunction getAnyResult(quorum: number, results: Array<TallyResult>): undefined | any | Error {\n    // If any value or error meets quorum, that is our preferred result\n    const result = checkQuorum(quorum, results);\n    if (result !== undefined) { return result; }\n\n    // Otherwise, do we have any result?\n    for (const r of results) {\n        if (r.value) { return r.value; }\n    }\n\n    // Nope!\n    return undefined;\n}\n\nfunction getFuzzyMode(quorum: number, results: Array<TallyResult>): undefined | number {\n    if (quorum === 1) { return getNumber(<bigint>getMedian(quorum, results), \"%internal\"); }\n\n    const tally: Map<number, { result: number, weight: number }> = new Map();\n    const add = (result: number, weight: number) => {\n        const t = tally.get(result) || { result, weight: 0 };\n        t.weight += weight;\n        tally.set(result, t);\n    };\n\n    for (const { weight, value } of results) {\n        const r = getNumber(value);\n        add(r - 1, weight);\n        add(r, weight);\n        add(r + 1, weight);\n    }\n\n    let bestWeight = 0;\n    let bestResult = undefined;\n\n    for (const { weight, result } of tally.values()) {\n        // Use this result, if this result meets quorum and has either:\n        // - a better weight\n        // - or equal weight, but the result is larger\n        if (weight >= quorum && (weight > bestWeight || (bestResult != null && weight === bestWeight && result > bestResult))) {\n            bestWeight = weight;\n            bestResult = result;\n        }\n    }\n\n    return bestResult;\n}\n\n/**\n *  A **FallbackProvider** manages several [[Providers]] providing\n *  resiliance by switching between slow or misbehaving nodes, security\n *  by requiring multiple backends to aggree and performance by allowing\n *  faster backends to respond earlier.\n *\n */\nexport class FallbackProvider extends AbstractProvider {\n\n    /**\n     *  The number of backends that must agree on a value before it is\n     *  accpeted.\n     */\n    readonly quorum: number;\n\n    /**\n     *  @_ignore:\n     */\n    readonly eventQuorum: number;\n\n    /**\n     *  @_ignore:\n     */\n    readonly eventWorkers: number;\n\n    readonly #configs: Array<Config>;\n\n    #height: number;\n    #initialSyncPromise: null | Promise<void>;\n\n    /**\n     *  Creates a new **FallbackProvider** with %%providers%% connected to\n     *  %%network%%.\n     *\n     *  If a [[Provider]] is included in %%providers%%, defaults are used\n     *  for the configuration.\n     */\n    constructor(providers: Array<AbstractProvider | FallbackProviderConfig>, network?: Networkish) {\n        super(network);\n        this.#configs = providers.map((p) => {\n            if (p instanceof AbstractProvider) {\n                return Object.assign({ provider: p }, defaultConfig, defaultState );\n            } else {\n                return Object.assign({ }, defaultConfig, p, defaultState );\n            }\n        });\n\n        this.#height = -2;\n        this.#initialSyncPromise = null;\n\n        this.quorum = 2; //Math.ceil(providers.length /  2);\n        this.eventQuorum = 1;\n        this.eventWorkers = 1;\n\n        assertArgument(this.quorum <= this.#configs.reduce((a, c) => (a + c.weight), 0),\n            \"quorum exceed provider wieght\", \"quorum\", this.quorum);\n    }\n\n    get providerConfigs(): Array<FallbackProviderState> {\n        return this.#configs.map((c) => {\n            const result: any = Object.assign({ }, c);\n            for (const key in result) {\n                if (key[0] === \"_\") { delete result[key]; }\n            }\n            return result;\n        });\n    }\n\n    async _detectNetwork(): Promise<Network> {\n        return Network.from(getBigInt(await this._perform({ method: \"chainId\" })));\n    }\n\n    // @TODO: Add support to select providers to be the event subscriber\n    //_getSubscriber(sub: Subscription): Subscriber {\n    //    throw new Error(\"@TODO\");\n    //}\n\n    /**\n     *  Transforms a %%req%% into the correct method call on %%provider%%.\n     */\n    async _translatePerform(provider: AbstractProvider, req: PerformActionRequest): Promise<any> {\n        switch (req.method) {\n            case \"broadcastTransaction\":\n                return await provider.broadcastTransaction(req.signedTransaction);\n            case \"call\":\n                return await provider.call(Object.assign({ }, req.transaction, { blockTag: req.blockTag }));\n            case \"chainId\":\n                return (await provider.getNetwork()).chainId;\n            case \"estimateGas\":\n                return await provider.estimateGas(req.transaction);\n            case \"getBalance\":\n                return await provider.getBalance(req.address, req.blockTag);\n            case \"getBlock\": {\n                const block = (\"blockHash\" in req) ? req.blockHash: req.blockTag;\n                return await provider.getBlock(block, req.includeTransactions);\n            }\n            case \"getBlockNumber\":\n                return await provider.getBlockNumber();\n            case \"getCode\":\n                return await provider.getCode(req.address, req.blockTag);\n            case \"getGasPrice\":\n                return (await provider.getFeeData()).gasPrice;\n            case \"getLogs\":\n                return await provider.getLogs(req.filter);\n            case \"getStorage\":\n                return await provider.getStorage(req.address, req.position, req.blockTag);\n            case \"getTransaction\":\n                return await provider.getTransaction(req.hash);\n            case \"getTransactionCount\":\n                return await provider.getTransactionCount(req.address, req.blockTag);\n            case \"getTransactionReceipt\":\n                return await provider.getTransactionReceipt(req.hash);\n            case \"getTransactionResult\":\n                return await provider.getTransactionResult(req.hash);\n        }\n    }\n\n    // Grab the next (random) config that is not already part of\n    // the running set\n    #getNextConfig(running: Set<RunnerState>): null | Config {\n        // @TODO: Maybe do a check here to favour (heavily) providers that\n        //        do not require waitForSync and disfavour providers that\n        //        seem down-ish or are behaving slowly\n\n        const configs = Array.from(running).map((r) => r.config)\n\n        // Shuffle the states, sorted by priority\n        const allConfigs = this.#configs.slice();\n        shuffle(allConfigs);\n        allConfigs.sort((a, b) => (b.priority - a.priority));\n\n        for (const config of allConfigs) {\n            if (config._lastFatalError) { continue; }\n            if (configs.indexOf(config) === -1) { return config; }\n        }\n\n        return null;\n    }\n\n    // Adds a new runner (if available) to running.\n    #addRunner(running: Set<RunnerState>, req: PerformActionRequest): null | RunnerState {\n        const config = this.#getNextConfig(running);\n\n        // No runners available\n        if (config == null) { return null; }\n\n        // Create a new runner\n        const runner: RunnerState = {\n            config, result: null, didBump: false,\n            perform: null, staller: null\n        };\n\n        const now = getTime();\n\n        // Start performing this operation\n        runner.perform = (async () => {\n            try {\n                config.requests++;\n                const result = await this._translatePerform(config.provider, req);\n                runner.result = { result };\n            } catch (error: any) {\n                config.errorResponses++;\n                runner.result = { error };\n            }\n\n            const dt = (getTime() - now);\n            config._totalTime += dt;\n\n            config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;\n\n            runner.perform = null;\n        })();\n\n        // Start a staller; when this times out, it's time to force\n        // kicking off another runner because we are taking too long\n        runner.staller = (async () => {\n            await stall(config.stallTimeout);\n            runner.staller = null;\n        })();\n\n        running.add(runner);\n        return runner;\n    }\n\n    // Initializes the blockNumber and network for each runner and\n    // blocks until initialized\n    async #initialSync(): Promise<void> {\n        let initialSync = this.#initialSyncPromise;\n        if (!initialSync) {\n            const promises: Array<Promise<any>> = [ ];\n            this.#configs.forEach((config) => {\n                promises.push((async () => {\n                    await waitForSync(config, 0);\n                    if (!config._lastFatalError) {\n                        config._network = await config.provider.getNetwork();\n                    }\n                })());\n            });\n\n            this.#initialSyncPromise = initialSync = (async () => {\n                // Wait for all providers to have a block number and network\n                await Promise.all(promises);\n\n                // Check all the networks match\n                let chainId: null | bigint = null;\n                for (const config of this.#configs) {\n                    if (config._lastFatalError) { continue; }\n                    const network = <Network>(config._network);\n                    if (chainId == null) {\n                        chainId = network.chainId;\n                    } else if (network.chainId !== chainId) {\n                        assert(false, \"cannot mix providers on different networks\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"new FallbackProvider\"\n                        });\n                    }\n                }\n            })();\n        }\n\n        await initialSync\n    }\n\n\n    async #checkQuorum(running: Set<RunnerState>, req: PerformActionRequest): Promise<any> {\n        // Get all the result objects\n        const results: Array<TallyResult> = [ ];\n        for (const runner of running) {\n            if (runner.result != null) {\n                const { tag, value } = normalizeResult(runner.result);\n                results.push({ tag, value, weight: runner.config.weight });\n            }\n        }\n\n        // Are there enough results to event meet quorum?\n        if (results.reduce((a, r) => (a + r.weight), 0) < this.quorum) {\n            return undefined;\n        }\n\n        switch (req.method) {\n            case \"getBlockNumber\": {\n                // We need to get the bootstrap block height\n                if (this.#height === -2) {\n                    this.#height = Math.ceil(getNumber(<bigint>getMedian(this.quorum, this.#configs.filter((c) => (!c._lastFatalError)).map((c) => ({\n                        value: c.blockNumber,\n                        tag: getNumber(c.blockNumber).toString(),\n                        weight: c.weight\n                    })))));\n                }\n\n                // Find the mode across all the providers, allowing for\n                // a little drift between block heights\n                const mode = getFuzzyMode(this.quorum, results);\n                if (mode === undefined) { return undefined; }\n                if (mode > this.#height) { this.#height = mode; }\n                return this.#height;\n            }\n\n            case \"getGasPrice\":\n            case \"estimateGas\":\n                return getMedian(this.quorum, results);\n\n            case \"getBlock\":\n                // Pending blocks are in the mempool and already\n                // quite untrustworthy; just grab anything\n                if (\"blockTag\" in req && req.blockTag === \"pending\") {\n                    return getAnyResult(this.quorum, results);\n                }\n                return checkQuorum(this.quorum, results);\n\n            case \"call\":\n            case \"chainId\":\n            case \"getBalance\":\n            case \"getTransactionCount\":\n            case \"getCode\":\n            case \"getStorage\":\n            case \"getTransaction\":\n            case \"getTransactionReceipt\":\n            case \"getLogs\":\n                return checkQuorum(this.quorum, results);\n\n            case \"broadcastTransaction\":\n                return getAnyResult(this.quorum, results);\n        }\n\n        assert(false, \"unsupported method\", \"UNSUPPORTED_OPERATION\", {\n            operation: `_perform(${ stringify((<any>req).method) })`\n        });\n    }\n\n    async #waitForQuorum(running: Set<RunnerState>, req: PerformActionRequest): Promise<any> {\n        if (running.size === 0) { throw new Error(\"no runners?!\"); }\n\n        // Any promises that are interesting to watch for; an expired stall\n        // or a successful perform\n        const interesting: Array<Promise<void>> = [ ];\n\n        let newRunners = 0;\n        for (const runner of running) {\n\n            // No responses, yet; keep an eye on it\n            if (runner.perform) {\n                interesting.push(runner.perform);\n            }\n\n            // Still stalling...\n            if (runner.staller) {\n                interesting.push(runner.staller);\n                continue;\n            }\n\n            // This runner has already triggered another runner\n            if (runner.didBump) { continue; }\n\n            // Got a response (result or error) or stalled; kick off another runner\n            runner.didBump = true;\n            newRunners++;\n        }\n\n        // Check if we have reached quorum on a result (or error)\n        const value = await this.#checkQuorum(running, req);\n        if (value !== undefined) {\n            if (value instanceof Error) { throw value; }\n            return value;\n        }\n\n        // Add any new runners, because a staller timed out or a result\n        // or error response came in.\n        for (let i = 0; i < newRunners; i++) {\n            this.#addRunner(running, req)\n        }\n\n        // All providers have returned, and we have no result\n\n        assert(interesting.length > 0, \"quorum not met\", \"SERVER_ERROR\", {\n            request: \"%sub-requests\",\n            info: { request: req, results: Array.from(running).map((r) => stringify(r.result)) }\n        });\n\n        // Wait for someone to either complete its perform or stall out\n        await Promise.race(interesting);\n\n        // This is recursive, but at worst case the depth is 2x the\n        // number of providers (each has a perform and a staller)\n        return await this.#waitForQuorum(running, req);\n    }\n\n    async _perform<T = any>(req: PerformActionRequest): Promise<T> {\n        // Broadcasting a transaction is rare (ish) and already incurs\n        // a cost on the user, so spamming is safe-ish. Just send it to\n        // every backend.\n        if (req.method === \"broadcastTransaction\") {\n            const results = await Promise.all(this.#configs.map(async ({ provider, weight }) => {\n                try {\n                    const result = await provider._perform(req);\n                    return Object.assign(normalizeResult({ result }), { weight });\n                } catch (error: any) {\n                    return Object.assign(normalizeResult({ error }), { weight });\n                }\n            }));\n\n            const result = getAnyResult(this.quorum, results);\n            assert(result !== undefined, \"problem multi-broadcasting\", \"SERVER_ERROR\", {\n                request: \"%sub-requests\",\n                info: { request: req, results: results.map(stringify) }\n            })\n            if (result instanceof Error) { throw result; }\n            return result;\n        }\n\n        await this.#initialSync();\n\n        // Bootstrap enough runners to meet quorum\n        const running: Set<RunnerState> = new Set();\n        for (let i = 0; i < this.quorum; i++) {\n            this.#addRunner(running, req);\n        }\n\n        const result = await this.#waitForQuorum(running, req);\n\n        // Track requests sent to a provider that are still\n        // outstanding after quorum has been otherwise found\n        for (const runner of running) {\n            if (runner.perform && runner.result == null) {\n                runner.config.lateResponses++;\n            }\n        }\n\n        return result;\n    }\n\n    async destroy(): Promise<void> {\n        for (const { provider } of this.#configs) {\n            provider.destroy();\n        }\n        super.destroy();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}