{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _get = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InfuraProvider = exports.InfuraWebSocketProvider = void 0;\n/**\n *  [[link-infura]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\n */\nvar index_js_1 = require(\"../utils/index.js\");\nvar community_js_1 = require(\"./community.js\");\nvar network_js_1 = require(\"./network.js\");\nvar provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nvar provider_websocket_js_1 = require(\"./provider-websocket.js\");\nvar defaultProjectId = \"84842078b09946638c03157f83405213\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"mainnet.infura.io\";\n    case \"goerli\":\n      return \"goerli.infura.io\";\n    case \"sepolia\":\n      return \"sepolia.infura.io\";\n    case \"arbitrum\":\n      return \"arbitrum-mainnet.infura.io\";\n    case \"arbitrum-goerli\":\n      return \"arbitrum-goerli.infura.io\";\n    case \"matic\":\n      return \"polygon-mainnet.infura.io\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai.infura.io\";\n    case \"optimism\":\n      return \"optimism-mainnet.infura.io\";\n    case \"optimism-goerli\":\n      return \"optimism-goerli.infura.io\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\n *  WebSocket end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nvar InfuraWebSocketProvider = /*#__PURE__*/function (_provider_websocket_j) {\n  _inherits(InfuraWebSocketProvider, _provider_websocket_j);\n  var _super = _createSuper(InfuraWebSocketProvider);\n  /**\n   *  Creates a new **InfuraWebSocketProvider**.\n   */\n  function InfuraWebSocketProvider(network, projectId) {\n    var _this;\n    _classCallCheck(this, InfuraWebSocketProvider);\n    var provider = new InfuraProvider(network, projectId);\n    var req = provider._getConnection();\n    (0, index_js_1.assert)(!req.credentials, \"INFURA WebSocket project secrets unsupported\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"InfuraProvider.getWebSocketProvider()\"\n    });\n    var url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    _this = _super.call(this, url, network);\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"projectId\", void 0);\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"projectSecret\", void 0);\n    (0, index_js_1.defineProperties)(_assertThisInitialized(_this), {\n      projectId: provider.projectId,\n      projectSecret: provider.projectSecret\n    });\n    return _this;\n  }\n  _createClass(InfuraWebSocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.projectId === defaultProjectId;\n    }\n  }]);\n  return InfuraWebSocketProvider;\n}(provider_websocket_js_1.WebSocketProvider);\nexports.InfuraWebSocketProvider = InfuraWebSocketProvider;\n/**\n *  The **InfuraProvider** connects to the [[link-infura]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nvar InfuraProvider = /*#__PURE__*/function (_provider_jsonrpc_js_) {\n  _inherits(InfuraProvider, _provider_jsonrpc_js_);\n  var _super2 = _createSuper(InfuraProvider);\n  /**\n   *  Creates a new **InfuraProvider**.\n   */\n  function InfuraProvider(_network, projectId, projectSecret) {\n    var _this2;\n    _classCallCheck(this, InfuraProvider);\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    var network = network_js_1.Network.from(_network);\n    if (projectId == null) {\n      projectId = defaultProjectId;\n    }\n    if (projectSecret == null) {\n      projectSecret = null;\n    }\n    var request = InfuraProvider.getRequest(network, projectId, projectSecret);\n    _this2 = _super2.call(this, request, network, {\n      staticNetwork: network\n    });\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"projectId\", void 0);\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"projectSecret\", void 0);\n    (0, index_js_1.defineProperties)(_assertThisInitialized(_this2), {\n      projectId: projectId,\n      projectSecret: projectSecret\n    });\n    return _this2;\n  }\n  _createClass(InfuraProvider, [{\n    key: \"_getProvider\",\n    value: function _getProvider(chainId) {\n      try {\n        return new InfuraProvider(chainId, this.projectId, this.projectSecret);\n      } catch (error) {}\n      return _get(_getPrototypeOf(InfuraProvider.prototype), \"_getProvider\", this).call(this, chainId);\n    }\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.projectId === defaultProjectId;\n    }\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */\n  }], [{\n    key: \"getWebSocketProvider\",\n    value: function getWebSocketProvider(network, projectId) {\n      return new InfuraWebSocketProvider(network, projectId);\n    }\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%projectId%% and %%projectSecret%%.\n     */\n  }, {\n    key: \"getRequest\",\n    value: function getRequest(network, projectId, projectSecret) {\n      if (projectId == null) {\n        projectId = defaultProjectId;\n      }\n      if (projectSecret == null) {\n        projectSecret = null;\n      }\n      var request = new index_js_1.FetchRequest(\"https://\".concat(getHost(network.name), \"/v3/\").concat(projectId));\n      request.allowGzip = true;\n      if (projectSecret) {\n        request.setCredentials(\"\", projectSecret);\n      }\n      if (projectId === defaultProjectId) {\n        request.retryFunc = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request, response, attempt) {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  (0, community_js_1.showThrottleMessage)(\"InfuraProvider\");\n                  return _context.abrupt(\"return\", true);\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function (_x, _x2, _x3) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n      }\n      return request;\n    }\n  }]);\n  return InfuraProvider;\n}(provider_jsonrpc_js_1.JsonRpcProvider);\nexports.InfuraProvider = InfuraProvider;","map":{"version":3,"names":["index_js_1","require","community_js_1","network_js_1","provider_jsonrpc_js_1","provider_websocket_js_1","defaultProjectId","getHost","name","assertArgument","InfuraWebSocketProvider","_provider_websocket_j","_inherits","_super","_createSuper","network","projectId","_this","_classCallCheck","provider","InfuraProvider","req","_getConnection","assert","credentials","operation","url","replace","call","_defineProperty","_assertThisInitialized","defineProperties","projectSecret","_createClass","key","value","isCommunityResource","WebSocketProvider","exports","_provider_jsonrpc_js_","_super2","_network","_this2","Network","from","request","getRequest","staticNetwork","_getProvider","chainId","error","_get","_getPrototypeOf","prototype","getWebSocketProvider","FetchRequest","concat","allowGzip","setCredentials","retryFunc","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","attempt","wrap","_callee$","_context","prev","next","showThrottleMessage","abrupt","stop","_x","_x2","_x3","apply","arguments","JsonRpcProvider"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/providers/provider-infura.ts"],"sourcesContent":["/**\n *  [[link-infura]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\n */\nimport {\n    defineProperties, FetchRequest, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"mainnet.infura.io\";\n        case \"goerli\":\n            return \"goerli.infura.io\";\n        case \"sepolia\":\n            return \"sepolia.infura.io\";\n\n        case \"arbitrum\":\n            return \"arbitrum-mainnet.infura.io\";\n        case \"arbitrum-goerli\":\n            return \"arbitrum-goerli.infura.io\";\n        case \"matic\":\n            return \"polygon-mainnet.infura.io\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.infura.io\";\n        case \"optimism\":\n            return \"optimism-mainnet.infura.io\";\n        case \"optimism-goerli\":\n            return \"optimism-goerli.infura.io\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/**\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\n *  WebSocket end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    readonly projectId!: string;\n\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    readonly projectSecret!: null | string;\n\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */\n    constructor(network?: Networkish, projectId?: string) {\n        const provider = new InfuraProvider(network, projectId);\n\n        const req = provider._getConnection();\n        assert(!req.credentials, \"INFURA WebSocket project secrets unsupported\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"InfuraProvider.getWebSocketProvider()\" });\n\n        const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n\n        defineProperties<InfuraWebSocketProvider>(this, {\n            projectId: provider.projectId,\n            projectSecret: provider.projectSecret\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\n/**\n *  The **InfuraProvider** connects to the [[link-infura]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nexport class InfuraProvider extends JsonRpcProvider implements CommunityResourcable {\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    readonly projectId!: string;\n\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    readonly projectSecret!: null | string;\n\n    /**\n     *  Creates a new **InfuraProvider**.\n     */\n    constructor(_network?: Networkish, projectId?: null | string, projectSecret?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (projectId == null) { projectId = defaultProjectId; }\n        if (projectSecret == null) { projectSecret = null; }\n\n        const request = InfuraProvider.getRequest(network, projectId, projectSecret);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<InfuraProvider>(this, { projectId, projectSecret });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new InfuraProvider(chainId, this.projectId, this.projectSecret);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */\n    static getWebSocketProvider(network?: Networkish, projectId?: string): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, projectId);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%projectId%% and %%projectSecret%%.\n     */\n    static getRequest(network: Network, projectId?: null | string, projectSecret?: null | string): FetchRequest {\n        if (projectId == null) { projectId = defaultProjectId; }\n        if (projectSecret == null) { projectSecret = null; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v3/${ projectId }`);\n        request.allowGzip = true;\n        if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n\n        if (projectId === defaultProjectId) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"InfuraProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}