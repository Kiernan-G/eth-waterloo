{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _Symbol$iterator, _Symbol$iterator2;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.Block = exports.copyRequest = exports.FeeData = void 0;\n//import { resolveAddress } from \"@ethersproject/address\";\nvar index_js_1 = require(\"../utils/index.js\");\nvar index_js_2 = require(\"../transaction/index.js\");\nvar BN_0 = BigInt(0);\n// -----------------------\nfunction getValue(value) {\n  if (value == null) {\n    return null;\n  }\n  return value;\n}\nfunction toJson(value) {\n  if (value == null) {\n    return null;\n  }\n  return value.toString();\n}\n// @TODO? <T extends FeeData = { }> implements Required<T>\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nvar FeeData = /*#__PURE__*/function () {\n  /**\n   *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n   *  %%maxPriorityFeePerGas%%.\n   */\n  function FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {\n    _classCallCheck(this, FeeData);\n    /**\n     *  The gas price for legacy networks.\n     */\n    _defineProperty(this, \"gasPrice\", void 0);\n    /**\n     *  The maximum fee to pay per gas.\n     *\n     *  The base fee per gas is defined by the network and based on\n     *  congestion, increasing the cost during times of heavy load\n     *  and lowering when less busy.\n     *\n     *  The actual fee per gas will be the base fee for the block\n     *  and the priority fee, up to the max fee per gas.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    _defineProperty(this, \"maxFeePerGas\", void 0);\n    /**\n     *  The additional amout to pay per gas to encourage a validator\n     *  to include the transaction.\n     *\n     *  The purpose of this is to compensate the validator for the\n     *  adjusted risk for including a given transaction.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    _defineProperty(this, \"maxPriorityFeePerGas\", void 0);\n    (0, index_js_1.defineProperties)(this, {\n      gasPrice: getValue(gasPrice),\n      maxFeePerGas: getValue(maxFeePerGas),\n      maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n    });\n  }\n  /**\n   *  Returns a JSON-friendly value.\n   */\n  _createClass(FeeData, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var gasPrice = this.gasPrice,\n        maxFeePerGas = this.maxFeePerGas,\n        maxPriorityFeePerGas = this.maxPriorityFeePerGas;\n      return {\n        _type: \"FeeData\",\n        gasPrice: toJson(gasPrice),\n        maxFeePerGas: toJson(maxFeePerGas),\n        maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)\n      };\n    }\n  }]);\n  return FeeData;\n}();\nexports.FeeData = FeeData;\n;\n/**\n *  Returns a copy of %%req%% with all properties coerced to their strict\n *  types.\n */\nfunction copyRequest(req) {\n  var result = {};\n  // These could be addresses, ENS names or Addressables\n  if (req.to) {\n    result.to = req.to;\n  }\n  if (req.from) {\n    result.from = req.from;\n  }\n  if (req.data) {\n    result.data = (0, index_js_1.hexlify)(req.data);\n  }\n  var bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n  var _iterator = _createForOfIteratorHelper(bigIntKeys),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (!(key in req) || req[key] == null) {\n        continue;\n      }\n      result[key] = (0, index_js_1.getBigInt)(req[key], \"request.\".concat(key));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var numberKeys = \"type,nonce\".split(/,/);\n  var _iterator2 = _createForOfIteratorHelper(numberKeys),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _key = _step2.value;\n      if (!(_key in req) || req[_key] == null) {\n        continue;\n      }\n      result[_key] = (0, index_js_1.getNumber)(req[_key], \"request.\".concat(_key));\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (req.accessList) {\n    result.accessList = (0, index_js_2.accessListify)(req.accessList);\n  }\n  if (\"blockTag\" in req) {\n    result.blockTag = req.blockTag;\n  }\n  if (\"enableCcipRead\" in req) {\n    result.enableCcipRead = !!req.enableCcipRead;\n  }\n  if (\"customData\" in req) {\n    result.customData = req.customData;\n  }\n  return result;\n}\nexports.copyRequest = copyRequest;\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nvar _transactions = /*#__PURE__*/new WeakMap();\n_Symbol$iterator = Symbol.iterator;\nvar Block = /*#__PURE__*/function () {\n  /**\n   *  Create a new **Block** object.\n   *\n   *  This should generally not be necessary as the unless implementing a\n   *  low-level library.\n   */\n  function Block(block, provider) {\n    _classCallCheck(this, Block);\n    /**\n     *  The provider connected to the block used to fetch additional details\n     *  if necessary.\n     */\n    _defineProperty(this, \"provider\", void 0);\n    /**\n     *  The block number, sometimes called the block height. This is a\n     *  sequential number that is one higher than the parent block.\n     */\n    _defineProperty(this, \"number\", void 0);\n    /**\n     *  The block hash.\n     *\n     *  This hash includes all properties, so can be safely used to identify\n     *  an exact set of block properties.\n     */\n    _defineProperty(this, \"hash\", void 0);\n    /**\n     *  The timestamp for this block, which is the number of seconds since\n     *  epoch that this block was included.\n     */\n    _defineProperty(this, \"timestamp\", void 0);\n    /**\n     *  The block hash of the parent block.\n     */\n    _defineProperty(this, \"parentHash\", void 0);\n    /**\n     *  The nonce.\n     *\n     *  On legacy networks, this is the random number inserted which\n     *  permitted the difficulty target to be reached.\n     */\n    _defineProperty(this, \"nonce\", void 0);\n    /**\n     *  The difficulty target.\n     *\n     *  On legacy networks, this is the proof-of-work target required\n     *  for a block to meet the protocol rules to be included.\n     *\n     *  On modern networks, this is a random number arrived at using\n     *  randao.  @TODO: Find links?\n     */\n    _defineProperty(this, \"difficulty\", void 0);\n    /**\n     *  The total gas limit for this block.\n     */\n    _defineProperty(this, \"gasLimit\", void 0);\n    /**\n     *  The total gas used in this block.\n     */\n    _defineProperty(this, \"gasUsed\", void 0);\n    /**\n     *  The miner coinbase address, wihch receives any subsidies for\n     *  including this block.\n     */\n    _defineProperty(this, \"miner\", void 0);\n    /**\n     *  Any extra data the validator wished to include.\n     */\n    _defineProperty(this, \"extraData\", void 0);\n    /**\n     *  The base fee per gas that all transactions in this block were\n     *  charged.\n     *\n     *  This adjusts after each block, depending on how congested the network\n     *  is.\n     */\n    _defineProperty(this, \"baseFeePerGas\", void 0);\n    _classPrivateFieldInitSpec(this, _transactions, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _transactions, block.transactions.map(function (tx) {\n      if (typeof tx !== \"string\") {\n        return new TransactionResponse(tx, provider);\n      }\n      return tx;\n    }));\n    (0, index_js_1.defineProperties)(this, {\n      provider: provider,\n      hash: getValue(block.hash),\n      number: block.number,\n      timestamp: block.timestamp,\n      parentHash: block.parentHash,\n      nonce: block.nonce,\n      difficulty: block.difficulty,\n      gasLimit: block.gasLimit,\n      gasUsed: block.gasUsed,\n      miner: block.miner,\n      extraData: block.extraData,\n      baseFeePerGas: getValue(block.baseFeePerGas)\n    });\n  }\n  /**\n   *  Returns the list of transaction hashes.\n   */\n  _createClass(Block, [{\n    key: \"transactions\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _transactions).map(function (tx) {\n        if (typeof tx === \"string\") {\n          return tx;\n        }\n        return tx.hash;\n      });\n    }\n    /**\n     *  Returns the complete transactions for blocks which\n     *  prefetched them, by passing ``true`` to %%prefetchTxs%%\n     *  into [[Provider-getBlock]].\n     */\n  }, {\n    key: \"prefetchedTransactions\",\n    get: function get() {\n      var txs = _classPrivateFieldGet(this, _transactions).slice();\n      // Doesn't matter...\n      if (txs.length === 0) {\n        return [];\n      }\n      // Make sure we prefetched the transactions\n      (0, index_js_1.assert)(typeof txs[0] === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"transactionResponses()\"\n      });\n      return txs;\n    }\n    /**\n     *  Returns a JSON-friendly value.\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var baseFeePerGas = this.baseFeePerGas,\n        difficulty = this.difficulty,\n        extraData = this.extraData,\n        gasLimit = this.gasLimit,\n        gasUsed = this.gasUsed,\n        hash = this.hash,\n        miner = this.miner,\n        nonce = this.nonce,\n        number = this.number,\n        parentHash = this.parentHash,\n        timestamp = this.timestamp,\n        transactions = this.transactions;\n      return {\n        _type: \"Block\",\n        baseFeePerGas: toJson(baseFeePerGas),\n        difficulty: toJson(difficulty),\n        extraData: extraData,\n        gasLimit: toJson(gasLimit),\n        gasUsed: toJson(gasUsed),\n        hash: hash,\n        miner: miner,\n        nonce: nonce,\n        number: number,\n        parentHash: parentHash,\n        timestamp: timestamp,\n        transactions: transactions\n      };\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      var _this = this;\n      var index = 0;\n      var txs = this.transactions;\n      return {\n        next: function next() {\n          if (index < _this.length) {\n            return {\n              value: txs[index++],\n              done: false\n            };\n          }\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      };\n    }\n    /**\n     *  The number of transactions in this block.\n     */\n  }, {\n    key: \"length\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _transactions).length;\n    }\n    /**\n     *  The [[link-js-date]] this block was included at.\n     */\n  }, {\n    key: \"date\",\n    get: function get() {\n      if (this.timestamp == null) {\n        return null;\n      }\n      return new Date(this.timestamp * 1000);\n    }\n    /**\n     *  Get the transaction at %%indexe%% within this block.\n     */\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(indexOrHash) {\n        var tx, hash, _iterator3, _step3, v;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // Find the internal value by its index or hash\n              tx = undefined;\n              if (!(typeof indexOrHash === \"number\")) {\n                _context.next = 5;\n                break;\n              }\n              tx = _classPrivateFieldGet(this, _transactions)[indexOrHash];\n              _context.next = 32;\n              break;\n            case 5:\n              hash = indexOrHash.toLowerCase();\n              _iterator3 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _transactions));\n              _context.prev = 7;\n              _iterator3.s();\n            case 9:\n              if ((_step3 = _iterator3.n()).done) {\n                _context.next = 24;\n                break;\n              }\n              v = _step3.value;\n              if (!(typeof v === \"string\")) {\n                _context.next = 18;\n                break;\n              }\n              if (!(v !== hash)) {\n                _context.next = 14;\n                break;\n              }\n              return _context.abrupt(\"continue\", 22);\n            case 14:\n              tx = v;\n              return _context.abrupt(\"break\", 24);\n            case 18:\n              if (!(v.hash === hash)) {\n                _context.next = 20;\n                break;\n              }\n              return _context.abrupt(\"continue\", 22);\n            case 20:\n              tx = v;\n              return _context.abrupt(\"break\", 24);\n            case 22:\n              _context.next = 9;\n              break;\n            case 24:\n              _context.next = 29;\n              break;\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](7);\n              _iterator3.e(_context.t0);\n            case 29:\n              _context.prev = 29;\n              _iterator3.f();\n              return _context.finish(29);\n            case 32:\n              if (!(tx == null)) {\n                _context.next = 34;\n                break;\n              }\n              throw new Error(\"no such tx\");\n            case 34:\n              if (!(typeof tx === \"string\")) {\n                _context.next = 40;\n                break;\n              }\n              _context.next = 37;\n              return this.provider.getTransaction(tx);\n            case 37:\n              return _context.abrupt(\"return\", _context.sent);\n            case 40:\n              return _context.abrupt(\"return\", tx);\n            case 41:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[7, 26, 29, 32]]);\n      }));\n      function getTransaction(_x) {\n        return _getTransaction.apply(this, arguments);\n      }\n      return getTransaction;\n    }()\n    /**\n     *  If a **Block** was fetched with a request to include the transactions\n     *  this will allow synchronous access to those transactions.\n     *\n     *  If the transactions were not prefetched, this will throw.\n     */\n  }, {\n    key: \"getPrefetchedTransaction\",\n    value: function getPrefetchedTransaction(indexOrHash) {\n      var txs = this.prefetchedTransactions;\n      if (typeof indexOrHash === \"number\") {\n        return txs[indexOrHash];\n      }\n      indexOrHash = indexOrHash.toLowerCase();\n      var _iterator4 = _createForOfIteratorHelper(txs),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var tx = _step4.value;\n          if (tx.hash === indexOrHash) {\n            return tx;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      (0, index_js_1.assertArgument)(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n    }\n    /**\n     *  Returns true if this block been mined. This provides a type guard\n     *  for all properties on a [[MinedBlock]].\n     */\n  }, {\n    key: \"isMined\",\n    value: function isMined() {\n      return !!this.hash;\n    }\n    /**\n     *  Returns true if this block is an [[link-eip-2930]] block.\n     */\n  }, {\n    key: \"isLondon\",\n    value: function isLondon() {\n      return !!this.baseFeePerGas;\n    }\n    /**\n     *  @_ignore:\n     */\n  }, {\n    key: \"orphanedEvent\",\n    value: function orphanedEvent() {\n      if (!this.isMined()) {\n        throw new Error(\"\");\n      }\n      return createOrphanedBlockFilter(this);\n    }\n  }]);\n  return Block;\n}();\nexports.Block = Block;\n//////////////////////\n// Log\n/**\n *  A **Log** in Ethereum represents an event that has been included in a\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\n *  Solidity's emit for announcing events.\n */\nvar Log = /*#__PURE__*/function () {\n  /**\n   *  @_ignore:\n   */\n  function Log(log, provider) {\n    _classCallCheck(this, Log);\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    _defineProperty(this, \"provider\", void 0);\n    /**\n     *  The transaction hash of the transaction this log occurred in. Use the\n     *  [[Log-getTransaction]] to get the [[TransactionResponse]].\n     */\n    _defineProperty(this, \"transactionHash\", void 0);\n    /**\n     *  The block hash of the block this log occurred in. Use the\n     *  [[Log-getBlock]] to get the [[Block]].\n     */\n    _defineProperty(this, \"blockHash\", void 0);\n    /**\n     *  The block number of the block this log occurred in. It is preferred\n     *  to use the [[Block-hash]] when fetching the related [[Block]],\n     *  since in the case of an orphaned block, the block at that height may\n     *  have changed.\n     */\n    _defineProperty(this, \"blockNumber\", void 0);\n    /**\n     *  If the **Log** represents a block that was removed due to an orphaned\n     *  block, this will be true.\n     *\n     *  This can only happen within an orphan event listener.\n     */\n    _defineProperty(this, \"removed\", void 0);\n    /**\n     *  The address of the contract that emitted this log.\n     */\n    _defineProperty(this, \"address\", void 0);\n    /**\n     *  The data included in this log when it was emitted.\n     */\n    _defineProperty(this, \"data\", void 0);\n    /**\n     *  The indexed topics included in this log when it was emitted.\n     *\n     *  All topics are included in the bloom filters, so they can be\n     *  efficiently filtered using the [[Provider-getLogs]] method.\n     */\n    _defineProperty(this, \"topics\", void 0);\n    /**\n     *  The index within the block this log occurred at. This is generally\n     *  not useful to developers, but can be used with the various roots\n     *  to proof inclusion within a block.\n     */\n    _defineProperty(this, \"index\", void 0);\n    /**\n     *  The index within the transaction of this log.\n     */\n    _defineProperty(this, \"transactionIndex\", void 0);\n    this.provider = provider;\n    var topics = Object.freeze(log.topics.slice());\n    (0, index_js_1.defineProperties)(this, {\n      transactionHash: log.transactionHash,\n      blockHash: log.blockHash,\n      blockNumber: log.blockNumber,\n      removed: log.removed,\n      address: log.address,\n      data: log.data,\n      topics: topics,\n      index: log.index,\n      transactionIndex: log.transactionIndex\n    });\n  }\n  /**\n   *  Returns a JSON-compatible object.\n   */\n  _createClass(Log, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var address = this.address,\n        blockHash = this.blockHash,\n        blockNumber = this.blockNumber,\n        data = this.data,\n        index = this.index,\n        removed = this.removed,\n        topics = this.topics,\n        transactionHash = this.transactionHash,\n        transactionIndex = this.transactionIndex;\n      return {\n        _type: \"log\",\n        address: address,\n        blockHash: blockHash,\n        blockNumber: blockNumber,\n        data: data,\n        index: index,\n        removed: removed,\n        topics: topics,\n        transactionHash: transactionHash,\n        transactionIndex: transactionIndex\n      };\n    }\n    /**\n     *  Returns the block that this log occurred in.\n     */\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var block;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.provider.getBlock(this.blockHash);\n            case 2:\n              block = _context2.sent;\n              (0, index_js_1.assert)(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n              return _context2.abrupt(\"return\", block);\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getBlock() {\n        return _getBlock.apply(this, arguments);\n      }\n      return getBlock;\n    }()\n    /**\n     *  Returns the transaction that this log occurred in.\n     */\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var tx;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.provider.getTransaction(this.transactionHash);\n            case 2:\n              tx = _context3.sent;\n              (0, index_js_1.assert)(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n              return _context3.abrupt(\"return\", tx);\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getTransaction() {\n        return _getTransaction2.apply(this, arguments);\n      }\n      return getTransaction;\n    }()\n    /**\n     *  Returns the transaction receipt fot the transaction that this\n     *  log occurred in.\n     */\n  }, {\n    key: \"getTransactionReceipt\",\n    value: function () {\n      var _getTransactionReceipt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var receipt;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.provider.getTransactionReceipt(this.transactionHash);\n            case 2:\n              receipt = _context4.sent;\n              (0, index_js_1.assert)(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\n              return _context4.abrupt(\"return\", receipt);\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function getTransactionReceipt() {\n        return _getTransactionReceipt.apply(this, arguments);\n      }\n      return getTransactionReceipt;\n    }()\n    /**\n     *  @_ignore:\n     */\n  }, {\n    key: \"removedEvent\",\n    value: function removedEvent() {\n      return createRemovedLogFilter(this);\n    }\n  }]);\n  return Log;\n}();\nexports.Log = Log;\n//////////////////////\n// Transaction Receipt\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\n/**\n *  A **TransactionReceipt** includes additional information about a\n *  transaction that is only available after it has been mined.\n */\nvar _logs = /*#__PURE__*/new WeakMap();\n_Symbol$iterator2 = Symbol.iterator;\nvar TransactionReceipt = /*#__PURE__*/function () {\n  /**\n   *  @_ignore:\n   */\n  function TransactionReceipt(tx, provider) {\n    _classCallCheck(this, TransactionReceipt);\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    _defineProperty(this, \"provider\", void 0);\n    /**\n     *  The address the transaction was send to.\n     */\n    _defineProperty(this, \"to\", void 0);\n    /**\n     *  The sender of the transaction.\n     */\n    _defineProperty(this, \"from\", void 0);\n    /**\n     *  The address of the contract if the transaction was directly\n     *  responsible for deploying one.\n     *\n     *  This is non-null **only** if the ``to`` is empty and the ``data``\n     *  was successfully executed as initcode.\n     */\n    _defineProperty(this, \"contractAddress\", void 0);\n    /**\n     *  The transaction hash.\n     */\n    _defineProperty(this, \"hash\", void 0);\n    /**\n     *  The index of this transaction within the block transactions.\n     */\n    _defineProperty(this, \"index\", void 0);\n    /**\n     *  The block hash of the [[Block]] this transaction was included in.\n     */\n    _defineProperty(this, \"blockHash\", void 0);\n    /**\n     *  The block number of the [[Block]] this transaction was included in.\n     */\n    _defineProperty(this, \"blockNumber\", void 0);\n    /**\n     *  The bloom filter bytes that represent all logs that occurred within\n     *  this transaction. This is generally not useful for most developers,\n     *  but can be used to validate the included logs.\n     */\n    _defineProperty(this, \"logsBloom\", void 0);\n    /**\n     *  The actual amount of gas used by this transaction.\n     *\n     *  When creating a transaction, the amount of gas that will be used can\n     *  only be approximated, but the sender must pay the gas fee for the\n     *  entire gas limit. After the transaction, the difference is refunded.\n     */\n    _defineProperty(this, \"gasUsed\", void 0);\n    /**\n     *  The amount of gas used by all transactions within the block for this\n     *  and all transactions with a lower ``index``.\n     *\n     *  This is generally not useful for developers but can be used to\n     *  validate certain aspects of execution.\n     */\n    _defineProperty(this, \"cumulativeGasUsed\", void 0);\n    /**\n     *  The actual gas price used during execution.\n     *\n     *  Due to the complexity of [[link-eip-1559]] this value can only\n     *  be caluclated after the transaction has been mined, snce the base\n     *  fee is protocol-enforced.\n     */\n    _defineProperty(this, \"gasPrice\", void 0);\n    /**\n     *  The [[link-eip-2718]] transaction type.\n     */\n    _defineProperty(this, \"type\", void 0);\n    //readonly byzantium!: boolean;\n    /**\n     *  The status of this transaction, indicating success (i.e. ``1``) or\n     *  a revert (i.e. ``0``).\n     *\n     *  This is available in post-byzantium blocks, but some backends may\n     *  backfill this value.\n     */\n    _defineProperty(this, \"status\", void 0);\n    /**\n     *  The root hash of this transaction.\n     *\n     *  This is no present and was only included in pre-byzantium blocks, but\n     *  could be used to validate certain parts of the receipt.\n     */\n    _defineProperty(this, \"root\", void 0);\n    _classPrivateFieldInitSpec(this, _logs, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _logs, Object.freeze(tx.logs.map(function (log) {\n      return new Log(log, provider);\n    })));\n    var gasPrice = BN_0;\n    if (tx.effectiveGasPrice != null) {\n      gasPrice = tx.effectiveGasPrice;\n    } else if (tx.gasPrice != null) {\n      gasPrice = tx.gasPrice;\n    }\n    (0, index_js_1.defineProperties)(this, {\n      provider: provider,\n      to: tx.to,\n      from: tx.from,\n      contractAddress: tx.contractAddress,\n      hash: tx.hash,\n      index: tx.index,\n      blockHash: tx.blockHash,\n      blockNumber: tx.blockNumber,\n      logsBloom: tx.logsBloom,\n      gasUsed: tx.gasUsed,\n      cumulativeGasUsed: tx.cumulativeGasUsed,\n      gasPrice: gasPrice,\n      type: tx.type,\n      //byzantium: tx.byzantium,\n      status: tx.status,\n      root: tx.root\n    });\n  }\n  /**\n   *  The logs for this transaction.\n   */\n  _createClass(TransactionReceipt, [{\n    key: \"logs\",\n    get: function get() {\n      return _classPrivateFieldGet(this, _logs);\n    }\n    /**\n     *  Returns a JSON-compatible representation.\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var to = this.to,\n        from = this.from,\n        contractAddress = this.contractAddress,\n        hash = this.hash,\n        index = this.index,\n        blockHash = this.blockHash,\n        blockNumber = this.blockNumber,\n        logsBloom = this.logsBloom,\n        logs = this.logs,\n        status = this.status,\n        root = this.root;\n      return {\n        _type: \"TransactionReceipt\",\n        blockHash: blockHash,\n        blockNumber: blockNumber,\n        //byzantium, \n        contractAddress: contractAddress,\n        cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n        from: from,\n        gasPrice: toJson(this.gasPrice),\n        gasUsed: toJson(this.gasUsed),\n        hash: hash,\n        index: index,\n        logs: logs,\n        logsBloom: logsBloom,\n        root: root,\n        status: status,\n        to: to\n      };\n    }\n    /**\n     *  @_ignore:\n     */\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.logs.length;\n    }\n  }, {\n    key: _Symbol$iterator2,\n    value: function value() {\n      var _this2 = this;\n      var index = 0;\n      return {\n        next: function next() {\n          if (index < _this2.length) {\n            return {\n              value: _this2.logs[index++],\n              done: false\n            };\n          }\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      };\n    }\n    /**\n     *  The total fee for this transaction, in wei.\n     */\n  }, {\n    key: \"fee\",\n    get: function get() {\n      return this.gasUsed * this.gasPrice;\n    }\n    /**\n     *  Resolves to the block this transaction occurred in.\n     */\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var block;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.provider.getBlock(this.blockHash);\n            case 2:\n              block = _context5.sent;\n              if (!(block == null)) {\n                _context5.next = 5;\n                break;\n              }\n              throw new Error(\"TODO\");\n            case 5:\n              return _context5.abrupt(\"return\", block);\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function getBlock() {\n        return _getBlock2.apply(this, arguments);\n      }\n      return getBlock;\n    }()\n    /**\n     *  Resolves to the transaction this transaction occurred in.\n     */\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var tx;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.provider.getTransaction(this.hash);\n            case 2:\n              tx = _context6.sent;\n              if (!(tx == null)) {\n                _context6.next = 5;\n                break;\n              }\n              throw new Error(\"TODO\");\n            case 5:\n              return _context6.abrupt(\"return\", tx);\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getTransaction() {\n        return _getTransaction3.apply(this, arguments);\n      }\n      return getTransaction;\n    }()\n    /**\n     *  Resolves to the return value of the execution of this transaction.\n     *\n     *  Support for this feature is limited, as it requires an archive node\n     *  with the ``debug_`` or ``trace_`` API enabled.\n     */\n  }, {\n    key: \"getResult\",\n    value: function () {\n      var _getResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.provider.getTransactionResult(this.hash);\n            case 2:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function getResult() {\n        return _getResult.apply(this, arguments);\n      }\n      return getResult;\n    }()\n    /**\n     *  Resolves to the number of confirmations this transaction has.\n     */\n  }, {\n    key: \"confirmations\",\n    value: function () {\n      var _confirmations = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.provider.getBlockNumber();\n            case 2:\n              _context8.t0 = _context8.sent;\n              _context8.t1 = this.blockNumber;\n              _context8.t2 = _context8.t0 - _context8.t1;\n              return _context8.abrupt(\"return\", _context8.t2 + 1);\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function confirmations() {\n        return _confirmations.apply(this, arguments);\n      }\n      return confirmations;\n    }()\n    /**\n     *  @_ignore:\n     */\n  }, {\n    key: \"removedEvent\",\n    value: function removedEvent() {\n      return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  @_ignore:\n     */\n  }, {\n    key: \"reorderedEvent\",\n    value: function reorderedEvent(other) {\n      (0, index_js_1.assert)(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"reorderedEvent(other)\"\n      });\n      return createReorderedTransactionFilter(this, other);\n    }\n  }]);\n  return TransactionReceipt;\n}();\nexports.TransactionReceipt = TransactionReceipt;\n/**\n *  A **TransactionResponse** includes all properties about a transaction\n *  that was sent to the network, which may or may not be included in a\n *  block.\n *\n *  The [[TransactionResponse-isMined]] can be used to check if the\n *  transaction has been mined as well as type guard that the otherwise\n *  possibly ``null`` properties are defined.\n */\nvar _startBlock = /*#__PURE__*/new WeakMap();\nvar TransactionResponse = /*#__PURE__*/function () {\n  /**\n   *  @_ignore:\n   */\n  function TransactionResponse(tx, provider) {\n    _classCallCheck(this, TransactionResponse);\n    /**\n     *  The provider this is connected to, which will influence how its\n     *  methods will resolve its async inspection methods.\n     */\n    _defineProperty(this, \"provider\", void 0);\n    /**\n     *  The block number of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    _defineProperty(this, \"blockNumber\", void 0);\n    /**\n     *  The blockHash of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    _defineProperty(this, \"blockHash\", void 0);\n    /**\n     *  The index within the block that this transaction resides at.\n     */\n    _defineProperty(this, \"index\", void 0);\n    /**\n     *  The transaction hash.\n     */\n    _defineProperty(this, \"hash\", void 0);\n    /**\n     *  The [[link-eip-2718]] transaction envelope type. This is\n     *  ``0`` for legacy transactions types.\n     */\n    _defineProperty(this, \"type\", void 0);\n    /**\n     *  The receiver of this transaction.\n     *\n     *  If ``null``, then the transaction is an initcode transaction.\n     *  This means the result of executing the [[data]] will be deployed\n     *  as a new contract on chain (assuming it does not revert) and the\n     *  address may be computed using [[getCreateAddress]].\n     */\n    _defineProperty(this, \"to\", void 0);\n    /**\n     *  The sender of this transaction. It is implicitly computed\n     *  from the transaction pre-image hash (as the digest) and the\n     *  [[signature]] using ecrecover.\n     */\n    _defineProperty(this, \"from\", void 0);\n    /**\n     *  The nonce, which is used to prevent replay attacks and offer\n     *  a method to ensure transactions from a given sender are explicitly\n     *  ordered.\n     *\n     *  When sending a transaction, this must be equal to the number of\n     *  transactions ever sent by [[from]].\n     */\n    _defineProperty(this, \"nonce\", void 0);\n    /**\n     *  The maximum units of gas this transaction can consume. If execution\n     *  exceeds this, the entries transaction is reverted and the sender\n     *  is charged for the full amount, despite not state changes being made.\n     */\n    _defineProperty(this, \"gasLimit\", void 0);\n    /**\n     *  The gas price can have various values, depending on the network.\n     *\n     *  In modern networks, for transactions that are included this is\n     *  the //effective gas price// (the fee per gas that was actually\n     *  charged), while for transactions that have not been included yet\n     *  is the [[maxFeePerGas]].\n     *\n     *  For legacy transactions, or transactions on legacy networks, this\n     *  is the fee that will be charged per unit of gas the transaction\n     *  consumes.\n     */\n    _defineProperty(this, \"gasPrice\", void 0);\n    /**\n     *  The maximum priority fee (per unit of gas) to allow a\n     *  validator to charge the sender. This is inclusive of the\n     *  [[maxFeeFeePerGas]].\n     */\n    _defineProperty(this, \"maxPriorityFeePerGas\", void 0);\n    /**\n     *  The maximum fee (per unit of gas) to allow this transaction\n     *  to charge the sender.\n     */\n    _defineProperty(this, \"maxFeePerGas\", void 0);\n    /**\n     *  The data.\n     */\n    _defineProperty(this, \"data\", void 0);\n    /**\n     *  The value, in wei. Use [[formatEther]] to format this value\n     *  as ether.\n     */\n    _defineProperty(this, \"value\", void 0);\n    /**\n     *  The chain ID.\n     */\n    _defineProperty(this, \"chainId\", void 0);\n    /**\n     *  The signature.\n     */\n    _defineProperty(this, \"signature\", void 0);\n    /**\n     *  The [[link-eip-2930]] access list for transaction types that\n     *  support it, otherwise ``null``.\n     */\n    _defineProperty(this, \"accessList\", void 0);\n    _classPrivateFieldInitSpec(this, _startBlock, {\n      writable: true,\n      value: void 0\n    });\n    this.provider = provider;\n    this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;\n    this.blockHash = tx.blockHash != null ? tx.blockHash : null;\n    this.hash = tx.hash;\n    this.index = tx.index;\n    this.type = tx.type;\n    this.from = tx.from;\n    this.to = tx.to || null;\n    this.gasLimit = tx.gasLimit;\n    this.nonce = tx.nonce;\n    this.data = tx.data;\n    this.value = tx.value;\n    this.gasPrice = tx.gasPrice;\n    this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;\n    this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;\n    this.chainId = tx.chainId;\n    this.signature = tx.signature;\n    this.accessList = tx.accessList != null ? tx.accessList : null;\n    _classPrivateFieldSet(this, _startBlock, -1);\n  }\n  /**\n   *  Returns a JSON-compatible representation of this transaction.\n   */\n  _createClass(TransactionResponse, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var blockNumber = this.blockNumber,\n        blockHash = this.blockHash,\n        index = this.index,\n        hash = this.hash,\n        type = this.type,\n        to = this.to,\n        from = this.from,\n        nonce = this.nonce,\n        data = this.data,\n        signature = this.signature,\n        accessList = this.accessList;\n      return {\n        _type: \"TransactionReceipt\",\n        accessList: accessList,\n        blockNumber: blockNumber,\n        blockHash: blockHash,\n        chainId: toJson(this.chainId),\n        data: data,\n        from: from,\n        gasLimit: toJson(this.gasLimit),\n        gasPrice: toJson(this.gasPrice),\n        hash: hash,\n        maxFeePerGas: toJson(this.maxFeePerGas),\n        maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n        nonce: nonce,\n        signature: signature,\n        to: to,\n        index: index,\n        type: type,\n        value: toJson(this.value)\n      };\n    }\n    /**\n     *  Resolves to the Block that this transaction was included in.\n     *\n     *  This will return null if the transaction has not been included yet.\n     */\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var blockNumber, tx, block;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              blockNumber = this.blockNumber;\n              if (!(blockNumber == null)) {\n                _context9.next = 6;\n                break;\n              }\n              _context9.next = 4;\n              return this.getTransaction();\n            case 4:\n              tx = _context9.sent;\n              if (tx) {\n                blockNumber = tx.blockNumber;\n              }\n            case 6:\n              if (!(blockNumber == null)) {\n                _context9.next = 8;\n                break;\n              }\n              return _context9.abrupt(\"return\", null);\n            case 8:\n              block = this.provider.getBlock(blockNumber);\n              if (!(block == null)) {\n                _context9.next = 11;\n                break;\n              }\n              throw new Error(\"TODO\");\n            case 11:\n              return _context9.abrupt(\"return\", block);\n            case 12:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function getBlock() {\n        return _getBlock3.apply(this, arguments);\n      }\n      return getBlock;\n    }()\n    /**\n     *  Resolves to this transaction being re-requested from the\n     *  provider. This can be used if you have an unmined transaction\n     *  and wish to get an up-to-date populated instance.\n     */\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.abrupt(\"return\", this.provider.getTransaction(this.hash));\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function getTransaction() {\n        return _getTransaction4.apply(this, arguments);\n      }\n      return getTransaction;\n    }()\n    /**\n     *  Resolve to the number of confirmations this transaction has.\n     */\n  }, {\n    key: \"confirmations\",\n    value: function () {\n      var _confirmations2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var _yield, tx, _blockNumber, blockNumber;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              if (!(this.blockNumber == null)) {\n                _context11.next = 9;\n                break;\n              }\n              _context11.next = 3;\n              return (0, index_js_1.resolveProperties)({\n                tx: this.getTransaction(),\n                blockNumber: this.provider.getBlockNumber()\n              });\n            case 3:\n              _yield = _context11.sent;\n              tx = _yield.tx;\n              _blockNumber = _yield.blockNumber;\n              if (!(tx == null || tx.blockNumber == null)) {\n                _context11.next = 8;\n                break;\n              }\n              return _context11.abrupt(\"return\", 0);\n            case 8:\n              return _context11.abrupt(\"return\", _blockNumber - tx.blockNumber + 1);\n            case 9:\n              _context11.next = 11;\n              return this.provider.getBlockNumber();\n            case 11:\n              blockNumber = _context11.sent;\n              return _context11.abrupt(\"return\", blockNumber - this.blockNumber + 1);\n            case 13:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function confirmations() {\n        return _confirmations2.apply(this, arguments);\n      }\n      return confirmations;\n    }()\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n  }, {\n    key: \"wait\",\n    value: function () {\n      var _wait = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(_confirms, _timeout) {\n        var _this3 = this;\n        var confirms, timeout, startBlock, nextScan, stopScanning, checkReplacement, receipt, waiter;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              confirms = _confirms == null ? 1 : _confirms;\n              timeout = _timeout == null ? 0 : _timeout;\n              startBlock = _classPrivateFieldGet(this, _startBlock);\n              nextScan = -1;\n              stopScanning = startBlock === -1 ? true : false;\n              checkReplacement = /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n                  var _yield2, blockNumber, nonce, mined, block, _iterator5, _step5, hash, i, tx, _receipt, reason;\n                  return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n                    while (1) switch (_context12.prev = _context12.next) {\n                      case 0:\n                        if (!stopScanning) {\n                          _context12.next = 2;\n                          break;\n                        }\n                        return _context12.abrupt(\"return\", null);\n                      case 2:\n                        _context12.next = 4;\n                        return (0, index_js_1.resolveProperties)({\n                          blockNumber: _this3.provider.getBlockNumber(),\n                          nonce: _this3.provider.getTransactionCount(_this3.from)\n                        });\n                      case 4:\n                        _yield2 = _context12.sent;\n                        blockNumber = _yield2.blockNumber;\n                        nonce = _yield2.nonce;\n                        if (!(nonce < _this3.nonce)) {\n                          _context12.next = 10;\n                          break;\n                        }\n                        startBlock = blockNumber;\n                        return _context12.abrupt(\"return\");\n                      case 10:\n                        if (!stopScanning) {\n                          _context12.next = 12;\n                          break;\n                        }\n                        return _context12.abrupt(\"return\", null);\n                      case 12:\n                        _context12.next = 14;\n                        return _this3.getTransaction();\n                      case 14:\n                        mined = _context12.sent;\n                        if (!(mined && mined.blockNumber != null)) {\n                          _context12.next = 17;\n                          break;\n                        }\n                        return _context12.abrupt(\"return\");\n                      case 17:\n                        // We were replaced; start scanning for that transaction\n                        // Starting to scan; look back a few extra blocks for safety\n                        if (nextScan === -1) {\n                          nextScan = startBlock - 3;\n                          if (nextScan < _classPrivateFieldGet(_this3, _startBlock)) {\n                            nextScan = _classPrivateFieldGet(_this3, _startBlock);\n                          }\n                        }\n                      case 18:\n                        if (!(nextScan <= blockNumber)) {\n                          _context12.next = 67;\n                          break;\n                        }\n                        if (!stopScanning) {\n                          _context12.next = 21;\n                          break;\n                        }\n                        return _context12.abrupt(\"return\", null);\n                      case 21:\n                        _context12.next = 23;\n                        return _this3.provider.getBlock(nextScan, true);\n                      case 23:\n                        block = _context12.sent;\n                        if (!(block == null)) {\n                          _context12.next = 26;\n                          break;\n                        }\n                        return _context12.abrupt(\"return\");\n                      case 26:\n                        // We were mined; no replacement\n                        _iterator5 = _createForOfIteratorHelper(block);\n                        _context12.prev = 27;\n                        _iterator5.s();\n                      case 29:\n                        if ((_step5 = _iterator5.n()).done) {\n                          _context12.next = 35;\n                          break;\n                        }\n                        hash = _step5.value;\n                        if (!(hash === _this3.hash)) {\n                          _context12.next = 33;\n                          break;\n                        }\n                        return _context12.abrupt(\"return\");\n                      case 33:\n                        _context12.next = 29;\n                        break;\n                      case 35:\n                        _context12.next = 40;\n                        break;\n                      case 37:\n                        _context12.prev = 37;\n                        _context12.t0 = _context12[\"catch\"](27);\n                        _iterator5.e(_context12.t0);\n                      case 40:\n                        _context12.prev = 40;\n                        _iterator5.f();\n                        return _context12.finish(40);\n                      case 43:\n                        i = 0;\n                      case 44:\n                        if (!(i < block.length)) {\n                          _context12.next = 64;\n                          break;\n                        }\n                        _context12.next = 47;\n                        return block.getTransaction(i);\n                      case 47:\n                        tx = _context12.sent;\n                        if (!(tx.from === _this3.from && tx.nonce === _this3.nonce)) {\n                          _context12.next = 61;\n                          break;\n                        }\n                        if (!stopScanning) {\n                          _context12.next = 51;\n                          break;\n                        }\n                        return _context12.abrupt(\"return\", null);\n                      case 51:\n                        _context12.next = 53;\n                        return _this3.provider.getTransactionReceipt(tx.hash);\n                      case 53:\n                        _receipt = _context12.sent;\n                        if (!(_receipt == null)) {\n                          _context12.next = 56;\n                          break;\n                        }\n                        return _context12.abrupt(\"return\");\n                      case 56:\n                        if (!(blockNumber - _receipt.blockNumber + 1 < confirms)) {\n                          _context12.next = 58;\n                          break;\n                        }\n                        return _context12.abrupt(\"return\");\n                      case 58:\n                        // The reason we were replaced\n                        reason = \"replaced\";\n                        if (tx.data === _this3.data && tx.to === _this3.to && tx.value === _this3.value) {\n                          reason = \"repriced\";\n                        } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n                          reason = \"cancelled\";\n                        }\n                        (0, index_js_1.assert)(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                          cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                          reason: reason,\n                          replacement: tx.replaceableTransaction(startBlock),\n                          hash: tx.hash,\n                          receipt: _receipt\n                        });\n                      case 61:\n                        i++;\n                        _context12.next = 44;\n                        break;\n                      case 64:\n                        nextScan++;\n                        _context12.next = 18;\n                        break;\n                      case 67:\n                        return _context12.abrupt(\"return\");\n                      case 68:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }, _callee12, null, [[27, 37, 40, 43]]);\n                }));\n                return function checkReplacement() {\n                  return _ref.apply(this, arguments);\n                };\n              }();\n              _context15.next = 8;\n              return this.provider.getTransactionReceipt(this.hash);\n            case 8:\n              receipt = _context15.sent;\n              if (!receipt) {\n                _context15.next = 18;\n                break;\n              }\n              _context15.next = 12;\n              return receipt.confirmations();\n            case 12:\n              _context15.t0 = _context15.sent;\n              _context15.t1 = confirms;\n              if (!(_context15.t0 >= _context15.t1)) {\n                _context15.next = 16;\n                break;\n              }\n              return _context15.abrupt(\"return\", receipt);\n            case 16:\n              _context15.next = 22;\n              break;\n            case 18:\n              _context15.next = 20;\n              return checkReplacement();\n            case 20:\n              if (!(confirms === 0)) {\n                _context15.next = 22;\n                break;\n              }\n              return _context15.abrupt(\"return\", null);\n            case 22:\n              waiter = new Promise(function (resolve, reject) {\n                // List of things to cancel when we have a result (one way or the other)\n                var cancellers = [];\n                var cancel = function cancel() {\n                  cancellers.forEach(function (c) {\n                    return c();\n                  });\n                };\n                // On cancel, stop scanning for replacements\n                cancellers.push(function () {\n                  stopScanning = true;\n                });\n                // Set up any timeout requested\n                if (timeout > 0) {\n                  var timer = setTimeout(function () {\n                    cancel();\n                    reject((0, index_js_1.makeError)(\"wait for transaction timeout\", \"TIMEOUT\"));\n                  }, timeout);\n                  cancellers.push(function () {\n                    clearTimeout(timer);\n                  });\n                }\n                var txListener = /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(receipt) {\n                    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n                      while (1) switch (_context13.prev = _context13.next) {\n                        case 0:\n                          _context13.next = 2;\n                          return receipt.confirmations();\n                        case 2:\n                          _context13.t0 = _context13.sent;\n                          _context13.t1 = confirms;\n                          if (!(_context13.t0 >= _context13.t1)) {\n                            _context13.next = 7;\n                            break;\n                          }\n                          cancel();\n                          resolve(receipt);\n                        case 7:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }, _callee13);\n                  }));\n                  return function txListener(_x4) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }();\n                cancellers.push(function () {\n                  _this3.provider.off(_this3.hash, txListener);\n                });\n                _this3.provider.on(_this3.hash, txListener);\n                // We support replacement detection; start checking\n                if (startBlock >= 0) {\n                  var replaceListener = /*#__PURE__*/function () {\n                    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n                      return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n                        while (1) switch (_context14.prev = _context14.next) {\n                          case 0:\n                            _context14.prev = 0;\n                            _context14.next = 3;\n                            return checkReplacement();\n                          case 3:\n                            _context14.next = 11;\n                            break;\n                          case 5:\n                            _context14.prev = 5;\n                            _context14.t0 = _context14[\"catch\"](0);\n                            if (!(0, index_js_1.isError)(_context14.t0, \"TRANSACTION_REPLACED\")) {\n                              _context14.next = 11;\n                              break;\n                            }\n                            cancel();\n                            reject(_context14.t0);\n                            return _context14.abrupt(\"return\");\n                          case 11:\n                            // Rescheudle a check on the next block\n                            if (!stopScanning) {\n                              _this3.provider.once(\"block\", replaceListener);\n                            }\n                          case 12:\n                          case \"end\":\n                            return _context14.stop();\n                        }\n                      }, _callee14, null, [[0, 5]]);\n                    }));\n                    return function replaceListener() {\n                      return _ref3.apply(this, arguments);\n                    };\n                  }();\n                  cancellers.push(function () {\n                    _this3.provider.off(\"block\", replaceListener);\n                  });\n                  _this3.provider.once(\"block\", replaceListener);\n                }\n              });\n              _context15.next = 25;\n              return waiter;\n            case 25:\n              return _context15.abrupt(\"return\", _context15.sent);\n            case 26:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n      function wait(_x2, _x3) {\n        return _wait.apply(this, arguments);\n      }\n      return wait;\n    }()\n    /**\n     *  Returns ``true`` if this transaction has been included.\n     *\n     *  This is effective only as of the time the TransactionResponse\n     *  was instantiated. To get up-to-date information, use\n     *  [[getTransaction]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  non-null property values for properties that are null for\n     *  unmined transactions.\n     */\n  }, {\n    key: \"isMined\",\n    value: function isMined() {\n      return this.blockHash != null;\n    }\n    /**\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n     *  transaction.\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n  }, {\n    key: \"isLegacy\",\n    value: function isLegacy() {\n      return this.type === 0;\n    }\n    /**\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n     *  transaction. See [[link-eip-2070]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n  }, {\n    key: \"isBerlin\",\n    value: function isBerlin() {\n      return this.type === 1;\n    }\n    /**\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\n     *  transaction. See [[link-eip-1559]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n  }, {\n    key: \"isLondon\",\n    value: function isLondon() {\n      return this.type === 2;\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that evict this transaction.\n     */\n  }, {\n    key: \"removedEvent\",\n    value: function removedEvent() {\n      (0, index_js_1.assert)(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"removeEvent()\"\n      });\n      return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that re-order this event against %%other%%.\n     */\n  }, {\n    key: \"reorderedEvent\",\n    value: function reorderedEvent(other) {\n      (0, index_js_1.assert)(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"removeEvent()\"\n      });\n      (0, index_js_1.assert)(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"removeEvent()\"\n      });\n      return createReorderedTransactionFilter(this, other);\n    }\n    /**\n     *  Returns a new TransactionResponse instance which has the ability to\n     *  detect (and throw an error) if the transaction is replaced, which\n     *  will begin scanning at %%startBlock%%.\n     *\n     *  This should generally not be used by developers and is intended\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\n     *  have devastating performance consequences if used incorrectly.\n     */\n  }, {\n    key: \"replaceableTransaction\",\n    value: function replaceableTransaction(startBlock) {\n      (0, index_js_1.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n      var tx = new TransactionResponse(this, this.provider);\n      _classPrivateFieldSet(tx, _startBlock, startBlock);\n      return tx;\n    }\n  }]);\n  return TransactionResponse;\n}();\nexports.TransactionResponse = TransactionResponse;\nfunction createOrphanedBlockFilter(block) {\n  return {\n    orphan: \"drop-block\",\n    hash: block.hash,\n    number: block.number\n  };\n}\nfunction createReorderedTransactionFilter(tx, other) {\n  return {\n    orphan: \"reorder-transaction\",\n    tx: tx,\n    other: other\n  };\n}\nfunction createRemovedTransactionFilter(tx) {\n  return {\n    orphan: \"drop-transaction\",\n    tx: tx\n  };\n}\nfunction createRemovedLogFilter(log) {\n  return {\n    orphan: \"drop-log\",\n    log: {\n      transactionHash: log.transactionHash,\n      blockHash: log.blockHash,\n      blockNumber: log.blockNumber,\n      address: log.address,\n      data: log.data,\n      topics: Object.freeze(log.topics.slice()),\n      index: log.index\n    }\n  };\n}","map":{"version":3,"names":["index_js_1","require","index_js_2","BN_0","BigInt","getValue","value","toJson","toString","FeeData","gasPrice","maxFeePerGas","maxPriorityFeePerGas","_classCallCheck","_defineProperty","defineProperties","_createClass","key","toJSON","_type","exports","copyRequest","req","result","to","from","data","hexlify","bigIntKeys","split","_iterator","_createForOfIteratorHelper","_step","s","n","done","getBigInt","concat","err","e","f","numberKeys","_iterator2","_step2","getNumber","accessList","accessListify","blockTag","enableCcipRead","customData","_transactions","WeakMap","_Symbol$iterator","Symbol","iterator","Block","block","provider","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","transactions","map","tx","TransactionResponse","hash","number","timestamp","parentHash","nonce","difficulty","gasLimit","gasUsed","miner","extraData","baseFeePerGas","get","_classPrivateFieldGet","txs","slice","length","assert","operation","_this","index","next","undefined","Date","_getTransaction","_asyncToGenerator","_regeneratorRuntime","mark","_callee","indexOrHash","_iterator3","_step3","v","wrap","_callee$","_context","prev","toLowerCase","abrupt","t0","finish","Error","getTransaction","sent","stop","_x","apply","arguments","getPrefetchedTransaction","prefetchedTransactions","_iterator4","_step4","assertArgument","isMined","isLondon","orphanedEvent","createOrphanedBlockFilter","Log","log","topics","Object","freeze","transactionHash","blockHash","blockNumber","removed","address","transactionIndex","_getBlock","_callee2","_callee2$","_context2","getBlock","_getTransaction2","_callee3","_callee3$","_context3","_getTransactionReceipt","_callee4","receipt","_callee4$","_context4","getTransactionReceipt","removedEvent","createRemovedLogFilter","_logs","_Symbol$iterator2","TransactionReceipt","logs","effectiveGasPrice","contractAddress","logsBloom","cumulativeGasUsed","type","status","root","_this2","_getBlock2","_callee5","_callee5$","_context5","_getTransaction3","_callee6","_callee6$","_context6","_getResult","_callee7","_callee7$","_context7","getTransactionResult","getResult","_confirmations","_callee8","_callee8$","_context8","getBlockNumber","t1","t2","confirmations","createRemovedTransactionFilter","reorderedEvent","other","createReorderedTransactionFilter","_startBlock","chainId","signature","_getBlock3","_callee9","_callee9$","_context9","_getTransaction4","_callee10","_callee10$","_context10","_confirmations2","_callee11","_yield","_blockNumber","_callee11$","_context11","resolveProperties","_wait","_callee15","_confirms","_timeout","_this3","confirms","timeout","startBlock","nextScan","stopScanning","checkReplacement","waiter","_callee15$","_context15","_ref","_callee12","_yield2","mined","_iterator5","_step5","i","_receipt","reason","_callee12$","_context12","getTransactionCount","cancelled","replacement","replaceableTransaction","Promise","resolve","reject","cancellers","cancel","forEach","c","push","timer","setTimeout","makeError","clearTimeout","txListener","_ref2","_callee13","_callee13$","_context13","_x4","off","on","replaceListener","_ref3","_callee14","_callee14$","_context14","isError","once","wait","_x2","_x3","isLegacy","isBerlin","Number","isInteger","orphan"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/providers/provider.ts"],"sourcesContent":["//import { resolveAddress } from \"@ethersproject/address\";\nimport {\n    defineProperties, getBigInt, getNumber, hexlify, resolveProperties,\n    assert, assertArgument, isError, makeError\n} from \"../utils/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\n\nimport type { AddressLike, NameResolver } from \"../address/index.js\";\nimport type { BigNumberish, EventEmitterable } from \"../utils/index.js\";\nimport type { Signature } from \"../crypto/index.js\";\nimport type { AccessList, AccessListish, TransactionLike } from \"../transaction/index.js\";\n\nimport type { ContractRunner } from \"./contracts.js\";\nimport type { Network } from \"./network.js\";\n\n\nconst BN_0 = BigInt(0);\n\n/**\n *  A **BlockTag** specifies a specific block.\n *\n *  **numeric value** - specifies the block height, where\n *  the genesis block is block 0; many operations accept a negative\n *  value which indicates the block number should be deducted from\n *  the most recent block. A numeric value may be a ``number``, ``bigint``,\n *  or a decimal of hex string.\n *\n *  **blockhash** - specifies a specific block by its blockhash; this allows\n *  potentially orphaned blocks to be specifed, without ambiguity, but many\n *  backends do not support this for some operations.\n */\nexport type BlockTag = BigNumberish | string;\n\nimport {\n    BlockParams, LogParams, TransactionReceiptParams,\n    TransactionResponseParams\n} from \"./formatting.js\";\n\n// -----------------------\n\nfunction getValue<T>(value: undefined | null | T): null | T {\n    if (value == null) { return null; }\n    return value;\n}\n\nfunction toJson(value: null | bigint): null | string {\n    if (value == null) { return null; }\n    return value.toString();\n}\n\n// @TODO? <T extends FeeData = { }> implements Required<T>\n\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nexport class FeeData {\n    /**\n     *  The gas price for legacy networks.\n     */\n    readonly gasPrice!: null | bigint;\n\n    /**\n     *  The maximum fee to pay per gas.\n     *\n     *  The base fee per gas is defined by the network and based on\n     *  congestion, increasing the cost during times of heavy load\n     *  and lowering when less busy.\n     *\n     *  The actual fee per gas will be the base fee for the block\n     *  and the priority fee, up to the max fee per gas.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    readonly maxFeePerGas!: null | bigint;\n\n    /**\n     *  The additional amout to pay per gas to encourage a validator\n     *  to include the transaction.\n     *\n     *  The purpose of this is to compensate the validator for the\n     *  adjusted risk for including a given transaction.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    readonly maxPriorityFeePerGas!: null | bigint;\n\n    /**\n     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n     *  %%maxPriorityFeePerGas%%.\n     */\n    constructor(gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint) {\n        defineProperties<FeeData>(this, {\n            gasPrice: getValue(gasPrice),\n            maxFeePerGas: getValue(maxFeePerGas),\n            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n        });\n    }\n\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON(): any {\n        const {\n            gasPrice, maxFeePerGas, maxPriorityFeePerGas\n        } = this;\n        return {\n            _type: \"FeeData\",\n            gasPrice: toJson(gasPrice),\n            maxFeePerGas: toJson(maxFeePerGas),\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas),\n        };\n    }\n}\n\n\n/**\n *  A **TransactionRequest** is a transactions with potentially various\n *  properties not defined, or with less strict types for its values.\n *\n *  This is used to pass to various operations, which will internally\n *  coerce any types and populate any necessary values.\n */\nexport interface TransactionRequest {\n    /**\n     *  The transaction type.\n     */\n    type?: null | number;\n\n    /**\n     *  The target of the transaction.\n     */\n    to?: null | AddressLike;\n\n    /**\n     *  The sender of the transaction.\n     */\n    from?: null | AddressLike;\n\n    /**\n     *  The nonce of the transaction, used to prevent replay attacks.\n     */\n    nonce?: null | number;\n\n    /**\n     *  The maximum amount of gas to allow this transaction to consime.\n     */\n    gasLimit?: null | BigNumberish;\n\n    /**\n     *  The gas price to use for legacy transactions or transactions on\n     *  legacy networks.\n     *\n     *  Most of the time the ``max*FeePerGas`` is preferred.\n     */\n    gasPrice?: null | BigNumberish;\n\n    /**\n     *  The [[link-eip-1559]] maximum priority fee to pay per gas.\n     */\n    maxPriorityFeePerGas?: null | BigNumberish;\n\n    /**\n     *  The [[link-eip-1559]] maximum total fee to pay per gas. The actual\n     *  value used is protocol enforced to be the block's base fee.\n     */\n    maxFeePerGas?: null | BigNumberish;\n\n    /**\n     *  The transaction data.\n     */\n    data?: null | string;\n\n    /**\n     *  The transaction value (in wei).\n     */\n    value?: null | BigNumberish;\n\n    /**\n     *  The chain ID for the network this transaction is valid on.\n     */\n    chainId?: null | BigNumberish;\n\n    /**\n     *  The [[link-eip-2930]] access list. Storage slots included in the access\n     *  list are //warmed// by pre-loading them, so their initial cost to\n     *  fetch is guaranteed, but then each additional access is cheaper.\n     */\n    accessList?: null | AccessListish;\n\n    /**\n     *  A custom object, which can be passed along for network-specific\n     *  values.\n     */\n    customData?: any;\n\n    // Only meaningful when used for call\n\n    /**\n     *  When using ``call`` or ``estimateGas``, this allows a specific\n     *  block to be queried. Many backends do not support this and when\n     *  unsupported errors are silently squelched and ``\"latest\"`` is used. \n     */\n    blockTag?: BlockTag;\n\n    /**\n     *  When using ``call``, this enables CCIP-read, which permits the\n     *  provider to be redirected to web-based content during execution,\n     *  which is then further validated by the contract.\n     *\n     *  There are potential security implications allowing CCIP-read, as\n     *  it could be used to expose the IP address or user activity during\n     *  the fetch to unexpected parties.\n     */\n    enableCcipRead?: boolean;\n\n    // Todo?\n    //gasMultiplier?: number;\n};\n\n/**\n *  A **PreparedTransactionRequest** is identical to a [[TransactionRequest]]\n *  except all the property types are strictly enforced.\n */\nexport interface PreparedTransactionRequest {\n    /**\n     *  The transaction type.\n     */\n    type?: number;\n\n\n    /**\n     *  The target of the transaction.\n     */\n    to?: AddressLike;\n\n    /**\n     *  The sender of the transaction.\n     */\n    from?: AddressLike;\n\n    /**\n     *  The nonce of the transaction, used to prevent replay attacks.\n     */\n\n    nonce?: number;\n\n    /**\n     *  The maximum amount of gas to allow this transaction to consime.\n     */\n    gasLimit?: bigint;\n\n    /**\n     *  The gas price to use for legacy transactions or transactions on\n     *  legacy networks.\n     *\n     *  Most of the time the ``max*FeePerGas`` is preferred.\n     */\n    gasPrice?: bigint;\n\n    /**\n     *  The [[link-eip-1559]] maximum priority fee to pay per gas.\n     */\n    maxPriorityFeePerGas?: bigint;\n\n    /**\n     *  The [[link-eip-1559]] maximum total fee to pay per gas. The actual\n     *  value used is protocol enforced to be the block's base fee.\n     */\n    maxFeePerGas?: bigint;\n\n    /**\n     *  The transaction data.\n     */\n    data?: string;\n\n\n    /**\n     *  The transaction value (in wei).\n     */\n    value?: bigint;\n\n    /**\n     *  The chain ID for the network this transaction is valid on.\n     */\n    chainId?: bigint;\n\n    /**\n     *  The [[link-eip-2930]] access list. Storage slots included in the access\n     *  list are //warmed// by pre-loading them, so their initial cost to\n     *  fetch is guaranteed, but then each additional access is cheaper.\n     */\n    accessList?: AccessList;\n\n    /**\n     *  A custom object, which can be passed along for network-specific\n     *  values.\n     */\n    customData?: any;\n\n\n\n    /**\n     *  When using ``call`` or ``estimateGas``, this allows a specific\n     *  block to be queried. Many backends do not support this and when\n     *  unsupported errors are silently squelched and ``\"latest\"`` is used. \n     */\n    blockTag?: BlockTag;\n\n    /**\n     *  When using ``call``, this enables CCIP-read, which permits the\n     *  provider to be redirected to web-based content during execution,\n     *  which is then further validated by the contract.\n     *\n     *  There are potential security implications allowing CCIP-read, as\n     *  it could be used to expose the IP address or user activity during\n     *  the fetch to unexpected parties.\n     */\n    enableCcipRead?: boolean;\n}\n\n/**\n *  Returns a copy of %%req%% with all properties coerced to their strict\n *  types.\n */\nexport function copyRequest(req: TransactionRequest): PreparedTransactionRequest {\n    const result: any = { };\n\n    // These could be addresses, ENS names or Addressables\n    if (req.to) { result.to = req.to; }\n    if (req.from) { result.from = req.from; }\n\n    if (req.data) { result.data = hexlify(req.data); }\n\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n    for (const key of bigIntKeys) {\n        if (!(key in req) || (<any>req)[key] == null) { continue; }\n        result[key] = getBigInt((<any>req)[key], `request.${ key }`);\n    }\n\n    const numberKeys = \"type,nonce\".split(/,/);\n    for (const key of numberKeys) {\n        if (!(key in req) || (<any>req)[key] == null) { continue; }\n        result[key] = getNumber((<any>req)[key], `request.${ key }`);\n    }\n\n    if (req.accessList) {\n        result.accessList = accessListify(req.accessList);\n    }\n\n    if (\"blockTag\" in req) { result.blockTag = req.blockTag; }\n\n    if (\"enableCcipRead\" in req) {\n        result.enableCcipRead = !!req.enableCcipRead\n    }\n\n    if (\"customData\" in req) {\n        result.customData = req.customData;\n    }\n\n    return result;\n}\n\n//////////////////////\n// Block\n\n/**\n *  An Interface to indicate a [[Block]] has been included in the\n *  blockchain. This asserts a Type Guard that necessary properties\n *  are non-null.\n *\n *  Before a block is included, it is a //pending// block.\n */\nexport interface MinedBlock extends Block {\n    /**\n     *  The block number also known as the block height.\n     */\n    readonly number: number;\n\n    /**\n     *  The block hash.\n     */\n    readonly hash: string;\n\n    /**\n     *  The block timestamp, in seconds from epoch.\n     */\n    readonly timestamp: number;\n\n    /**\n     *  The block date, created from the [[timestamp]].\n     */\n    readonly date: Date;\n\n    /**\n     *  The miner of the block, also known as the ``author`` or\n     *  block ``producer``.\n     */\n    readonly miner: string;\n}\n\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nexport class Block implements BlockParams, Iterable<string> {\n\n    /**\n     *  The provider connected to the block used to fetch additional details\n     *  if necessary.\n     */\n    readonly provider!: Provider;\n\n    /**\n     *  The block number, sometimes called the block height. This is a\n     *  sequential number that is one higher than the parent block.\n     */\n    readonly number!: number;\n\n    /**\n     *  The block hash.\n     *\n     *  This hash includes all properties, so can be safely used to identify\n     *  an exact set of block properties.\n     */\n    readonly hash!: null | string;\n\n    /**\n     *  The timestamp for this block, which is the number of seconds since\n     *  epoch that this block was included.\n     */\n    readonly timestamp!: number;\n\n    /**\n     *  The block hash of the parent block.\n     */\n    readonly parentHash!: string;\n\n    /**\n     *  The nonce.\n     *\n     *  On legacy networks, this is the random number inserted which\n     *  permitted the difficulty target to be reached.\n     */\n    readonly nonce!: string;\n\n    /**\n     *  The difficulty target.\n     *\n     *  On legacy networks, this is the proof-of-work target required\n     *  for a block to meet the protocol rules to be included.\n     *\n     *  On modern networks, this is a random number arrived at using\n     *  randao.  @TODO: Find links?\n     */\n    readonly difficulty!: bigint;\n\n\n    /**\n     *  The total gas limit for this block.\n     */\n    readonly gasLimit!: bigint;\n\n    /**\n     *  The total gas used in this block.\n     */\n    readonly gasUsed!: bigint;\n\n    /**\n     *  The miner coinbase address, wihch receives any subsidies for\n     *  including this block.\n     */\n    readonly miner!: string;\n\n    /**\n     *  Any extra data the validator wished to include.\n     */\n    readonly extraData!: string;\n\n    /**\n     *  The base fee per gas that all transactions in this block were\n     *  charged.\n     *\n     *  This adjusts after each block, depending on how congested the network\n     *  is.\n     */\n    readonly baseFeePerGas!: null | bigint;\n\n    readonly #transactions: Array<string | TransactionResponse>;\n\n    /**\n     *  Create a new **Block** object.\n     *\n     *  This should generally not be necessary as the unless implementing a\n     *  low-level library.\n     */\n    constructor(block: BlockParams, provider: Provider) {\n\n        this.#transactions = block.transactions.map((tx) => {\n            if (typeof(tx) !== \"string\") {\n                return new TransactionResponse(tx, provider);\n            }\n            return tx;\n        });\n\n        defineProperties<Block>(this, {\n            provider,\n\n            hash: getValue(block.hash),\n\n            number: block.number,\n            timestamp: block.timestamp,\n\n            parentHash: block.parentHash,\n\n            nonce: block.nonce,\n            difficulty: block.difficulty,\n\n            gasLimit: block.gasLimit,\n            gasUsed: block.gasUsed,\n            miner: block.miner,\n            extraData: block.extraData,\n\n            baseFeePerGas: getValue(block.baseFeePerGas)\n        });\n    }\n\n    /**\n     *  Returns the list of transaction hashes.\n     */\n    get transactions(): ReadonlyArray<string> {\n        return this.#transactions.map((tx) => {\n            if (typeof(tx) === \"string\") { return tx; }\n            return tx.hash;\n        });\n    }\n\n    /**\n     *  Returns the complete transactions for blocks which\n     *  prefetched them, by passing ``true`` to %%prefetchTxs%%\n     *  into [[Provider-getBlock]].\n     */\n    get prefetchedTransactions(): Array<TransactionResponse> {\n        const txs = this.#transactions.slice();\n\n        // Doesn't matter...\n        if (txs.length === 0) { return [ ]; }\n\n        // Make sure we prefetched the transactions\n        assert(typeof(txs[0]) === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"transactionResponses()\"\n        });\n\n        return <Array<TransactionResponse>>txs;\n    }\n\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON(): any {\n        const {\n            baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash,\n            miner, nonce, number, parentHash, timestamp, transactions\n        } = this;\n\n        return {\n            _type: \"Block\",\n            baseFeePerGas: toJson(baseFeePerGas),\n            difficulty: toJson(difficulty),\n            extraData,\n            gasLimit: toJson(gasLimit),\n            gasUsed: toJson(gasUsed),\n            hash, miner, nonce, number, parentHash, timestamp,\n            transactions,\n        };\n    }\n\n    [Symbol.iterator](): Iterator<string> {\n        let index = 0;\n        const txs = this.transactions;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return {\n                        value: txs[index++], done: false\n                    }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    /**\n     *  The number of transactions in this block.\n     */\n    get length(): number { return this.#transactions.length; }\n\n    /**\n     *  The [[link-js-date]] this block was included at.\n     */\n    get date(): null | Date {\n        if (this.timestamp == null) { return null; }\n        return new Date(this.timestamp * 1000);\n    }\n\n    /**\n     *  Get the transaction at %%indexe%% within this block.\n     */\n    async getTransaction(indexOrHash: number | string): Promise<TransactionResponse> {\n        // Find the internal value by its index or hash\n        let tx: string | TransactionResponse | undefined = undefined;\n        if (typeof(indexOrHash) === \"number\") {\n            tx = this.#transactions[indexOrHash];\n\n        } else {\n            const hash = indexOrHash.toLowerCase();\n            for (const v of this.#transactions) {\n                if (typeof(v) === \"string\") {\n                    if (v !== hash) { continue; }\n                    tx = v;\n                    break;\n                } else {\n                    if (v.hash === hash) { continue; }\n                    tx = v;\n                    break;\n                }\n            }\n        }\n        if (tx == null) { throw new Error(\"no such tx\"); }\n\n        if (typeof(tx) === \"string\") {\n            return <TransactionResponse>(await this.provider.getTransaction(tx));\n        } else {\n            return tx;\n        }\n    }\n\n    /**\n     *  If a **Block** was fetched with a request to include the transactions\n     *  this will allow synchronous access to those transactions.\n     *\n     *  If the transactions were not prefetched, this will throw.\n     */\n    getPrefetchedTransaction(indexOrHash: number | string): TransactionResponse {\n        const txs = this.prefetchedTransactions;\n        if (typeof(indexOrHash) === \"number\") {\n            return txs[indexOrHash];\n        }\n\n        indexOrHash = indexOrHash.toLowerCase();\n        for (const tx of txs) {\n            if (tx.hash === indexOrHash) { return tx; }\n        }\n\n        assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n    }\n\n    /**\n     *  Returns true if this block been mined. This provides a type guard\n     *  for all properties on a [[MinedBlock]].\n     */\n    isMined(): this is MinedBlock { return !!this.hash; }\n\n    /**\n     *  Returns true if this block is an [[link-eip-2930]] block.\n     */\n    isLondon(): this is (Block & { baseFeePerGas: bigint }) {\n        return !!this.baseFeePerGas;\n    }\n\n    /**\n     *  @_ignore:\n     */\n    orphanedEvent(): OrphanFilter {\n        if (!this.isMined()) { throw new Error(\"\"); }\n        return createOrphanedBlockFilter(this);\n    }\n}\n\n//////////////////////\n// Log\n\n/**\n *  A **Log** in Ethereum represents an event that has been included in a\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\n *  Solidity's emit for announcing events.\n */\nexport class Log implements LogParams {\n\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    readonly provider: Provider;\n\n    /**\n     *  The transaction hash of the transaction this log occurred in. Use the\n     *  [[Log-getTransaction]] to get the [[TransactionResponse]].\n     */\n    readonly transactionHash!: string;\n\n    /**\n     *  The block hash of the block this log occurred in. Use the\n     *  [[Log-getBlock]] to get the [[Block]].\n     */\n    readonly blockHash!: string;\n\n    /**\n     *  The block number of the block this log occurred in. It is preferred\n     *  to use the [[Block-hash]] when fetching the related [[Block]],\n     *  since in the case of an orphaned block, the block at that height may\n     *  have changed.\n     */\n    readonly blockNumber!: number;\n\n    /**\n     *  If the **Log** represents a block that was removed due to an orphaned\n     *  block, this will be true.\n     *\n     *  This can only happen within an orphan event listener.\n     */\n    readonly removed!: boolean;\n\n    /**\n     *  The address of the contract that emitted this log.\n     */\n    readonly address!: string;\n\n    /**\n     *  The data included in this log when it was emitted.\n     */\n    readonly data!: string;\n\n    /**\n     *  The indexed topics included in this log when it was emitted.\n     *\n     *  All topics are included in the bloom filters, so they can be\n     *  efficiently filtered using the [[Provider-getLogs]] method.\n     */\n    readonly topics!: ReadonlyArray<string>;\n\n    /**\n     *  The index within the block this log occurred at. This is generally\n     *  not useful to developers, but can be used with the various roots\n     *  to proof inclusion within a block.\n     */\n    readonly index!: number;\n\n    /**\n     *  The index within the transaction of this log.\n     */\n    readonly transactionIndex!: number;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(log: LogParams, provider: Provider) {\n        this.provider = provider;\n\n        const topics = Object.freeze(log.topics.slice());\n        defineProperties<Log>(this, {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n\n            removed: log.removed,\n\n            address: log.address,\n            data: log.data,\n\n            topics,\n\n            index: log.index,\n            transactionIndex: log.transactionIndex,\n        });\n    }\n\n    /**\n     *  Returns a JSON-compatible object.\n     */\n    toJSON(): any {\n        const {\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        } = this;\n\n        return {\n            _type: \"log\",\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        };\n    }\n\n    /**\n     *  Returns the block that this log occurred in.\n     */\n    async getBlock(): Promise<Block> {\n        const block = await this.provider.getBlock(this.blockHash);\n        assert(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", { });\n        return block;\n    }\n\n    /**\n     *  Returns the transaction that this log occurred in.\n     */\n    async getTransaction(): Promise<TransactionResponse> {\n        const tx = await this.provider.getTransaction(this.transactionHash);\n        assert(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", { });\n        return tx;\n    }\n\n    /**\n     *  Returns the transaction receipt fot the transaction that this\n     *  log occurred in.\n     */\n    async getTransactionReceipt(): Promise<TransactionReceipt> {\n        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n        assert(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", { });\n        return receipt;\n    }\n\n    /**\n     *  @_ignore:\n     */\n    removedEvent(): OrphanFilter {\n        return createRemovedLogFilter(this);\n    }\n}\n\n//////////////////////\n// Transaction Receipt\n\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\n\n/**\n *  A **TransactionReceipt** includes additional information about a\n *  transaction that is only available after it has been mined.\n */\nexport class TransactionReceipt implements TransactionReceiptParams, Iterable<Log> {\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    readonly provider!: Provider;\n\n    /**\n     *  The address the transaction was send to.\n     */\n    readonly to!: null | string;\n\n    /**\n     *  The sender of the transaction.\n     */\n    readonly from!: string;\n\n    /**\n     *  The address of the contract if the transaction was directly\n     *  responsible for deploying one.\n     *\n     *  This is non-null **only** if the ``to`` is empty and the ``data``\n     *  was successfully executed as initcode.\n     */\n    readonly contractAddress!: null | string;\n\n    /**\n     *  The transaction hash.\n     */\n    readonly hash!: string;\n\n    /**\n     *  The index of this transaction within the block transactions.\n     */\n    readonly index!: number;\n\n    /**\n     *  The block hash of the [[Block]] this transaction was included in.\n     */\n    readonly blockHash!: string;\n\n    /**\n     *  The block number of the [[Block]] this transaction was included in.\n     */\n    readonly blockNumber!: number;\n\n    /**\n     *  The bloom filter bytes that represent all logs that occurred within\n     *  this transaction. This is generally not useful for most developers,\n     *  but can be used to validate the included logs.\n     */\n    readonly logsBloom!: string;\n\n    /**\n     *  The actual amount of gas used by this transaction.\n     *\n     *  When creating a transaction, the amount of gas that will be used can\n     *  only be approximated, but the sender must pay the gas fee for the\n     *  entire gas limit. After the transaction, the difference is refunded.\n     */\n    readonly gasUsed!: bigint;\n\n    /**\n     *  The amount of gas used by all transactions within the block for this\n     *  and all transactions with a lower ``index``.\n     *\n     *  This is generally not useful for developers but can be used to\n     *  validate certain aspects of execution.\n     */\n    readonly cumulativeGasUsed!: bigint;\n\n    /**\n     *  The actual gas price used during execution.\n     *\n     *  Due to the complexity of [[link-eip-1559]] this value can only\n     *  be caluclated after the transaction has been mined, snce the base\n     *  fee is protocol-enforced.\n     */\n    readonly gasPrice!: bigint;\n\n    /**\n     *  The [[link-eip-2718]] transaction type.\n     */\n    readonly type!: number;\n    //readonly byzantium!: boolean;\n\n    /**\n     *  The status of this transaction, indicating success (i.e. ``1``) or\n     *  a revert (i.e. ``0``).\n     *\n     *  This is available in post-byzantium blocks, but some backends may\n     *  backfill this value.\n     */\n    readonly status!: null | number;\n\n    /**\n     *  The root hash of this transaction.\n     *\n     *  This is no present and was only included in pre-byzantium blocks, but\n     *  could be used to validate certain parts of the receipt.\n     */\n    readonly root!: null | string;\n\n    readonly #logs: ReadonlyArray<Log>;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(tx: TransactionReceiptParams, provider: Provider) {\n        this.#logs = Object.freeze(tx.logs.map((log) => {\n            return new Log(log, provider);\n        }));\n\n        let gasPrice = BN_0;\n        if (tx.effectiveGasPrice != null) {\n            gasPrice = tx.effectiveGasPrice;\n        } else if (tx.gasPrice != null) {\n            gasPrice = tx.gasPrice;\n        }\n\n        defineProperties<TransactionReceipt>(this, {\n            provider,\n\n            to: tx.to,\n            from: tx.from,\n            contractAddress: tx.contractAddress,\n\n            hash: tx.hash,\n            index: tx.index,\n\n            blockHash: tx.blockHash,\n            blockNumber: tx.blockNumber,\n\n            logsBloom: tx.logsBloom,\n\n            gasUsed: tx.gasUsed,\n            cumulativeGasUsed: tx.cumulativeGasUsed,\n            gasPrice,\n\n            type: tx.type,\n            //byzantium: tx.byzantium,\n            status: tx.status,\n            root: tx.root\n        });\n    }\n\n    /**\n     *  The logs for this transaction.\n     */\n    get logs(): ReadonlyArray<Log> { return this.#logs; }\n\n    /**\n     *  Returns a JSON-compatible representation.\n     */\n    toJSON(): any {\n        const {\n            to, from, contractAddress, hash, index, blockHash, blockNumber, logsBloom,\n            logs, //byzantium, \n            status, root\n        } = this;\n\n        return {\n            _type: \"TransactionReceipt\",\n            blockHash, blockNumber,\n            //byzantium, \n            contractAddress,\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n            from,\n            gasPrice: toJson(this.gasPrice),\n            gasUsed: toJson(this.gasUsed),\n            hash, index, logs, logsBloom, root, status, to\n        };\n    }\n\n    /**\n     *  @_ignore:\n     */\n    get length(): number { return this.logs.length; }\n\n    [Symbol.iterator](): Iterator<Log> {\n        let index = 0;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return { value: this.logs[index++], done: false }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    /**\n     *  The total fee for this transaction, in wei.\n     */\n    get fee(): bigint {\n        return this.gasUsed * this.gasPrice;\n    }\n\n    /**\n     *  Resolves to the block this transaction occurred in.\n     */\n    async getBlock(): Promise<Block> {\n        const block = await this.provider.getBlock(this.blockHash);\n        if (block == null) { throw new Error(\"TODO\"); }\n        return block;\n    }\n\n    /**\n     *  Resolves to the transaction this transaction occurred in.\n     */\n    async getTransaction(): Promise<TransactionResponse> {\n        const tx = await this.provider.getTransaction(this.hash);\n        if (tx == null) { throw new Error(\"TODO\"); }\n        return tx;\n    }\n\n    /**\n     *  Resolves to the return value of the execution of this transaction.\n     *\n     *  Support for this feature is limited, as it requires an archive node\n     *  with the ``debug_`` or ``trace_`` API enabled.\n     */\n    async getResult(): Promise<string> {\n        return <string>(await this.provider.getTransactionResult(this.hash));\n    }\n\n    /**\n     *  Resolves to the number of confirmations this transaction has.\n     */\n    async confirmations(): Promise<number> {\n        return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\n    }\n\n    /**\n     *  @_ignore:\n     */\n    removedEvent(): OrphanFilter {\n        return createRemovedTransactionFilter(this);\n    }\n\n    /**\n     *  @_ignore:\n     */\n    reorderedEvent(other?: TransactionResponse): OrphanFilter {\n        assert(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"reorderedEvent(other)\" });\n        return createReorderedTransactionFilter(this, other);\n    }\n}\n\n\n//////////////////////\n// Transaction Response\n\n/**\n *  A **MinedTransactionResponse** is an interface representing a\n *  transaction which has been mined and allows for a type guard for its\n *  property values being defined.\n */\nexport interface MinedTransactionResponse extends TransactionResponse {\n    /**\n     *  The block number this transaction occurred in.\n     */\n    blockNumber: number;\n\n    /**\n     *  The block hash this transaction occurred in.\n     */\n    blockHash: string;\n\n    /**\n     *  The date this transaction occurred on.\n     */\n    date: Date;\n}\n\n\n/**\n *  A **TransactionResponse** includes all properties about a transaction\n *  that was sent to the network, which may or may not be included in a\n *  block.\n *\n *  The [[TransactionResponse-isMined]] can be used to check if the\n *  transaction has been mined as well as type guard that the otherwise\n *  possibly ``null`` properties are defined.\n */\nexport class TransactionResponse implements TransactionLike<string>, TransactionResponseParams {\n    /**\n     *  The provider this is connected to, which will influence how its\n     *  methods will resolve its async inspection methods.\n     */\n    readonly provider: Provider;\n\n    /**\n     *  The block number of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    readonly blockNumber: null | number;\n\n    /**\n     *  The blockHash of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    readonly blockHash: null | string;\n\n    /**\n     *  The index within the block that this transaction resides at.\n     */\n    readonly index!: number;\n\n    /**\n     *  The transaction hash.\n     */\n    readonly hash!: string;\n\n    /**\n     *  The [[link-eip-2718]] transaction envelope type. This is\n     *  ``0`` for legacy transactions types.\n     */\n    readonly type!: number;\n\n    /**\n     *  The receiver of this transaction.\n     *\n     *  If ``null``, then the transaction is an initcode transaction.\n     *  This means the result of executing the [[data]] will be deployed\n     *  as a new contract on chain (assuming it does not revert) and the\n     *  address may be computed using [[getCreateAddress]].\n     */\n    readonly to!: null | string;\n\n    /**\n     *  The sender of this transaction. It is implicitly computed\n     *  from the transaction pre-image hash (as the digest) and the\n     *  [[signature]] using ecrecover.\n     */\n    readonly from!: string;\n\n    /**\n     *  The nonce, which is used to prevent replay attacks and offer\n     *  a method to ensure transactions from a given sender are explicitly\n     *  ordered.\n     *\n     *  When sending a transaction, this must be equal to the number of\n     *  transactions ever sent by [[from]].\n     */\n    readonly nonce!: number;\n\n    /**\n     *  The maximum units of gas this transaction can consume. If execution\n     *  exceeds this, the entries transaction is reverted and the sender\n     *  is charged for the full amount, despite not state changes being made.\n     */\n    readonly gasLimit!: bigint;\n\n    /**\n     *  The gas price can have various values, depending on the network.\n     *\n     *  In modern networks, for transactions that are included this is\n     *  the //effective gas price// (the fee per gas that was actually\n     *  charged), while for transactions that have not been included yet\n     *  is the [[maxFeePerGas]].\n     *\n     *  For legacy transactions, or transactions on legacy networks, this\n     *  is the fee that will be charged per unit of gas the transaction\n     *  consumes.\n     */\n    readonly gasPrice!: bigint;\n\n    /**\n     *  The maximum priority fee (per unit of gas) to allow a\n     *  validator to charge the sender. This is inclusive of the\n     *  [[maxFeeFeePerGas]].\n     */\n    readonly maxPriorityFeePerGas!: null | bigint;\n\n    /**\n     *  The maximum fee (per unit of gas) to allow this transaction\n     *  to charge the sender.\n     */\n    readonly maxFeePerGas!: null | bigint;\n\n    /**\n     *  The data.\n     */\n    readonly data!: string;\n\n    /**\n     *  The value, in wei. Use [[formatEther]] to format this value\n     *  as ether.\n     */\n    readonly value!: bigint;\n\n    /**\n     *  The chain ID.\n     */\n    readonly chainId!: bigint;\n\n    /**\n     *  The signature.\n     */\n    readonly signature!: Signature;\n\n    /**\n     *  The [[link-eip-2930]] access list for transaction types that\n     *  support it, otherwise ``null``.\n     */\n    readonly accessList!: null | AccessList;\n\n    #startBlock: number;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(tx: TransactionResponseParams, provider: Provider) {\n        this.provider = provider;\n\n        this.blockNumber = (tx.blockNumber != null) ? tx.blockNumber: null;\n        this.blockHash = (tx.blockHash != null) ? tx.blockHash: null;\n\n        this.hash = tx.hash;\n        this.index = tx.index;\n\n        this.type = tx.type;\n\n        this.from = tx.from;\n        this.to = tx.to || null;\n\n        this.gasLimit = tx.gasLimit;\n        this.nonce = tx.nonce;\n        this.data = tx.data;\n        this.value = tx.value;\n\n        this.gasPrice = tx.gasPrice;\n        this.maxPriorityFeePerGas = (tx.maxPriorityFeePerGas != null) ? tx.maxPriorityFeePerGas: null;\n        this.maxFeePerGas = (tx.maxFeePerGas != null) ? tx.maxFeePerGas: null;\n\n        this.chainId = tx.chainId;\n        this.signature = tx.signature;\n\n        this.accessList = (tx.accessList != null) ? tx.accessList: null;\n\n        this.#startBlock = -1;\n    }\n\n    /**\n     *  Returns a JSON-compatible representation of this transaction.\n     */\n    toJSON(): any {\n        const {\n            blockNumber, blockHash, index, hash, type, to, from, nonce,\n            data, signature, accessList\n        } = this;\n\n        return {\n            _type: \"TransactionReceipt\",\n            accessList, blockNumber, blockHash,\n            chainId: toJson(this.chainId),\n            data, from,\n            gasLimit: toJson(this.gasLimit),\n            gasPrice: toJson(this.gasPrice),\n            hash,\n            maxFeePerGas: toJson(this.maxFeePerGas),\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n            nonce, signature, to, index, type,\n            value: toJson(this.value),\n        };\n    }\n\n    /**\n     *  Resolves to the Block that this transaction was included in.\n     *\n     *  This will return null if the transaction has not been included yet.\n     */\n    async getBlock(): Promise<null | Block> {\n        let blockNumber = this.blockNumber;\n        if (blockNumber == null) {\n            const tx = await this.getTransaction();\n            if (tx) { blockNumber = tx.blockNumber; }\n        }\n        if (blockNumber == null) { return null; }\n        const block = this.provider.getBlock(blockNumber);\n        if (block == null) { throw new Error(\"TODO\"); }\n        return block;\n    }\n\n    /**\n     *  Resolves to this transaction being re-requested from the\n     *  provider. This can be used if you have an unmined transaction\n     *  and wish to get an up-to-date populated instance.\n     */\n    async getTransaction(): Promise<null | TransactionResponse> {\n        return this.provider.getTransaction(this.hash);\n    }\n\n    /**\n     *  Resolve to the number of confirmations this transaction has.\n     */\n    async confirmations(): Promise<number> {\n        if (this.blockNumber == null) {\n            const { tx, blockNumber } = await resolveProperties({\n                tx: this.getTransaction(),\n                blockNumber: this.provider.getBlockNumber()\n            });\n\n            // Not mined yet...\n            if (tx == null || tx.blockNumber == null) { return 0; }\n\n            return blockNumber - tx.blockNumber + 1;\n        }\n\n        const blockNumber = await this.provider.getBlockNumber();\n        return blockNumber - this.blockNumber + 1;\n    }\n\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(_confirms?: number, _timeout?: number): Promise<null | TransactionReceipt> {\n        const confirms = (_confirms == null) ? 1: _confirms;\n        const timeout = (_timeout == null) ? 0: _timeout;\n\n        let startBlock = this.#startBlock\n        let nextScan = -1;\n        let stopScanning = (startBlock === -1) ? true: false;\n        const checkReplacement = async () => {\n            // Get the current transaction count for this sender\n            if (stopScanning) { return null; }\n            const { blockNumber, nonce } = await resolveProperties({\n                blockNumber: this.provider.getBlockNumber(),\n                nonce: this.provider.getTransactionCount(this.from)\n            });\n\n            // No transaction or our nonce has not been mined yet; but we\n            // can start scanning later when we do start\n            if (nonce < this.nonce) {\n                startBlock = blockNumber;\n                return;\n            }\n\n            // We were mined; no replacement\n            if (stopScanning) { return null; }\n            const mined = await this.getTransaction();\n            if (mined && mined.blockNumber != null) { return; }\n\n            // We were replaced; start scanning for that transaction\n\n            // Starting to scan; look back a few extra blocks for safety\n            if (nextScan === -1) {\n                nextScan = startBlock - 3;\n                if (nextScan < this.#startBlock) { nextScan = this.#startBlock; }\n            }\n\n            while (nextScan <= blockNumber) {\n                // Get the next block to scan\n                if (stopScanning) { return null; }\n                const block = await this.provider.getBlock(nextScan, true);\n\n                // This should not happen; but we'll try again shortly\n                if (block == null) { return; }\n\n                // We were mined; no replacement\n                for (const hash of block) {\n                    if (hash === this.hash) { return; }\n                }\n\n                // Search for the transaction that replaced us\n                for (let i = 0; i < block.length; i++) {\n                    const tx: TransactionResponse = await block.getTransaction(i);\n\n                    if (tx.from === this.from && tx.nonce === this.nonce) {\n                        // Get the receipt\n                        if (stopScanning) { return null; }\n                        const receipt = await this.provider.getTransactionReceipt(tx.hash);\n\n                        // This should not happen; but we'll try again shortly\n                        if (receipt == null) { return; }\n\n                        // We will retry this on the next block (this case could be optimized)\n                        if ((blockNumber - receipt.blockNumber + 1) < confirms) { return; }\n\n                        // The reason we were replaced\n                        let reason: \"replaced\" | \"repriced\" | \"cancelled\" = \"replaced\";\n                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n                            reason = \"repriced\";\n                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n                            reason = \"cancelled\"\n                        }\n\n                        assert(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                            reason,\n                            replacement: tx.replaceableTransaction(startBlock),\n                            hash: tx.hash,\n                            receipt\n                        });\n                    }\n                }\n\n                nextScan++;\n            }\n            return;\n        };\n\n        const receipt = await this.provider.getTransactionReceipt(this.hash);\n\n        if (receipt) {\n            if ((await receipt.confirmations()) >= confirms) { return receipt; }\n\n        } else {\n            // Check for a replacement; throws if a replacement was found\n            await checkReplacement();\n\n            // Allow null only when the confirms is 0\n            if (confirms === 0) { return null; }\n        }\n\n        const waiter = new Promise((resolve, reject) => {\n            // List of things to cancel when we have a result (one way or the other)\n            const cancellers: Array<() => void> = [ ];\n            const cancel = () => { cancellers.forEach((c) => c()); };\n\n            // On cancel, stop scanning for replacements\n            cancellers.push(() => { stopScanning = true; });\n\n            // Set up any timeout requested\n            if (timeout > 0) {\n                const timer = setTimeout(() => {\n                    cancel();\n                    reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\n                }, timeout);\n                cancellers.push(() => { clearTimeout(timer); });\n            }\n\n            const txListener = async (receipt: TransactionReceipt) => {\n                // Done; return it!\n                if ((await receipt.confirmations()) >= confirms) {\n                    cancel();\n                    resolve(receipt);\n                }\n\n            };\n            cancellers.push(() => { this.provider.off(this.hash, txListener); });\n            this.provider.on(this.hash, txListener);\n            // We support replacement detection; start checking\n            if (startBlock >= 0) {\n                const replaceListener = async () => {\n                    try {\n                        // Check for a replacement; this throws only if one is found\n                        await checkReplacement();\n\n                    } catch (error) {\n                        // We were replaced (with enough confirms); re-throw the error\n                        if (isError(error, \"TRANSACTION_REPLACED\")) {\n                            cancel();\n                            reject(error);\n                            return;\n                        }\n                    }\n\n                    // Rescheudle a check on the next block\n                    if (!stopScanning) {\n                        this.provider.once(\"block\", replaceListener);\n                    }\n                };\n                cancellers.push(() => { this.provider.off(\"block\", replaceListener); });\n                this.provider.once(\"block\", replaceListener);\n            }\n        });\n\n        return await <Promise<TransactionReceipt>>waiter;\n    }\n\n    /**\n     *  Returns ``true`` if this transaction has been included.\n     *\n     *  This is effective only as of the time the TransactionResponse\n     *  was instantiated. To get up-to-date information, use\n     *  [[getTransaction]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  non-null property values for properties that are null for\n     *  unmined transactions.\n     */\n    isMined(): this is MinedTransactionResponse {\n        return (this.blockHash != null);\n    }\n\n    /**\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n     *  transaction.\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLegacy(): this is (TransactionResponse & { accessList: null, maxFeePerGas: null, maxPriorityFeePerGas: null }) {\n        return (this.type === 0)\n    }\n\n    /**\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n     *  transaction. See [[link-eip-2070]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isBerlin(): this is (TransactionResponse & { accessList: AccessList, maxFeePerGas: null, maxPriorityFeePerGas: null }) {\n        return (this.type === 1);\n    }\n\n    /**\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\n     *  transaction. See [[link-eip-1559]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLondon(): this is (TransactionResponse & { accessList: AccessList, maxFeePerGas: bigint, maxPriorityFeePerGas: bigint }){\n        return (this.type === 2);\n    }\n\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that evict this transaction.\n     */\n    removedEvent(): OrphanFilter {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        return createRemovedTransactionFilter(this);\n    }\n\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that re-order this event against %%other%%.\n     */\n    reorderedEvent(other?: TransactionResponse): OrphanFilter {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n\n        assert(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n\n        return createReorderedTransactionFilter(this, other);\n    }\n\n    /**\n     *  Returns a new TransactionResponse instance which has the ability to\n     *  detect (and throw an error) if the transaction is replaced, which\n     *  will begin scanning at %%startBlock%%.\n     *\n     *  This should generally not be used by developers and is intended\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\n     *  have devastating performance consequences if used incorrectly.\n     */\n    replaceableTransaction(startBlock: number): TransactionResponse {\n        assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n        const tx = new TransactionResponse(this, this.provider);\n        tx.#startBlock = startBlock;\n        return tx;\n    }\n}\n\n\n//////////////////////\n// OrphanFilter\n\n/**\n *  An Orphan Filter allows detecting when an orphan block has\n *  resulted in dropping a block or transaction or has resulted\n *  in transactions changing order.\n *\n *  Not currently fully supported.\n */\nexport type OrphanFilter = {\n    orphan: \"drop-block\",\n    hash: string,\n    number: number\n} | {\n    orphan: \"drop-transaction\",\n    tx: { hash: string, blockHash: string, blockNumber: number },\n    other?: { hash: string, blockHash: string, blockNumber: number }\n} | {\n    orphan: \"reorder-transaction\",\n    tx: { hash: string, blockHash: string, blockNumber: number },\n    other?: { hash: string, blockHash: string, blockNumber: number }\n} | {\n    orphan: \"drop-log\",\n    log: {\n        transactionHash: string,\n        blockHash: string,\n        blockNumber: number,\n        address: string,\n        data: string,\n        topics: ReadonlyArray<string>,\n        index: number\n    }\n};\n\nfunction createOrphanedBlockFilter(block: { hash: string, number: number }): OrphanFilter {\n    return { orphan: \"drop-block\", hash: block.hash, number: block.number };\n}\n\nfunction createReorderedTransactionFilter(tx: { hash: string, blockHash: string, blockNumber: number }, other?: { hash: string, blockHash: string, blockNumber: number }): OrphanFilter {\n    return { orphan: \"reorder-transaction\", tx, other };\n}\n\nfunction createRemovedTransactionFilter(tx: { hash: string, blockHash: string, blockNumber: number }): OrphanFilter {\n    return { orphan: \"drop-transaction\", tx };\n}\n\nfunction createRemovedLogFilter(log: { blockHash: string, transactionHash: string, blockNumber: number, address: string, data: string, topics: ReadonlyArray<string>, index: number }): OrphanFilter {\n    return { orphan: \"drop-log\", log: {\n        transactionHash: log.transactionHash,\n        blockHash: log.blockHash,\n        blockNumber: log.blockNumber,\n        address: log.address,\n        data: log.data,\n        topics: Object.freeze(log.topics.slice()),\n        index: log.index\n    } };\n}\n\n//////////////////////\n// EventFilter\n\n/**\n *  A **TopicFilter** provides a struture to define bloom-filter\n *  queries.\n *\n *  Each field that is ``null`` matches **any** value, a field that is\n *  a ``string`` must match exactly that value and and ``array`` is\n *  effectively an ``OR``-ed set, where any one of those values must\n *  match.\n */\nexport type TopicFilter = Array<null | string | Array<string>>;\n\n// @TODO:\n//export type DeferableTopicFilter = Array<null | string | Promise<string> | Array<string | Promise<string>>>;\n\n/**\n *  An **EventFilter** allows efficiently filtering logs (also known as\n *  events) using bloom filters included within blocks.\n */\nexport interface EventFilter {\n    address?: AddressLike | Array<AddressLike>;\n    topics?: TopicFilter;\n}\n\n/**\n *  A **Filter** allows searching a specific range of blocks for mathcing\n *  logs.\n */\nexport interface Filter extends EventFilter {\n\n    /**\n     *  The start block for the filter (inclusive).\n     */\n    fromBlock?: BlockTag;\n\n    /**\n     *  The end block for the filter (inclusive).\n     */\n    toBlock?: BlockTag;\n}\n\n/**\n *  A **FilterByBlockHash** allows searching a specific block for mathcing\n *  logs.\n */\nexport interface FilterByBlockHash extends EventFilter {\n    /**\n     *  The blockhash of the specific block for the filter.\n     */\n    blockHash?: string;\n}\n\n\n//////////////////////\n// ProviderEvent\n\n/**\n *  A **ProviderEvent** provides the types of events that can be subscribed\n *  to on a [[Provider]].\n *\n *  Each provider may include additional possible events it supports, but\n *  the most commonly supported are:\n *\n *  **``\"block\"``** - calls the listener with the current block number on each\n *  new block.\n *\n *  **``\"error\"``** - calls the listener on each async error that occurs during\n *  the event loop, with the error.\n *\n *  **``\"debug\"``** - calls the listener on debug events, which can be used to\n *  troubleshoot network errors, provider problems, etc.\n *\n *  **``transaction hash``** - calls the listener on each block after the\n *  transaction has been mined; generally ``.once`` is more appropriate for\n *  this event.\n *\n *  **``Array``** - calls the listener on each log that matches the filter.\n *\n *  [[EventFilter]] - calls the listener with each matching log\n */\nexport type ProviderEvent = string | Array<string | Array<string>> | EventFilter | OrphanFilter;\n\n\n//////////////////////\n// Provider\n\n/**\n *  A **Provider** is the primary method to interact with the read-only\n *  content on Ethereum.\n *\n *  It allows access to details about accounts, blocks and transactions\n *  and the ability to query event logs and simulate contract execution.\n *\n *  Account data includes the [balance](getBalance),\n *  [transaction count](getTransactionCount), [code](getCode) and\n *  [state trie storage](getStorage).\n *\n *  Simulating execution can be used to [call](call),\n *  [estimate gas](estimateGas) and\n *  [get transaction results](getTransactionResult).\n *\n *  The [[broadcastTransaction]] is the only method which allows updating\n *  the blockchain, but it is usually accessed by a [[Signer]], since a\n *  private key must be used to sign the transaction before it can be\n *  broadcast.\n */\nexport interface Provider extends ContractRunner, EventEmitterable<ProviderEvent>, NameResolver {\n\n    /**\n     *  The provider iteself.\n     *\n     *  This is part of the necessary API for executing a contract, as\n     *  it provides a common property on any [[ContractRunner]] that\n     *  can be used to access the read-only portion of the runner.\n     */\n    provider: this;\n\n    /**\n     *  Shutdown any resources this provider is using. No additional\n     *  calls should be made to this provider after calling this.\n     */\n    destroy(): void;\n\n    ////////////////////\n    // State\n\n    /**\n     *  Get the current block number.\n     */\n    getBlockNumber(): Promise<number>;\n\n    /**\n     *  Get the connected [[Network]].\n     */\n    getNetwork(): Promise<Network>;\n\n    /**\n     *  Get the best guess at the recommended [[FeeData]].\n     */\n    getFeeData(): Promise<FeeData>;\n\n\n    ////////////////////\n    // Account\n\n    /**\n     *  Get the account balance (in wei) of %%address%%. If %%blockTag%%\n     *  is specified and the node supports archive access for that\n     *  %%blockTag%%, the balance is as of that [[BlockTag]].\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getBalance(address: AddressLike, blockTag?: BlockTag): Promise<bigint>;\n\n    /**\n     *  Get the number of transactions ever sent for %%address%%, which\n     *  is used as the ``nonce`` when sending a transaction. If\n     *  %%blockTag%% is specified and the node supports archive access\n     *  for that %%blockTag%%, the transaction count is as of that\n     *  [[BlockTag]].\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getTransactionCount(address: AddressLike, blockTag?: BlockTag): Promise<number>;\n\n    /**\n     *  Get the bytecode for %%address%%.\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getCode(address: AddressLike, blockTag?: BlockTag): Promise<string>\n\n    /**\n     *  Get the storage slot value for %%address%% at slot %%position%%.\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getStorage(address: AddressLike, position: BigNumberish, blockTag?: BlockTag): Promise<string>\n\n\n    ////////////////////\n    // Execution\n\n    /**\n     *  Estimates the amount of gas required to executre %%tx%%.\n     */\n    estimateGas(tx: TransactionRequest): Promise<bigint>;\n\n    /**\n     *  Simulate the execution of %%tx%%. If the call reverts, it will\n     *  throw a [[CallExceptionError]] which includes the revert data.\n     */\n    call(tx: TransactionRequest): Promise<string>\n\n    /**\n     *  Broadcasts the %%signedTx%% to the network, adding it to the\n     *  memory pool of any node for which the transaction meets the\n     *  rebroadcast requirements.\n     */\n    broadcastTransaction(signedTx: string): Promise<TransactionResponse>;\n\n\n    ////////////////////\n    // Queries\n\n    /**\n     *  Resolves to the block for %%blockHashOrBlockTag%%.\n     *\n     *  If %%prefetchTxs%%, and the backend supports including transactions\n     *  with block requests, all transactions will be included and the\n     *  [[Block]] object will not need to make remote calls for getting\n     *  transactions.\n     */\n    getBlock(blockHashOrBlockTag: BlockTag | string, prefetchTxs?: boolean): Promise<null | Block>;\n\n    /**\n     *  Resolves to the transaction for %%hash%%.\n     *\n     *  If the transaction is unknown or on pruning nodes which\n     *  discard old transactions this resolves to ``null``.\n     */\n    getTransaction(hash: string): Promise<null | TransactionResponse>;\n\n    /**\n     *  Resolves to the transaction receipt for %%hash%%, if mined.\n     *\n     *  If the transaction has not been mined, is unknown or on\n     *  pruning nodes which discard old transactions this resolves to\n     *  ``null``.\n     */\n    getTransactionReceipt(hash: string): Promise<null | TransactionReceipt>;\n\n    /**\n     *  Resolves to the result returned by the executions of %%hash%%.\n     *\n     *  This is only supported on nodes with archive access and with\n     *  the necessary debug APIs enabled.\n     */\n    getTransactionResult(hash: string): Promise<null | string>;\n\n\n    ////////////////////\n    // Bloom-filter Queries\n\n    /**\n     *  Resolves to the list of Logs that match %%filter%%\n     */\n    getLogs(filter: Filter | FilterByBlockHash): Promise<Array<Log>>;\n\n\n    ////////////////////\n    // ENS\n\n    /**\n     *  Resolves to the address configured for the %%ensName%% or\n     *  ``null`` if unconfigured.\n     */\n    resolveName(ensName: string): Promise<null | string>;\n\n    /**\n     *  Resolves to the ENS name associated for the %%address%% or\n     *  ``null`` if the //primary name// is not configured.\n     *\n     *  Users must perform additional steps to configure a //primary name//,\n     *  which is not currently common.\n     */\n    lookupAddress(address: string): Promise<null | string>;\n\n    /**\n     *  Waits until the transaction %%hash%% is mined and has %%confirms%%\n     *  confirmations.\n     */\n    waitForTransaction(hash: string, confirms?: number, timeout?: number): Promise<null | TransactionReceipt>;\n\n    /**\n     *  Resolves to the block at %%blockTag%% once it has been mined.\n     *\n     *  This can be useful for waiting some number of blocks by using\n     *  the ``currentBlockNumber + N``.\n     */\n    waitForBlock(blockTag?: BlockTag): Promise<Block>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}