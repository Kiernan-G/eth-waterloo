{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = void 0;\nvar index_js_1 = require(\"../address/index.js\");\nvar index_js_2 = require(\"../crypto/index.js\");\nvar index_js_3 = require(\"../utils/index.js\");\nvar regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nvar regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nvar regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nfunction _pack(type, value, isArray) {\n  switch (type) {\n    case \"address\":\n      if (isArray) {\n        return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));\n      }\n      return (0, index_js_3.getBytes)((0, index_js_1.getAddress)(value));\n    case \"string\":\n      return (0, index_js_3.toUtf8Bytes)(value);\n    case \"bytes\":\n      return (0, index_js_3.getBytes)(value);\n    case \"bool\":\n      value = !!value ? \"0x01\" : \"0x00\";\n      if (isArray) {\n        return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));\n      }\n      return (0, index_js_3.getBytes)(value);\n  }\n  var match = type.match(regexNumber);\n  if (match) {\n    var signed = match[1] === \"int\";\n    var size = parseInt(match[2] || \"256\");\n    (0, index_js_3.assertArgument)((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, \"invalid number type\", \"type\", type);\n    if (isArray) {\n      size = 256;\n    }\n    if (signed) {\n      value = (0, index_js_3.toTwos)(value, size);\n    }\n    return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)((0, index_js_3.toBeArray)(value), size / 8));\n  }\n  match = type.match(regexBytes);\n  if (match) {\n    var _size = parseInt(match[1]);\n    (0, index_js_3.assertArgument)(String(_size) === match[1] && _size !== 0 && _size <= 32, \"invalid bytes type\", \"type\", type);\n    (0, index_js_3.assertArgument)((0, index_js_3.dataLength)(value) === _size, \"invalid value for \".concat(type), \"value\", value);\n    if (isArray) {\n      return (0, index_js_3.getBytes)((0, index_js_3.zeroPadBytes)(value, 32));\n    }\n    return value;\n  }\n  match = type.match(regexArray);\n  if (match && Array.isArray(value)) {\n    var baseType = match[1];\n    var count = parseInt(match[2] || String(value.length));\n    (0, index_js_3.assertArgument)(count === value.length, \"invalid array length for \".concat(type), \"value\", value);\n    var result = [];\n    value.forEach(function (value) {\n      result.push(_pack(baseType, value, true));\n    });\n    return (0, index_js_3.getBytes)((0, index_js_3.concat)(result));\n  }\n  (0, index_js_3.assertArgument)(false, \"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\n/**\n *   Computes the [[link-solc-packed]] representation of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPacked([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nfunction solidityPacked(types, values) {\n  (0, index_js_3.assertArgument)(types.length === values.length, \"wrong number of values; expected ${ types.length }\", \"values\", values);\n  var tight = [];\n  types.forEach(function (type, index) {\n    tight.push(_pack(type, values[index]));\n  });\n  return (0, index_js_3.hexlify)((0, index_js_3.concat)(tight));\n}\nexports.solidityPacked = solidityPacked;\n/**\n *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedKeccak256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nfunction solidityPackedKeccak256(types, values) {\n  return (0, index_js_2.keccak256)(solidityPacked(types, values));\n}\nexports.solidityPackedKeccak256 = solidityPackedKeccak256;\n/**\n *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedSha256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nfunction solidityPackedSha256(types, values) {\n  return (0, index_js_2.sha256)(solidityPacked(types, values));\n}\nexports.solidityPackedSha256 = solidityPackedSha256;","map":{"version":3,"names":["index_js_1","require","index_js_2","index_js_3","regexBytes","RegExp","regexNumber","regexArray","_pack","type","value","isArray","getBytes","zeroPadValue","getAddress","toUtf8Bytes","match","signed","size","parseInt","assertArgument","String","toTwos","toBeArray","dataLength","concat","zeroPadBytes","Array","baseType","count","length","result","forEach","push","solidityPacked","types","values","tight","index","hexlify","exports","solidityPackedKeccak256","keccak256","solidityPackedSha256","sha256"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/hash/solidity.ts"],"sourcesContent":["import { getAddress } from \"../address/index.js\";\nimport {\n    keccak256 as _keccak256, sha256 as _sha256\n} from \"../crypto/index.js\";\nimport {\n    concat, dataLength, getBytes, hexlify, toBeArray, toTwos, toUtf8Bytes, zeroPadBytes, zeroPadValue,\n    assertArgument\n} from \"../utils/index.js\";\n\n\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\n\n\nfunction _pack(type: string, value: any, isArray?: boolean): Uint8Array {\n    switch(type) {\n        case \"address\":\n            if (isArray) { return getBytes(zeroPadValue(value, 32)); }\n            return getBytes(getAddress(value));\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return getBytes(value);\n        case \"bool\":\n            value = (!!value ? \"0x01\": \"0x00\");\n            if (isArray) { return getBytes(zeroPadValue(value, 32)); }\n            return getBytes(value);\n    }\n\n    let match =  type.match(regexNumber);\n    if (match) {\n        let signed = (match[1] === \"int\");\n        let size = parseInt(match[2] || \"256\")\n\n        assertArgument((!match[2] || match[2] === String(size)) && (size % 8 === 0) && size !== 0 && size <= 256, \"invalid number type\", \"type\", type);\n\n        if (isArray) { size = 256; }\n\n        if (signed) { value = toTwos(value, size); }\n\n        return getBytes(zeroPadValue(toBeArray(value), size / 8));\n    }\n\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n\n        assertArgument(String(size) === match[1] && size !== 0 && size <= 32, \"invalid bytes type\", \"type\", type);\n        assertArgument(dataLength(value) === size, `invalid value for ${ type }`, \"value\", value);\n\n        if (isArray) { return getBytes(zeroPadBytes(value, 32)); }\n        return value;\n    }\n\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        assertArgument(count === value.length, `invalid array length for ${ type }`, \"value\", value);\n\n        const result: Array<Uint8Array> = [];\n        value.forEach(function(value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return getBytes(concat(result));\n    }\n\n    assertArgument(false, \"invalid type\", \"type\", type)\n}\n\n// @TODO: Array Enum\n\n/**\n *   Computes the [[link-solc-packed]] representation of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPacked([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPacked(types: ReadonlyArray<string>, values: ReadonlyArray<any>): string {\n    assertArgument(types.length === values.length, \"wrong number of values; expected ${ types.length }\", \"values\", values);\n\n    const tight: Array<Uint8Array> = [];\n    types.forEach(function(type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\n\n/**\n *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedKeccak256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedKeccak256(types: ReadonlyArray<string>, values: ReadonlyArray<any>): string {\n    return _keccak256(solidityPacked(types, values));\n}\n\n/**\n *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedSha256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedSha256(types: ReadonlyArray<string>, values: ReadonlyArray<any>): string {\n    return _sha256(solidityPacked(types, values));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}