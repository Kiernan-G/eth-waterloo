{"ast":null,"code":"\"use strict\";\n\n// Counter Mode\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CTR_remaining, _CTR_remainingIndex, _CTR_counter;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CTR = void 0;\nvar mode_js_1 = require(\"./mode.js\");\nvar CTR = /*#__PURE__*/function (_mode_js_1$ModeOfOper) {\n  _inherits(CTR, _mode_js_1$ModeOfOper);\n  var _super = _createSuper(CTR);\n  function CTR(key, initialValue) {\n    var _this;\n    _classCallCheck(this, CTR);\n    _this = _super.call(this, \"CTR\", key, CTR);\n    // Remaining bytes for the one-time pad\n    _CTR_remaining.set(_assertThisInitialized(_this), void 0);\n    _CTR_remainingIndex.set(_assertThisInitialized(_this), void 0);\n    // The current counter\n    _CTR_counter.set(_assertThisInitialized(_this), void 0);\n    __classPrivateFieldSet(_assertThisInitialized(_this), _CTR_counter, new Uint8Array(16), \"f\");\n    __classPrivateFieldGet(_assertThisInitialized(_this), _CTR_counter, \"f\").fill(0);\n    __classPrivateFieldSet(_assertThisInitialized(_this), _CTR_remaining, __classPrivateFieldGet(_assertThisInitialized(_this), _CTR_counter, \"f\"), \"f\"); // This will be discarded immediately\n    __classPrivateFieldSet(_assertThisInitialized(_this), _CTR_remainingIndex, 16, \"f\");\n    if (initialValue == null) {\n      initialValue = 1;\n    }\n    if (typeof initialValue === \"number\") {\n      _this.setCounterValue(initialValue);\n    } else {\n      _this.setCounterBytes(initialValue);\n    }\n    return _this;\n  }\n  _createClass(CTR, [{\n    key: \"counter\",\n    get: function get() {\n      return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, \"f\"));\n    }\n  }, {\n    key: \"setCounterValue\",\n    value: function setCounterValue(value) {\n      if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n        throw new TypeError(\"invalid counter initial integer value\");\n      }\n      for (var index = 15; index >= 0; --index) {\n        __classPrivateFieldGet(this, _CTR_counter, \"f\")[index] = value % 256;\n        value = Math.floor(value / 256);\n      }\n    }\n  }, {\n    key: \"setCounterBytes\",\n    value: function setCounterBytes(value) {\n      if (value.length !== 16) {\n        throw new TypeError(\"invalid counter initial Uint8Array value length\");\n      }\n      __classPrivateFieldGet(this, _CTR_counter, \"f\").set(value);\n    }\n  }, {\n    key: \"increment\",\n    value: function increment() {\n      for (var i = 15; i >= 0; i--) {\n        if (__classPrivateFieldGet(this, _CTR_counter, \"f\")[i] === 255) {\n          __classPrivateFieldGet(this, _CTR_counter, \"f\")[i] = 0;\n        } else {\n          __classPrivateFieldGet(this, _CTR_counter, \"f\")[i]++;\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(plaintext) {\n      var _a, _b;\n      var crypttext = new Uint8Array(plaintext);\n      for (var i = 0; i < crypttext.length; i++) {\n        if (__classPrivateFieldGet(this, _CTR_remainingIndex, \"f\") === 16) {\n          __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, \"f\")), \"f\");\n          __classPrivateFieldSet(this, _CTR_remainingIndex, 0, \"f\");\n          this.increment();\n        }\n        crypttext[i] ^= __classPrivateFieldGet(this, _CTR_remaining, \"f\")[(__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, \"f\"), _a = _b++, _b), \"f\"), _a)];\n      }\n      return crypttext;\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(ciphertext) {\n      return this.encrypt(ciphertext);\n    }\n  }]);\n  return CTR;\n}(mode_js_1.ModeOfOperation);\nexports.CTR = CTR;\n_CTR_remaining = new WeakMap(), _CTR_remainingIndex = new WeakMap(), _CTR_counter = new WeakMap();","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","_assertThisInitialized","_inherits","_createSuper","mode_js_1","CTR","_mode_js_1$ModeOfOper","_super","key","initialValue","_this","call","_CTR_remaining","set","_CTR_remainingIndex","_CTR_counter","__classPrivateFieldSet","Uint8Array","__classPrivateFieldGet","fill","setCounterValue","setCounterBytes","get","value","Number","isInteger","MAX_SAFE_INTEGER","TypeError","index","Math","floor","length","increment","i","encrypt","plaintext","crypttext","aes","_b","_a","decrypt","ciphertext","ModeOfOperation","exports"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/aes-js/src.ts/mode-ctr.ts"],"sourcesContent":["// Counter Mode\n\nimport { ModeOfOperation } from \"./mode.js\";\n\nexport class CTR extends ModeOfOperation {\n\n  // Remaining bytes for the one-time pad\n  #remaining: Uint8Array;\n  #remainingIndex: number;\n\n  // The current counter\n  #counter: Uint8Array;\n\n  constructor(key: Uint8Array, initialValue?: number | Uint8Array) {\n    super(\"CTR\", key, CTR);\n\n    this.#counter = new Uint8Array(16)\n    this.#counter.fill(0);\n\n    this.#remaining = this.#counter;  // This will be discarded immediately\n    this.#remainingIndex = 16;\n\n    if (initialValue == null) { initialValue = 1; }\n\n    if (typeof(initialValue) === \"number\") {\n      this.setCounterValue(initialValue);\n    } else {\n      this.setCounterBytes(initialValue);\n    }\n  }\n\n  get counter(): Uint8Array { return new Uint8Array(this.#counter); }\n\n  setCounterValue(value: number): void {\n    if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n      throw new TypeError(\"invalid counter initial integer value\");\n    }\n\n    for (let index = 15; index >= 0; --index) {\n      this.#counter[index] = value % 256;\n      value = Math.floor(value / 256);\n    }\n  }\n\n  setCounterBytes(value: Uint8Array): void {\n    if (value.length !== 16) {\n      throw new TypeError(\"invalid counter initial Uint8Array value length\");\n    }\n\n    this.#counter.set(value);\n  }\n\n  increment() {\n    for (let i = 15; i >= 0; i--) {\n      if (this.#counter[i] === 255) {\n        this.#counter[i] = 0;\n      } else {\n        this.#counter[i]++;\n        break;\n      }\n    }\n  }\n\n  encrypt(plaintext: Uint8Array): Uint8Array {\n    const crypttext = new Uint8Array(plaintext);\n\n    for (let i = 0; i < crypttext.length; i++) {\n      if (this.#remainingIndex === 16) {\n        this.#remaining = this.aes.encrypt(this.#counter);\n        this.#remainingIndex = 0;\n        this.increment();\n      }\n      crypttext[i] ^= this.#remaining[this.#remainingIndex++];\n    }\n\n    return crypttext;\n  }\n\n  decrypt(ciphertext: Uint8Array): Uint8Array {\n    return this.encrypt(ciphertext);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}