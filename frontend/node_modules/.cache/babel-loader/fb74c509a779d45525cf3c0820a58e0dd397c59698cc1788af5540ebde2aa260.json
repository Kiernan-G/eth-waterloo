{"ast":null,"code":"\"use strict\";\n\n/**\n *  [[link-etherscan]] provides a third-party service for connecting to\n *  various blockchains over a combination of JSON-RPC and custom API\n *  endpoints.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\n */\nvar _regeneratorRuntime = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _get = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nvar _classCallCheck = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _defineProperty = require(\"/Users/aryanbindroo/eth-waterloo/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EtherscanProvider = exports.EtherscanPlugin = void 0;\nvar index_js_1 = require(\"../abi/index.js\");\nvar index_js_2 = require(\"../contract/index.js\");\nvar index_js_3 = require(\"../transaction/index.js\");\nvar index_js_4 = require(\"../utils/index.js\");\nvar abstract_provider_js_1 = require(\"./abstract-provider.js\");\nvar network_js_1 = require(\"./network.js\");\nvar plugins_network_js_1 = require(\"./plugins-network.js\");\nvar community_js_1 = require(\"./community.js\");\nvar THROTTLE = 2000;\nfunction isPromise(value) {\n  return value && typeof value.then === \"function\";\n}\nvar EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\n/**\n *  A Network can include an **EtherscanPlugin** to provide\n *  a custom base URL.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nvar EtherscanPlugin = /*#__PURE__*/function (_plugins_network_js_) {\n  _inherits(EtherscanPlugin, _plugins_network_js_);\n  var _super = _createSuper(EtherscanPlugin);\n  /**\n   *  Creates a new **EtherscanProvider** which will use\n   *  %%baseUrl%%.\n   */\n  function EtherscanPlugin(baseUrl) {\n    var _this;\n    _classCallCheck(this, EtherscanPlugin);\n    _this = _super.call(this, EtherscanPluginId);\n    /**\n     *  The Etherscan API base URL.\n     */\n    _defineProperty(_assertThisInitialized(_this), \"baseUrl\", void 0);\n    (0, index_js_4.defineProperties)(_assertThisInitialized(_this), {\n      baseUrl: baseUrl\n    });\n    return _this;\n  }\n  _createClass(EtherscanPlugin, [{\n    key: \"clone\",\n    value: function clone() {\n      return new EtherscanPlugin(this.baseUrl);\n    }\n  }]);\n  return EtherscanPlugin;\n}(plugins_network_js_1.NetworkPlugin);\nexports.EtherscanPlugin = EtherscanPlugin;\nvar skipKeys = [\"enableCcipRead\"];\nvar nextId = 1;\n/**\n *  The **EtherscanBaseProvider** is the super-class of\n *  [[EtherscanProvider]], which should generally be used instead.\n *\n *  Since the **EtherscanProvider** includes additional code for\n *  [[Contract]] access, in //rare cases// that contracts are not\n *  used, this class can reduce code size.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nvar _plugin = /*#__PURE__*/new WeakMap();\nvar EtherscanProvider = /*#__PURE__*/function (_abstract_provider_js) {\n  _inherits(EtherscanProvider, _abstract_provider_js);\n  var _super2 = _createSuper(EtherscanProvider);\n  /**\n   *  Creates a new **EtherscanBaseProvider**.\n   */\n  function EtherscanProvider(_network, _apiKey) {\n    var _this2;\n    _classCallCheck(this, EtherscanProvider);\n    var apiKey = _apiKey != null ? _apiKey : null;\n    _this2 = _super2.call(this);\n    /**\n     *  The connected network.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"network\", void 0);\n    /**\n     *  The API key or null if using the community provided bandwidth.\n     */\n    _defineProperty(_assertThisInitialized(_this2), \"apiKey\", void 0);\n    _classPrivateFieldInitSpec(_assertThisInitialized(_this2), _plugin, {\n      writable: true,\n      value: void 0\n    });\n    var network = network_js_1.Network.from(_network);\n    _classPrivateFieldSet(_assertThisInitialized(_this2), _plugin, network.getPlugin(EtherscanPluginId));\n    (0, index_js_4.defineProperties)(_assertThisInitialized(_this2), {\n      apiKey: apiKey,\n      network: network\n    });\n    // Test that the network is supported by Etherscan\n    _this2.getBaseUrl();\n    return _this2;\n  }\n  /**\n   *  Returns the base URL.\n   *\n   *  If an [[EtherscanPlugin]] is configured on the\n   *  [[EtherscanBaseProvider_network]], returns the plugin's\n   *  baseUrl.\n   */\n  _createClass(EtherscanProvider, [{\n    key: \"getBaseUrl\",\n    value: function getBaseUrl() {\n      if (_classPrivateFieldGet(this, _plugin)) {\n        return _classPrivateFieldGet(this, _plugin).baseUrl;\n      }\n      switch (this.network.name) {\n        case \"mainnet\":\n          return \"https:/\\/api.etherscan.io\";\n        case \"goerli\":\n          return \"https:/\\/api-goerli.etherscan.io\";\n        case \"sepolia\":\n          return \"https:/\\/api-sepolia.etherscan.io\";\n        case \"arbitrum\":\n          return \"https:/\\/api.arbiscan.io\";\n        case \"arbitrum-goerli\":\n          return \"https:/\\/api-goerli.arbiscan.io\";\n        case \"matic\":\n          return \"https:/\\/api.polygonscan.com\";\n        case \"matic-mumbai\":\n          return \"https:/\\/api-testnet.polygonscan.com\";\n        case \"optimism\":\n          return \"https:/\\/api-optimistic.etherscan.io\";\n        case \"optimism-goerli\":\n          return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n        default:\n      }\n      (0, index_js_4.assertArgument)(false, \"unsupported network\", \"network\", this.network);\n    }\n    /**\n     *  Returns the URL for the %%module%% and %%params%%.\n     */\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(module, params) {\n      var query = Object.keys(params).reduce(function (accum, key) {\n        var value = params[key];\n        if (value != null) {\n          accum += \"&\".concat(key, \"=\").concat(value);\n        }\n        return accum;\n      }, \"\");\n      var apiKey = this.apiKey ? \"&apikey=\".concat(this.apiKey) : \"\";\n      return \"\".concat(this.getBaseUrl(), \"/api?module=\").concat(module).concat(query).concat(apiKey);\n    }\n    /**\n     *  Returns the URL for using POST requests.\n     */\n  }, {\n    key: \"getPostUrl\",\n    value: function getPostUrl() {\n      return \"\".concat(this.getBaseUrl(), \"/api\");\n    }\n    /**\n     *  Returns the parameters for using POST requests.\n     */\n  }, {\n    key: \"getPostData\",\n    value: function getPostData(module, params) {\n      params.module = module;\n      params.apikey = this.apiKey;\n      return params;\n    }\n  }, {\n    key: \"detectNetwork\",\n    value: function () {\n      var _detectNetwork2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this.network);\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function detectNetwork() {\n        return _detectNetwork2.apply(this, arguments);\n      }\n      return detectNetwork;\n    }()\n    /**\n     *  Resolves to the result of calling %%module%% with %%params%%.\n     *\n     *  If %%post%%, the request is made as a POST request.\n     */\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(module, params, post) {\n        var _this3 = this;\n        var id, url, payload, request, response, result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              id = nextId++;\n              url = post ? this.getPostUrl() : this.getUrl(module, params);\n              payload = post ? this.getPostData(module, params) : null;\n              this.emit(\"debug\", {\n                action: \"sendRequest\",\n                id: id,\n                url: url,\n                payload: payload\n              });\n              request = new index_js_4.FetchRequest(url);\n              request.setThrottleParams({\n                slotInterval: 1000\n              });\n              request.retryFunc = function (req, resp, attempt) {\n                if (_this3.isCommunityResource()) {\n                  (0, community_js_1.showThrottleMessage)(\"Etherscan\");\n                }\n                return Promise.resolve(true);\n              };\n              request.processFunc = /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request, response) {\n                  var result, throttle;\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        result = response.hasBody() ? JSON.parse((0, index_js_4.toUtf8String)(response.body)) : {};\n                        throttle = (typeof result.result === \"string\" ? result.result : \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\n                        if (module === \"proxy\") {\n                          // This JSON response indicates we are being throttled\n                          if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\n                            _this3.emit(\"debug\", {\n                              action: \"receiveError\",\n                              id: id,\n                              reason: \"proxy-NOTOK\",\n                              error: result\n                            });\n                            response.throwThrottleError(result.result, THROTTLE);\n                          }\n                        } else {\n                          if (throttle) {\n                            _this3.emit(\"debug\", {\n                              action: \"receiveError\",\n                              id: id,\n                              reason: \"null result\",\n                              error: result.result\n                            });\n                            response.throwThrottleError(result.result, THROTTLE);\n                          }\n                        }\n                        return _context2.abrupt(\"return\", response);\n                      case 4:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2);\n                }));\n                return function (_x4, _x5) {\n                  return _ref.apply(this, arguments);\n                };\n              }();\n              if (payload) {\n                request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n                request.body = Object.keys(payload).map(function (k) {\n                  return \"\".concat(k, \"=\").concat(payload[k]);\n                }).join(\"&\");\n              }\n              _context3.next = 11;\n              return request.send();\n            case 11:\n              response = _context3.sent;\n              try {\n                response.assertOk();\n              } catch (error) {\n                this.emit(\"debug\", {\n                  action: \"receiveError\",\n                  id: id,\n                  error: error,\n                  reason: \"assertOk\"\n                });\n                (0, index_js_4.assert)(false, \"response error\", \"SERVER_ERROR\", {\n                  request: request,\n                  response: response\n                });\n              }\n              if (!response.hasBody()) {\n                this.emit(\"debug\", {\n                  action: \"receiveError\",\n                  id: id,\n                  error: \"missing body\",\n                  reason: \"null body\"\n                });\n                (0, index_js_4.assert)(false, \"missing response\", \"SERVER_ERROR\", {\n                  request: request,\n                  response: response\n                });\n              }\n              result = JSON.parse((0, index_js_4.toUtf8String)(response.body));\n              if (!(module === \"proxy\")) {\n                _context3.next = 22;\n                break;\n              }\n              if (result.jsonrpc != \"2.0\") {\n                this.emit(\"debug\", {\n                  action: \"receiveError\",\n                  id: id,\n                  result: result,\n                  reason: \"invalid JSON-RPC\"\n                });\n                (0, index_js_4.assert)(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", {\n                  request: request,\n                  response: response,\n                  info: {\n                    result: result\n                  }\n                });\n              }\n              if (result.error) {\n                this.emit(\"debug\", {\n                  action: \"receiveError\",\n                  id: id,\n                  result: result,\n                  reason: \"JSON-RPC error\"\n                });\n                (0, index_js_4.assert)(false, \"error response\", \"SERVER_ERROR\", {\n                  request: request,\n                  response: response,\n                  info: {\n                    result: result\n                  }\n                });\n              }\n              this.emit(\"debug\", {\n                action: \"receiveRequest\",\n                id: id,\n                result: result\n              });\n              return _context3.abrupt(\"return\", result.result);\n            case 22:\n              if (!(result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\"))) {\n                _context3.next = 25;\n                break;\n              }\n              this.emit(\"debug\", {\n                action: \"receiveRequest\",\n                id: id,\n                result: result\n              });\n              return _context3.abrupt(\"return\", result.result);\n            case 25:\n              if (result.status != 1 || typeof result.message === \"string\" && !result.message.match(/^OK/)) {\n                this.emit(\"debug\", {\n                  action: \"receiveError\",\n                  id: id,\n                  result: result\n                });\n                (0, index_js_4.assert)(false, \"error response\", \"SERVER_ERROR\", {\n                  request: request,\n                  response: response,\n                  info: {\n                    result: result\n                  }\n                });\n              }\n              this.emit(\"debug\", {\n                action: \"receiveRequest\",\n                id: id,\n                result: result\n              });\n              return _context3.abrupt(\"return\", result.result);\n            case 28:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function fetch(_x, _x2, _x3) {\n        return _fetch.apply(this, arguments);\n      }\n      return fetch;\n    }()\n    /**\n     *  Returns %%transaction%% normalized for the Etherscan API.\n     */\n  }, {\n    key: \"_getTransactionPostData\",\n    value: function _getTransactionPostData(transaction) {\n      var result = {};\n      for (var key in transaction) {\n        if (skipKeys.indexOf(key) >= 0) {\n          continue;\n        }\n        if (transaction[key] == null) {\n          continue;\n        }\n        var value = transaction[key];\n        if (key === \"type\" && value === 0) {\n          continue;\n        }\n        // Quantity-types require no leading zero, unless 0\n        if ({\n          type: true,\n          gasLimit: true,\n          gasPrice: true,\n          maxFeePerGs: true,\n          maxPriorityFeePerGas: true,\n          nonce: true,\n          value: true\n        }[key]) {\n          value = (0, index_js_4.toQuantity)(value);\n        } else if (key === \"accessList\") {\n          value = \"[\" + (0, index_js_3.accessListify)(value).map(function (set) {\n            return \"{address:\\\"\".concat(set.address, \"\\\",storageKeys:[\\\"\").concat(set.storageKeys.join('\",\"'), \"\\\"]}\");\n          }).join(\",\") + \"]\";\n        } else {\n          value = (0, index_js_4.hexlify)(value);\n        }\n        result[key] = value;\n      }\n      return result;\n    }\n    /**\n     *  Throws the normalized Etherscan error.\n     */\n  }, {\n    key: \"_checkError\",\n    value: function _checkError(req, error, transaction) {\n      // Pull any message out if, possible\n      var message = \"\";\n      if ((0, index_js_4.isError)(error, \"SERVER_ERROR\")) {\n        // Check for an error emitted by a proxy call\n        try {\n          message = error.info.result.error.message;\n        } catch (e) {}\n        if (!message) {\n          try {\n            message = error.info.message;\n          } catch (e) {}\n        }\n      }\n      if (req.method === \"estimateGas\") {\n        if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\n          (0, index_js_4.assert)(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n            transaction: req.transaction\n          });\n        }\n      }\n      if (req.method === \"call\" || req.method === \"estimateGas\") {\n        if (message.match(/execution reverted/i)) {\n          var data = \"\";\n          try {\n            data = error.info.result.error.data;\n          } catch (error) {}\n          var e = index_js_1.AbiCoder.getBuiltinCallException(req.method, req.transaction, data);\n          e.info = {\n            request: req,\n            error: error\n          };\n          throw e;\n        }\n      }\n      if (message) {\n        if (req.method === \"broadcastTransaction\") {\n          var _transaction = index_js_3.Transaction.from(req.signedTransaction);\n          if (message.match(/replacement/i) && message.match(/underpriced/i)) {\n            (0, index_js_4.assert)(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n              transaction: _transaction\n            });\n          }\n          if (message.match(/insufficient funds/)) {\n            (0, index_js_4.assert)(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n              transaction: _transaction\n            });\n          }\n          if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n            (0, index_js_4.assert)(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\n              transaction: _transaction\n            });\n          }\n        }\n      }\n      // Something we could not process\n      throw error;\n    }\n  }, {\n    key: \"_detectNetwork\",\n    value: function () {\n      var _detectNetwork3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", this.network);\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function _detectNetwork() {\n        return _detectNetwork3.apply(this, arguments);\n      }\n      return _detectNetwork;\n    }()\n  }, {\n    key: \"_perform\",\n    value: function () {\n      var _perform2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req) {\n        var _this4 = this;\n        var postData, _postData;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.t0 = req.method;\n              _context5.next = _context5.t0 === \"chainId\" ? 3 : _context5.t0 === \"getBlockNumber\" ? 4 : _context5.t0 === \"getGasPrice\" ? 5 : _context5.t0 === \"getBalance\" ? 6 : _context5.t0 === \"getTransactionCount\" ? 7 : _context5.t0 === \"getCode\" ? 8 : _context5.t0 === \"getStorage\" ? 9 : _context5.t0 === \"broadcastTransaction\" ? 10 : _context5.t0 === \"getBlock\" ? 11 : _context5.t0 === \"getTransaction\" ? 14 : _context5.t0 === \"getTransactionReceipt\" ? 15 : _context5.t0 === \"call\" ? 16 : _context5.t0 === \"estimateGas\" ? 30 : 42;\n              break;\n            case 3:\n              return _context5.abrupt(\"return\", this.network.chainId);\n            case 4:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_blockNumber\"\n              }));\n            case 5:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_gasPrice\"\n              }));\n            case 6:\n              return _context5.abrupt(\"return\", this.fetch(\"account\", {\n                action: \"balance\",\n                address: req.address,\n                tag: req.blockTag\n              }));\n            case 7:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getTransactionCount\",\n                address: req.address,\n                tag: req.blockTag\n              }));\n            case 8:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getCode\",\n                address: req.address,\n                tag: req.blockTag\n              }));\n            case 9:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getStorageAt\",\n                address: req.address,\n                position: req.position,\n                tag: req.blockTag\n              }));\n            case 10:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_sendRawTransaction\",\n                hex: req.signedTransaction\n              }, true).catch(function (error) {\n                return _this4._checkError(req, error, req.signedTransaction);\n              }));\n            case 11:\n              if (!(\"blockTag\" in req)) {\n                _context5.next = 13;\n                break;\n              }\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getBlockByNumber\",\n                tag: req.blockTag,\n                boolean: req.includeTransactions ? \"true\" : \"false\"\n              }));\n            case 13:\n              (0, index_js_4.assert)(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getBlock(blockHash)\"\n              });\n            case 14:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getTransactionByHash\",\n                txhash: req.hash\n              }));\n            case 15:\n              return _context5.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getTransactionReceipt\",\n                txhash: req.hash\n              }));\n            case 16:\n              if (!(req.blockTag !== \"latest\")) {\n                _context5.next = 18;\n                break;\n              }\n              throw new Error(\"EtherscanProvider does not support blockTag for call\");\n            case 18:\n              postData = this._getTransactionPostData(req.transaction);\n              postData.module = \"proxy\";\n              postData.action = \"eth_call\";\n              _context5.prev = 21;\n              _context5.next = 24;\n              return this.fetch(\"proxy\", postData, true);\n            case 24:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 27:\n              _context5.prev = 27;\n              _context5.t1 = _context5[\"catch\"](21);\n              return _context5.abrupt(\"return\", this._checkError(req, _context5.t1, req.transaction));\n            case 30:\n              _postData = this._getTransactionPostData(req.transaction);\n              _postData.module = \"proxy\";\n              _postData.action = \"eth_estimateGas\";\n              _context5.prev = 33;\n              _context5.next = 36;\n              return this.fetch(\"proxy\", _postData, true);\n            case 36:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 39:\n              _context5.prev = 39;\n              _context5.t2 = _context5[\"catch\"](33);\n              return _context5.abrupt(\"return\", this._checkError(req, _context5.t2, req.transaction));\n            case 42:\n              return _context5.abrupt(\"break\", 43);\n            case 43:\n              return _context5.abrupt(\"return\", _get(_getPrototypeOf(EtherscanProvider.prototype), \"_perform\", this).call(this, req));\n            case 44:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[21, 27], [33, 39]]);\n      }));\n      function _perform(_x6) {\n        return _perform2.apply(this, arguments);\n      }\n      return _perform;\n    }()\n  }, {\n    key: \"getNetwork\",\n    value: function () {\n      var _getNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", this.network);\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getNetwork() {\n        return _getNetwork.apply(this, arguments);\n      }\n      return getNetwork;\n    }()\n    /**\n     *  Resolves to the current price of ether.\n     *\n     *  This returns ``0`` on any network other than ``mainnet``.\n     */\n  }, {\n    key: \"getEtherPrice\",\n    value: function () {\n      var _getEtherPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(this.network.name !== \"mainnet\")) {\n                _context7.next = 2;\n                break;\n              }\n              return _context7.abrupt(\"return\", 0.0);\n            case 2:\n              _context7.t0 = parseFloat;\n              _context7.next = 5;\n              return this.fetch(\"stats\", {\n                action: \"ethprice\"\n              });\n            case 5:\n              _context7.t1 = _context7.sent.ethusd;\n              return _context7.abrupt(\"return\", (0, _context7.t0)(_context7.t1));\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function getEtherPrice() {\n        return _getEtherPrice.apply(this, arguments);\n      }\n      return getEtherPrice;\n    }()\n    /**\n     *  Resolves to a [Contract]] for %%address%%, using the\n     *  Etherscan API to retreive the Contract ABI.\n     */\n  }, {\n    key: \"getContract\",\n    value: function () {\n      var _getContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(_address) {\n        var address, resp, abi;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              address = this._getAddress(_address);\n              if (!isPromise(address)) {\n                _context8.next = 5;\n                break;\n              }\n              _context8.next = 4;\n              return address;\n            case 4:\n              address = _context8.sent;\n            case 5:\n              _context8.prev = 5;\n              _context8.next = 8;\n              return this.fetch(\"contract\", {\n                action: \"getabi\",\n                address: address\n              });\n            case 8:\n              resp = _context8.sent;\n              abi = JSON.parse(resp);\n              return _context8.abrupt(\"return\", new index_js_2.Contract(address, abi, this));\n            case 13:\n              _context8.prev = 13;\n              _context8.t0 = _context8[\"catch\"](5);\n              return _context8.abrupt(\"return\", null);\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[5, 13]]);\n      }));\n      function getContract(_x7) {\n        return _getContract.apply(this, arguments);\n      }\n      return getContract;\n    }()\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey == null;\n    }\n  }]);\n  return EtherscanProvider;\n}(abstract_provider_js_1.AbstractProvider);\nexports.EtherscanProvider = EtherscanProvider;","map":{"version":3,"names":["_regeneratorRuntime","require","default","_asyncToGenerator","_get","_getPrototypeOf","_classPrivateFieldInitSpec","_classPrivateFieldGet","_classPrivateFieldSet","_classCallCheck","_createClass","_assertThisInitialized","_inherits","_createSuper","_defineProperty","index_js_1","index_js_2","index_js_3","index_js_4","abstract_provider_js_1","network_js_1","plugins_network_js_1","community_js_1","THROTTLE","isPromise","value","then","EtherscanPluginId","EtherscanPlugin","_plugins_network_js_","_super","baseUrl","_this","call","defineProperties","key","clone","NetworkPlugin","exports","skipKeys","nextId","_plugin","WeakMap","EtherscanProvider","_abstract_provider_js","_super2","_network","_apiKey","_this2","apiKey","writable","network","Network","from","getPlugin","getBaseUrl","name","assertArgument","getUrl","module","params","query","Object","keys","reduce","accum","concat","getPostUrl","getPostData","apikey","_detectNetwork2","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","stop","detectNetwork","apply","arguments","_fetch","_callee3","post","_this3","id","url","payload","request","response","result","_callee3$","_context3","emit","action","FetchRequest","setThrottleParams","slotInterval","retryFunc","req","resp","attempt","isCommunityResource","showThrottleMessage","Promise","resolve","processFunc","_ref","_callee2","throttle","_callee2$","_context2","hasBody","JSON","parse","toUtf8String","body","toLowerCase","indexOf","status","message","reason","error","throwThrottleError","_x4","_x5","setHeader","map","k","join","send","sent","assertOk","assert","jsonrpc","info","match","fetch","_x","_x2","_x3","_getTransactionPostData","transaction","type","gasLimit","gasPrice","maxFeePerGs","maxPriorityFeePerGas","nonce","toQuantity","accessListify","set","address","storageKeys","hexlify","_checkError","isError","e","method","data","AbiCoder","getBuiltinCallException","Transaction","signedTransaction","_detectNetwork3","_callee4","_callee4$","_context4","_detectNetwork","_perform2","_callee5","_this4","postData","_postData","_callee5$","_context5","t0","chainId","tag","blockTag","position","hex","catch","boolean","includeTransactions","operation","txhash","hash","Error","t1","t2","prototype","_perform","_x6","_getNetwork","_callee6","_callee6$","_context6","getNetwork","_getEtherPrice","_callee7","_callee7$","_context7","parseFloat","ethusd","getEtherPrice","_getContract","_callee8","_address","abi","_callee8$","_context8","_getAddress","Contract","getContract","_x7","AbstractProvider"],"sources":["/Users/aryanbindroo/eth-waterloo/frontend/node_modules/ethers/src.ts/providers/provider-etherscan.ts"],"sourcesContent":["/**\n *  [[link-etherscan]] provides a third-party service for connecting to\n *  various blockchains over a combination of JSON-RPC and custom API\n *  endpoints.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\n */\n\nimport { AbiCoder } from \"../abi/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { accessListify, Transaction } from \"../transaction/index.js\";\nimport {\n    defineProperties,\n    hexlify, toQuantity,\n    FetchRequest,\n    assert, assertArgument, isError,\n    toUtf8String\n } from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nimport { NetworkPlugin } from \"./plugins-network.js\";\nimport { showThrottleMessage } from \"./community.js\";\n\nimport { PerformActionRequest } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\";\n//import type { } from \"./pagination\";\nimport type { TransactionRequest } from \"./provider.js\";\n\nconst THROTTLE = 2000;\n\nfunction isPromise<T = any>(value: any): value is Promise<T> {\n    return (value && typeof(value.then) === \"function\");\n}\n\n\n/**\n *  When subscribing to the ``\"debug\"`` event on an Etherscan-based\n *  provider, the events receive a **DebugEventEtherscanProvider**\n *  payload.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport type DebugEventEtherscanProvider = {\n    action: \"sendRequest\",\n    id: number,\n    url: string,\n    payload: Record<string, any>\n} | {\n    action: \"receiveRequest\",\n    id: number,\n    result: any\n} | {\n    action: \"receiveError\",\n    id: number,\n    error: any\n};\n\nconst EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\n\n/**\n *  A Network can include an **EtherscanPlugin** to provide\n *  a custom base URL.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanPlugin extends NetworkPlugin {\n    /**\n     *  The Etherscan API base URL.\n     */\n    readonly baseUrl!: string;\n\n    /**\n     *  Creates a new **EtherscanProvider** which will use\n     *  %%baseUrl%%.\n     */\n    constructor(baseUrl: string) {\n        super(EtherscanPluginId);\n        defineProperties<EtherscanPlugin>(this, { baseUrl });\n    }\n\n    clone(): EtherscanPlugin {\n        return new EtherscanPlugin(this.baseUrl);\n    }\n}\n\nconst skipKeys = [ \"enableCcipRead\" ];\n\nlet nextId = 1;\n\n/**\n *  The **EtherscanBaseProvider** is the super-class of\n *  [[EtherscanProvider]], which should generally be used instead.\n *\n *  Since the **EtherscanProvider** includes additional code for\n *  [[Contract]] access, in //rare cases// that contracts are not\n *  used, this class can reduce code size.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanProvider extends AbstractProvider {\n\n    /**\n     *  The connected network.\n     */\n    readonly network!: Network;\n\n    /**\n     *  The API key or null if using the community provided bandwidth.\n     */\n    readonly apiKey!: null | string;\n\n    readonly #plugin: null | EtherscanPlugin;\n\n    /**\n     *  Creates a new **EtherscanBaseProvider**.\n     */\n    constructor(_network?: Networkish, _apiKey?: string) {\n        const apiKey = (_apiKey != null) ? _apiKey: null;\n\n        super();\n\n        const network = Network.from(_network);\n\n        this.#plugin = network.getPlugin<EtherscanPlugin>(EtherscanPluginId);\n\n        defineProperties<EtherscanProvider>(this, { apiKey, network });\n\n        // Test that the network is supported by Etherscan\n        this.getBaseUrl();\n    }\n\n    /**\n     *  Returns the base URL.\n     *\n     *  If an [[EtherscanPlugin]] is configured on the\n     *  [[EtherscanBaseProvider_network]], returns the plugin's\n     *  baseUrl.\n     */\n    getBaseUrl(): string {\n        if (this.#plugin) { return this.#plugin.baseUrl; }\n\n        switch(this.network.name) {\n            case \"mainnet\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"matic-mumbai\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n            default:\n        }\n\n        assertArgument(false, \"unsupported network\", \"network\", this.network);\n    }\n\n    /**\n     *  Returns the URL for the %%module%% and %%params%%.\n     */\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.getBaseUrl() }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    /**\n     *  Returns the URL for using POST requests.\n     */\n    getPostUrl(): string {\n        return `${ this.getBaseUrl() }/api`;\n    }\n\n    /**\n     *  Returns the parameters for using POST requests.\n     */\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    /**\n     *  Resolves to the result of calling %%module%% with %%params%%.\n     *\n     *  If %%post%%, the request is made as a POST request.\n     */\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const id = nextId++;\n\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n\n        this.emit(\"debug\", { action: \"sendRequest\", id, url, payload: payload });\n\n        const request = new FetchRequest(url);\n        request.setThrottleParams({ slotInterval: 1000 });\n        request.retryFunc = (req, resp, attempt: number) => {\n            if (this.isCommunityResource()) {\n                showThrottleMessage(\"Etherscan\");\n            }\n            return Promise.resolve(true);\n        };\n        request.processFunc = async (request, response) => {\n            const result = response.hasBody() ? JSON.parse(toUtf8String(response.body)): { };\n            const throttle = ((typeof(result.result) === \"string\") ? result.result: \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\n            if (module === \"proxy\") {\n                // This JSON response indicates we are being throttled\n                if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"proxy-NOTOK\", error: result });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            } else {\n                if (throttle) {\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"null result\", error: result.result });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            }\n            return response;\n        };\n\n        if (payload) {\n            request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n            request.body = Object.keys(payload).map((k) => `${ k }=${ payload[k] }`).join(\"&\");\n        }\n\n        const response = await request.send();\n        try {\n            response.assertOk();\n        } catch (error) {\n            this.emit(\"debug\", { action: \"receiveError\", id, error, reason: \"assertOk\" });\n            assert(false, \"response error\", \"SERVER_ERROR\", { request, response });\n        }\n\n        if (!response.hasBody()) {\n            this.emit(\"debug\", { action: \"receiveError\", id, error: \"missing body\", reason: \"null body\" });\n            assert(false, \"missing response\", \"SERVER_ERROR\", { request, response });\n        }\n\n        const result = JSON.parse(toUtf8String(response.body));\n        if (module === \"proxy\") {\n            if (result.jsonrpc != \"2.0\") {\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"invalid JSON-RPC\" });\n                assert(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            if (result.error) {\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"JSON-RPC error\" });\n                assert(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n\n            return result.result;\n\n        } else {\n            // getLogs, getHistory have weird success responses\n            if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n                this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n                return result.result;\n            }\n\n            if (result.status != 1 || (typeof(result.message) === \"string\" && !result.message.match(/^OK/))) {\n                this.emit(\"debug\", { action: \"receiveError\", id, result });\n                assert(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n\n            return result.result;\n        }\n    }\n\n    /**\n     *  Returns %%transaction%% normalized for the Etherscan API.\n     */\n    _getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n        const result: Record<string, string> = { };\n        for (let key in transaction) {\n            if (skipKeys.indexOf(key) >= 0) { continue; }\n\n            if ((<any>transaction)[key] == null) { continue; }\n            let value = (<any>transaction)[key];\n            if (key === \"type\" && value === 0) { continue; }\n\n            // Quantity-types require no leading zero, unless 0\n            if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n                value = toQuantity(value);\n            } else if (key === \"accessList\") {\n                value = \"[\" + accessListify(value).map((set) => {\n                    return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n                }).join(\",\") + \"]\";\n            } else {\n                value = hexlify(value);\n            }\n            result[key] = value;\n        }\n        return result;\n    }\n\n    /**\n     *  Throws the normalized Etherscan error.\n     */\n    _checkError(req: PerformActionRequest, error: Error, transaction: any): never {\n\n        // Pull any message out if, possible\n        let message = \"\";\n        if (isError(error, \"SERVER_ERROR\")) {\n            // Check for an error emitted by a proxy call\n            try {\n                message = (<any>error).info.result.error.message;\n            } catch (e) { }\n\n            if (!message) {\n                try {\n                    message = (<any>error).info.message;\n                } catch (e) { }\n            }\n        }\n\n        if (req.method === \"estimateGas\") {\n            if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\n                assert(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: req.transaction\n                });\n            }\n        }\n\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            if (message.match(/execution reverted/i)) {\n                let data = \"\";\n                try {\n                    data = (<any>error).info.result.error.data;\n                } catch (error) { }\n\n                const e = AbiCoder.getBuiltinCallException(req.method, <any>req.transaction, data);\n                e.info = { request: req, error }\n                throw e;\n            }\n        }\n\n        if (message) {\n            if (req.method === \"broadcastTransaction\") {\n                const transaction = Transaction.from(req.signedTransaction);\n                if (message.match(/replacement/i) && message.match(/underpriced/i)) {\n                    assert(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n                        transaction\n                    });\n                }\n\n                if (message.match(/insufficient funds/)) {\n                    assert(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                       transaction\n                    });\n                }\n\n                if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n                    assert(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\n                       transaction\n                    });\n                }\n            }\n        }\n\n        // Something we could not process\n        throw error;\n    }\n\n    async _detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async _perform(req: PerformActionRequest): Promise<any> {\n        switch (req.method) {\n            case \"chainId\":\n                return this.network.chainId;\n\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n           case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n            case \"getStorage\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: req.address,\n                    position: req.position,\n                    tag: req.blockTag\n                });\n\n            case \"broadcastTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: req.signedTransaction\n                }, true).catch((error) => {\n                    return this._checkError(req, <Error>error, req.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: req.blockTag,\n                        boolean: (req.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n\n                assert(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"getBlock(blockHash)\"\n                });\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: req.hash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: req.hash\n                });\n\n            case \"call\": {\n                if (req.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = this._getTransactionPostData(req.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return this._checkError(req, <Error>error, req.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = this._getTransactionPostData(req.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return this._checkError(req, <Error>error, req.transaction);\n                }\n            }\n/*\n            case \"getLogs\": {\n                // Needs to complain if more than one address is passed in\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n*/\n            default:\n                break;\n        }\n\n        return super._perform(req);\n    }\n\n    async getNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    /**\n     *  Resolves to the current price of ether.\n     *\n     *  This returns ``0`` on any network other than ``mainnet``.\n     */\n    async getEtherPrice(): Promise<number> {\n        if (this.network.name !== \"mainnet\") { return 0.0; }\n        return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n    }\n\n    /**\n     *  Resolves to a [Contract]] for %%address%%, using the\n     *  Etherscan API to retreive the Contract ABI.\n     */\n    async getContract(_address: string): Promise<null | Contract> {\n        let address = this._getAddress(_address);\n        if (isPromise(address)) { address = await address; }\n\n        try {\n            const resp = await this.fetch(\"contract\", {\n            action: \"getabi\", address });\n            const abi = JSON.parse(resp);\n            return new Contract(address, abi, this);\n        } catch (error) {\n            return null;\n        }\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey == null);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}